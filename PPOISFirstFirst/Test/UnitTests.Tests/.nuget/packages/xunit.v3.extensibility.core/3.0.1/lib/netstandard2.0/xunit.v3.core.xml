<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.v3.core</name>
    </assembly>
    <members>
        <member name="T:Xunit.v3.IAssemblyFixtureAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of
            the fixture data is initialized before any test in the assembly are run (including
            <see cref="M:Xunit.IAsyncLifetime.InitializeAsync"/> if it's implemented). After all the tests in the
            assembly have been run, it is cleaned up by calling <see cref="M:System.IAsyncDisposable.DisposeAsync"/>
            if it's implemented, or it falls back to <see cref="M:System.IDisposable.Dispose"/> if that's implemented.
            Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data
            from inside the test, a constructor argument should be added to the test class which exactly
            matches the fixture type.
            </summary>
            <remarks>Assembly fixture attributes are only valid at the assembly level.</remarks>
        </member>
        <member name="P:Xunit.v3.IAssemblyFixtureAttribute.AssemblyFixtureType">
            <summary>
            Gets the fixture type.
            </summary>
        </member>
        <member name="T:Xunit.v3.IBeforeAfterTestAttribute">
            <summary>
            Indicates an attribute which is involved in test method interception (allows code to be run
            before and after a test is run).
            </summary>
        </member>
        <member name="M:Xunit.v3.IBeforeAfterTestAttribute.After(System.Reflection.MethodInfo,Xunit.v3.IXunitTest)">
            <summary>
            This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
            <param name="test">The current <see cref="T:Xunit.Sdk.ITest"/></param>
        </member>
        <member name="M:Xunit.v3.IBeforeAfterTestAttribute.Before(System.Reflection.MethodInfo,Xunit.v3.IXunitTest)">
            <summary>
            This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
            <param name="test">The current <see cref="T:Xunit.Sdk.ITest"/></param>
        </member>
        <member name="T:Xunit.v3.ICollectionAttribute">
            <summary>
            Used to declare a specific test collection for a test class. Only valid on test classes, and only
            a single instance of a collection attribute may be present.
            </summary>
        </member>
        <member name="P:Xunit.v3.ICollectionAttribute.Name">
            <summary>
            Gets the name of the collection.
            </summary>
        </member>
        <member name="P:Xunit.v3.ICollectionAttribute.Type">
            <summary>
            Gets the collection definition type. Returns <c>null</c> if the collection is purely
            based on name.
            </summary>
        </member>
        <member name="T:Xunit.v3.ICollectionBehaviorAttribute">
            <summary>
            Used to declare the default test collection behavior for the assembly. This is only valid at the assembly level,
            and there can be only one.
            </summary>
        </member>
        <member name="P:Xunit.v3.ICollectionBehaviorAttribute.CollectionFactoryType">
            <summary>
            Gets the collection factory type specified by this collection behavior attribute.
            </summary>
        </member>
        <member name="P:Xunit.v3.ICollectionBehaviorAttribute.DisableTestParallelization">
            <summary>
            Determines whether tests in this assembly are run in parallel.
            </summary>
        </member>
        <member name="P:Xunit.v3.ICollectionBehaviorAttribute.MaxParallelThreads">
            <summary>
            Determines how many tests can run in parallel with each other. If set to 0, the system will
            use <see cref="P:System.Environment.ProcessorCount"/>. If set to a negative number, then there will
            be no limit to the number of threads.
            </summary>
        </member>
        <member name="P:Xunit.v3.ICollectionBehaviorAttribute.ParallelAlgorithm">
            <summary>
            Determines the parallel algorithm used when running tests in parallel.
            </summary>
        </member>
        <member name="T:Xunit.v3.IDataAttribute">
            <summary>
            Base interface that all data attributes (that is, data providers for theories) are
            expected to implement. Data attributes are valid on methods only.
            </summary>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.Explicit">
            <summary>
            Gets a value that determines whether the data rows provided by this data
            provider should be considered explicit or not. If <c>true</c>, then the data
            rows will all be considered explicit; if <c>false</c>, then the data rows
            will all be considered not explicit; if <c>null</c>, then the data rows will
            inherit their explicitness from <see cref="P:Xunit.v3.IFactAttribute.Explicit"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.Label">
            <summary>
            Gets the label to use for the data row. This value is used to help format the display name
            of the test.
            </summary>
            <remarks>
            * If the value is <c>null</c> (or not set), use the default behavior: <c>MethodName(...argument list...)</c><br/>
            * If the value is an empty string, use just the method name: <c>MethodName</c><br/>
            * For any other values, appends the label: <c>MethodName [label]</c>
            </remarks>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.Skip">
            <summary>
            Gets a skip reason for all the data rows provided by this data provider. If
            not <c>null</c>, then all rows will be skipped with the given reason; if <c>null</c>,
            then the rows will inherit their skip reason from <see cref="P:Xunit.v3.IFactAttribute.Skip"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.SkipType">
            <summary>
            Gets the type to retrieve <see cref="P:Xunit.v3.IDataAttribute.SkipUnless"/> or <see cref="P:Xunit.v3.IDataAttribute.SkipWhen"/> from. If not set,
            then the property will be retrieved from the unit test class.
            </summary>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.SkipUnless">
            <summary>
            Gets the name of a public static property on the test class which returns <c>bool</c>
            to indicate whether the test should be skipped (<c>false</c>) or not (<c>true</c>).
            </summary>
            <remarks>
            This property cannot be set if <see cref="P:Xunit.v3.IDataAttribute.SkipWhen"/> is set. Setting both will
            result in a failed test.
            To ensure compile-time safety and easier refactoring, use the <c>nameof</c> operator,
            e.g., <c>SkipUnless = nameof(IsConditionMet)</c>.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.SkipWhen">
            <summary>
            Gets the name of a public static property on the test class which returns <c>bool</c>
            to indicate whether the test should be skipped (<c>true</c>) or not (<c>false</c>).
            </summary>
            <remarks>
            This property cannot be set if <see cref="P:Xunit.v3.IDataAttribute.SkipUnless"/> is set. Setting both will
            result in a failed test.
            To ensure compile-time safety and easier refactoring, use the <c>nameof</c> operator
            e.g., <c>SkipWhen = nameof(IsConditionMet)</c>.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.TestDisplayName">
            <summary>
            Gets the test display name for the test (replacing the default behavior, which
            would be to use <see cref="P:Xunit.v3.IFactAttribute.DisplayName"/>, or falling back to
            generating display names based on <see cref="T:Xunit.Sdk.TestMethodDisplay"/> and
            <see cref="T:Xunit.Sdk.TestMethodDisplayOptions"/>).
            </summary>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.Timeout">
            <summary>
            Gets a value to determine if the data rows provided by this data provider should
            include a timeout (in milliseconds). If greater than zero, the data rows will have
            the given timeout; if zero or less, the data rows will not have a timeout; if <c>null</c>,
            the data rows will inherit their timeout from <see cref="P:Xunit.v3.IFactAttribute.Timeout"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.IDataAttribute.Traits">
            <summary>
            Gets a set of traits for the associated data. The data is provided as an array
            of string values that are alternating keys and values (e.g.,
            <c>["key1", "value1", "key2", "value2"]</c>).
            </summary>
            <remarks>
            This is structured as an array because attribute initializers don't support dictionaries. Note:
            Setting an odd number of values will throw away the unmatched key at the end of the list. If you
            seem to be missing your a key/value pair or have misaligned keys and values, make sure you have
            an even number of strings alternating between keys and values.
            </remarks>
        </member>
        <member name="M:Xunit.v3.IDataAttribute.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <param name="testMethod">The test method the data attribute is attached to</param>
            <param name="disposalTracker">The disposal tracker used to dispose the data</param>
        </member>
        <member name="M:Xunit.v3.IDataAttribute.SupportsDiscoveryEnumeration">
            <summary>
            Returns <c>true</c> if the data attribute supports enumeration during
            discovery; <c>false</c> otherwise. Data attributes with expensive computational
            costs and/or randomized data sets should return <c>false</c>.
            </summary>
        </member>
        <member name="T:Xunit.v3.IFactAttribute">
            <summary>
            Attribute that is applied to a method to indicate that it is a test method that should
            be run by the default test runner. Implementations must be decorated by
            <see cref="T:Xunit.v3.XunitTestCaseDiscovererAttribute"/> to indicate which class is responsible
            for converting the test method into one or more tests.
            </summary>
            <remarks>The attribute can only be applied to methods, and only one attribute is allowed.</remarks>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.DisplayName">
            <summary>
            Gets the name of the test to be used when the test is skipped. When <c>null</c>
            is returned, will cause a default display name to be used.
            </summary>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.Explicit">
            <summary>
            Gets a flag which indicates whether the test should only be run explicitly.
            An explicit test is skipped by default unless explicit tests are requested
            to be run.
            </summary>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.Skip">
            <summary>
            Gets the skip reason for the test. When <c>null</c> is returned, the test is
            not skipped.
            </summary>
            <remarks>
            Skipping is conditional based on whether <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/> or <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/>
            is set.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.SkipExceptions">
            <summary>
            Gets exceptions that, when thrown, will cause the test to be skipped rather than failed.
            </summary>
            <remarks>
            The skip reason will be the exception's message.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.SkipType">
            <summary>
            Gets the type to retrieve <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/> or <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/> from. If not set,
            then the property will be retrieved from the unit test class.
            </summary>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.SkipUnless">
            <summary>
            Gets the name of a public static property on the test class which returns <c>bool</c>
            to indicate whether the test should be skipped (<c>false</c>) or not (<c>true</c>).
            </summary>
            <remarks>
            This property cannot be set if <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/> is set. Setting both will
            result in a failed test.<br />
            <br />
            To ensure compile-time safety and easier refactoring, use the <c>nameof</c> operator,
            e.g., <c>SkipUnless = nameof(IsConditionMet)</c>.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.SkipWhen">
            <summary>
            Gets the name of a public static property on the test class which returns <c>bool</c>
            to indicate whether the test should be skipped (<c>true</c>) or not (<c>false</c>).
            </summary>
            <remarks>
            This property cannot be set if <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/> is set. Setting both will
            result in a failed test.<br />
            <br />
            To ensure compile-time safety and easier refactoring, use the <c>nameof</c> operator,
            e.g., <c>SkipWhen = nameof(IsConditionMet)</c>.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.SourceFilePath">
            <summary>
            Gets the source file name. A <c>null</c> value indicates that the
            source file name is not known.
            </summary>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.SourceLineNumber">
            <summary>
            Gets the source file line number. A <c>null</c> value indicates that the
            source file line number is not known.
            </summary>
        </member>
        <member name="P:Xunit.v3.IFactAttribute.Timeout">
            <summary>
            Gets the timeout for test (in milliseconds). When <c>0</c> is returned, the test
            will not have a timeout.
            </summary>
            <remarks>
            WARNING: Using this with <see cref="F:Xunit.Sdk.ParallelAlgorithm.Aggressive"/> will result
            in undefined behavior. Test timing and timeouts are only reliable when using
            <see cref="F:Xunit.Sdk.ParallelAlgorithm.Conservative"/> (or when parallelization is disabled
            completely).
            </remarks>
        </member>
        <member name="T:Xunit.v3.ITestCaseOrdererAttribute">
            <summary>
            Used to decorate an assembly, test collection, or test class to allow the use of a custom test case orderer.
            Only one may exist on a given element.
            </summary>
        </member>
        <member name="P:Xunit.v3.ITestCaseOrdererAttribute.OrdererType">
            <summary>
            Gets the orderer type. Must implement <see cref="T:Xunit.v3.ITestCaseOrderer"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.ITestCollectionOrdererAttribute">
            <summary>
            Used to decorate an assembly, test collection, or test class to allow the use of a custom test collection orderer.
            Only one may exist on a given element.
            </summary>
        </member>
        <member name="P:Xunit.v3.ITestCollectionOrdererAttribute.OrdererType">
            <summary>
            Gets the orderer type. Must implement <see cref="T:Xunit.v3.ITestCollectionOrderer"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.ITestFrameworkAttribute">
            <summary>
            Used to decorate an assembly to allow the use of a custom test framework. May only be placed
            at the assembly level, and only a single test framework is allowed.
            </summary>
        </member>
        <member name="P:Xunit.v3.ITestFrameworkAttribute.FrameworkType">
            <summary>
            Gets the framework type; must implement <see cref="T:Xunit.v3.ITestFramework"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.ITestPipelineStartupAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code
            that runs during the test pipeline startup and shutdown (including both discovery and execution).
            </summary>
            <remarks>Test pipeline startup attributes are only valid at the assembly level, and only a
            single instance is allowed.</remarks>
        </member>
        <member name="P:Xunit.v3.ITestPipelineStartupAttribute.TestPipelineStartupType">
            <summary>
            Gets the test pipeline startup type. Must implement <see cref="T:Xunit.v3.ITestPipelineStartup"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.ITheoryAttribute">
            <summary>
            Marks a test method as being a data theory. Data theories are tests which are fed
            various bits of data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed
            multiple times (once with each data row). Data is provided by attributes which
            implement <see cref="T:Xunit.v3.IDataAttribute"/> (most commonly, <see cref="T:Xunit.InlineDataAttribute"/>
            and <see cref="T:Xunit.MemberDataAttribute"/>). Implementations must be decorated by
            <see cref="T:Xunit.v3.XunitTestCaseDiscovererAttribute"/> to indicate which class is responsible
            for converting the test method into one or more tests.
            </summary>
            <remarks>The attribute can only be applied to methods, and only one attribute is allowed.</remarks>
        </member>
        <member name="P:Xunit.v3.ITheoryAttribute.DisableDiscoveryEnumeration">
            <summary>
            Gets a flag which indicates whether the test method wants to skip enumerating data during
            discovery. This will cause the theory to yield a single test case for all data, and the
            data discovery will be performed during test execution instead of discovery.
            </summary>
        </member>
        <member name="P:Xunit.v3.ITheoryAttribute.SkipTestWithoutData">
            <summary>
            Gets a flag which indicates whether the test should be skipped (rather than failed) for
            a lack of data.
            </summary>
        </member>
        <member name="T:Xunit.v3.ITraitAttribute">
            <summary>
            Base interface that all traits attributes (that is, anything with provides traits to a test).
            Trait attributes are valid on assemblies, classes, and methods.
            </summary>
        </member>
        <member name="M:Xunit.v3.ITraitAttribute.GetTraits">
            <summary>
            Gets the trait values from the trait attribute.
            </summary>
            <returns>The trait values.</returns>
        </member>
        <member name="T:Xunit.v3.ITypeAwareDataAttribute">
            <summary>
            This interface supplements <see cref="T:Xunit.v3.IDataAttribute"/> for attributes that wish to be
            notified of the <see cref="P:System.Reflection.MemberInfo.ReflectedType"/> of the method that was used during
            reflection that they were attached to.
            </summary>
            <remarks>
            By default, this is called by <see cref="M:Xunit.v3.ExtensibilityPointFactory.GetMethodDataAttributes(System.Reflection.MethodInfo)"/>.
            If a third party test framework uses some other mechanism to discover data attributes that are
            attached to methods, it should conditionally populate the <see cref="P:Xunit.v3.ITypeAwareDataAttribute.MemberType"/> during its
            own discovery phase.
            </remarks>
        </member>
        <member name="P:Xunit.v3.ITypeAwareDataAttribute.MemberType">
            <summary>
            Gets or sets the reflected type of the method that this data attribute was attached to.
            </summary>
            <remarks>
            <see cref="T:Xunit.v3.ExtensibilityPointFactory"/> will not be overwrite this value if it's already non-<c>null</c>.
            </remarks>
        </member>
        <member name="T:Xunit.v3.IMessageBus">
            <summary>
            Used by discovery, execution, and extensibility code to send messages to the runner.
            </summary>
        </member>
        <member name="M:Xunit.v3.IMessageBus.QueueMessage(Xunit.Sdk.IMessageSinkMessage)">
            <summary>
            Queues a message to be sent to the runner.
            </summary>
            <param name="message">The message to be sent to the runner</param>
            <returns>
            Returns <c>true</c> if discovery/execution should continue; <c>false</c>, otherwise.
            The return value may be safely ignored by components which are not directly responsible
            for discovery or execution, and this is intended to communicate to those sub-systems that
            that they should short circuit and stop their work as quickly as is reasonable.
            </returns>
        </member>
        <member name="T:Xunit.v3.ITestCaseOrderer">
            <summary>
            A class implements this interface to participate in ordering tests for the test runner.
            Test case orderers are applied using an implementation of <see cref="T:Xunit.v3.ITestCaseOrdererAttribute"/>
            (most commonly <see cref="T:Xunit.TestCaseOrdererAttribute"/>), which can be applied at the assembly,
            test collection, and test class level.
            </summary>
        </member>
        <member name="M:Xunit.v3.ITestCaseOrderer.OrderTestCases``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Orders test cases for execution.
            </summary>
            <param name="testCases">The test cases to be ordered.</param>
            <returns>The test cases in the order to be run.</returns>
        </member>
        <member name="T:Xunit.v3.ITestCollectionOrderer">
            <summary>
            A class implements this interface to participate in ordering tests for the test runner.
            Test collection orderers are applied using the and implementation of
            <see cref="T:Xunit.v3.ITestCollectionOrdererAttribute"/> (most commonly <see cref="T:Xunit.TestCollectionOrdererAttribute"/>),
            which can be applied at the assembly level.
            </summary>
        </member>
        <member name="M:Xunit.v3.ITestCollectionOrderer.OrderTestCollections``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Orders test collections for execution.
            </summary>
            <typeparam name="TTestCollection">The type of the test collection to be ordered. Must derive
            from <see cref="T:Xunit.Sdk.ITestCollection"/>.</typeparam>
            <param name="testCollections">The test collections to be ordered.</param>
            <returns>The test collections in the order to be run.</returns>
        </member>
        <member name="T:Xunit.v3.ITestFramework">
            <summary>
            Represents a test framework. There are two pieces to test frameworks: discovery and
            execution. The two factory methods represent these two pieces. Test frameworks may optionally
            implement either <see cref="T:System.IDisposable"/> or <see cref="T:System.IAsyncDisposable"/>. They may
            implement a constructor which is either empty, or takes a single <see cref="T:Xunit.Sdk.IMessageSink"/>
            for diagnostic messages, or takes two instances of <see cref="T:Xunit.Sdk.IMessageSink"/> for diagnostic
            messages and internal diagnostic messages, respectively.
            </summary>
        </member>
        <member name="P:Xunit.v3.ITestFramework.TestFrameworkDisplayName">
            <summary>
            Returns the display name of the test framework that this discoverer is running tests for.
            </summary>
        </member>
        <member name="M:Xunit.v3.ITestFramework.SetTestPipelineStartup(Xunit.v3.ITestPipelineStartup)">
            <summary>
            Will be invoked by the test pipeline when the user has provided a startup class. Test frameworks may
            choose to use this in any way they see fit.
            </summary>
        </member>
        <member name="M:Xunit.v3.ITestFramework.GetDiscoverer(System.Reflection.Assembly)">
            <summary>
            Get a test discoverer.
            </summary>
            <param name="assembly">The assembly to discover tests from.</param>
            <returns>The test discoverer.</returns>
        </member>
        <member name="M:Xunit.v3.ITestFramework.GetExecutor(System.Reflection.Assembly)">
            <summary>
            Get a test executor.
            </summary>
            <param name="assembly">The assembly to run tests from.</param>
            <returns>The test executor.</returns>
        </member>
        <member name="T:Xunit.v3.ITestFrameworkDiscoverer">
            <summary>
            Represents an implementation of the discovery part of a test framework. Implementations may
            optionally implement <see cref="T:System.IDisposable"/> and/or <see cref="T:System.IAsyncDisposable"/>
            for cleanup operations.
            </summary>
        </member>
        <member name="P:Xunit.v3.ITestFrameworkDiscoverer.TestAssembly">
            <summary>
            Gets the test assembly provided to the discoverer.
            </summary>
        </member>
        <member name="M:Xunit.v3.ITestFrameworkDiscoverer.Find(System.Func{Xunit.Sdk.ITestCase,System.Threading.Tasks.ValueTask{System.Boolean}},Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Type[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Finds tests inside an assembly. Calls the callback for each discovered test.
            </summary>
            <param name="callback">Called for each discovered test. Return <c>true</c> to continue test
            discovery; return <c>false</c> to cancel test discovery.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
            <param name="types">When passed a non-<c>null</c> collection, only returns tests found
            from one of the provided types; when passed a <c>null</c> collection, discovers all
            tests in the assembly.</param>
            <param name="cancellationToken">The optional cancellation token which can be used to cancel the test
            discovery process.</param>
        </member>
        <member name="T:Xunit.v3.ITestFrameworkExecutor">
            <summary>
            Represents an implementation of the execution part of a test framework. Implementations may
            optionally implement <see cref="T:System.IDisposable"/> and/or <see cref="T:System.IAsyncDisposable"/>
            for cleanup operations.
            </summary>
        </member>
        <member name="M:Xunit.v3.ITestFrameworkExecutor.RunTestCases(System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.ITestCase},Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Runs selected test cases in the assembly.
            </summary>
            <param name="testCases">The test cases to run.</param>
            <param name="executionMessageSink">The message sink to report results back to.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
            <param name="cancellationToken">The optional cancellation token which can be used to cancel the test
            execution process.</param>
        </member>
        <member name="T:Xunit.v3.ITestPipelineStartup">
            <summary>
            Interface implemented by developers who want to run code during test pipeline startup and shutdown.
            A single instance of this may be decorated with an instance of <see cref="T:Xunit.v3.ITestPipelineStartupAttribute"/>
            (typically <see cref="T:Xunit.v3.TestPipelineStartupAttribute"/>) at the assembly level.
            </summary>
            <remarks>
            Unlike assembly-level fixtures, this code runs for both discovery and execution (whereas fixtures only
            run during execution), and it occurs at a much earlier point in the pipeline. The intention with this
            hook is primarily about ensuring that some essential infrastructure is in place before test discovery
            takes place. Activities which are only used during execution should be done with assembly-level fixtures.
            </remarks>
        </member>
        <member name="M:Xunit.v3.ITestPipelineStartup.StartAsync(Xunit.Sdk.IMessageSink)">
            <summary>
            Indicates that the test assembly is starting up.
            </summary>
            <param name="diagnosticMessageSink">A message sink to which it can report <see cref="T:Xunit.Sdk.IDiagnosticMessage"/>
            instances.</param>
        </member>
        <member name="M:Xunit.v3.ITestPipelineStartup.StopAsync">
            <summary>
            Inidicates that the test assembly is shutting down.
            </summary>
        </member>
        <member name="T:Xunit.v3.ITestTimeoutException">
            <summary>
            This is a marker interface implemented to indicate that the exception is the result
            of a test timeout, resulting in a failure cause of <see cref="F:Xunit.Sdk.FailureCause.Timeout"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.IXunitTestCaseDiscoverer">
            <summary>
            Interface to be implemented by classes which are used to discover tests cases attached
            to test methods that are attributed with an implementation of <see cref="T:Xunit.v3.IFactAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.IXunitTestCaseDiscoverer.Discover(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute)">
            <summary>
            Discover test cases from a test method.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="factAttribute">The fact attribute attached to the test method.</param>
            <returns>Returns zero or more test cases represented by the test method.</returns>
        </member>
        <member name="T:Xunit.v3.IXunitTestCollectionFactory">
            <summary>
            This interface is intended to be implemented by components which generate test collections.
            End users specify the desired test collection factory by applying <see cref="T:Xunit.CollectionBehaviorAttribute"/>
            (or any attribute that implements <see cref="T:Xunit.v3.ICollectionBehaviorAttribute"/>) at the assembly level.
            Classes which implement this interface must have a constructor that takes <see cref="T:Xunit.v3.IXunitTestAssembly"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollectionFactory.DisplayName">
            <summary>
            Gets the display name for the test collection factory. This information is shown to the end
            user as part of the description of the test environment.
            </summary>
        </member>
        <member name="M:Xunit.v3.IXunitTestCollectionFactory.Get(System.Type)">
            <summary>
            Gets the test collection for a given test class.
            </summary>
            <param name="testClass">The test class.</param>
            <returns>The test collection.</returns>
        </member>
        <member name="T:Xunit.v3.ISelfExecutingXunitTestCase">
            <summary>
            Represents an implementation of <see cref="T:Xunit.v3.IXunitTestCase"/> that is self-executing. This allows
            the test case to opt into the middle of the test execution pipeline without implementing
            everything that comes before it.
            </summary>
        </member>
        <member name="M:Xunit.v3.ISelfExecutingXunitTestCase.Run(Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,System.Object[],Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Executes the test case, returning 0 or more result messages through the message sink.
            </summary>
            <param name="explicitOption">A flag to indicate how explicit tests should be treated.</param>
            <param name="messageBus">The message bus to report results to.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
            <returns>Returns the summary of the test case run.</returns>
        </member>
        <member name="T:Xunit.v3.IXunitDelayEnumeratedTestCase">
            <summary>
            Indicates a test case which delays enumeration of tests until execution time.
            </summary>
            <remarks>
            This is normally used when theory data enumeration is performed at execution time, either because theory
            data pre-enumeration was disabled, or data found during discovery was not serializable.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitDelayEnumeratedTestCase.SkipTestWithoutData">
            <summary>
            Get a flag to indicate whether test cases with no data should be skipped (instead
            of failed, which is the default behavior).
            </summary>
        </member>
        <member name="T:Xunit.v3.IXunitTest">
            <summary>
            Represents a test from xUnit.net v3 based on reflection.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTest.Explicit">
            <summary>
            Gets a flag indicating whether this test was marked as explicit or not.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTest.SkipReason">
            <summary>
            Gets a skip reason for this test.
            </summary>
            <remarks>
            This value may not line up the with <see cref="P:Xunit.v3.IXunitTestCase.SkipReason"/>, as you can skip
            individual data rows during delay enumeration.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTest.SkipType">
            <summary>
            When set, indicates the type to use when resolving <see cref="P:Xunit.v3.IXunitTest.SkipUnless"/> or
            <see cref="P:Xunit.v3.IXunitTest.SkipWhen"/>. If not set, uses the test class type.
            </summary>
            <remarks>
            This value may not line up the with <see cref="P:Xunit.v3.IXunitTestCase.SkipType"/>, as you can skip
            individual data rows during delay enumeration.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTest.SkipUnless">
            <summary>
            When set, indicates a public static property that is used at runtime to determine
            whether the test is skipped or not (<c>true</c> to run, <c>false</c> to skip).
            </summary>
            <remarks>
            Note: It is an error condition for both <see cref="P:Xunit.v3.IXunitTest.SkipUnless"/> and <see cref="P:Xunit.v3.IXunitTest.SkipWhen"/>
            to return a non-<c>null</c> value.<br />
            <br />
            This value may not line up the with <see cref="P:Xunit.v3.IXunitTestCase.SkipUnless"/>, as you can skip
            individual data rows during delay enumeration.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTest.SkipWhen">
            <summary>
            When set, indicates a public static property that is used at runtime to determine
            whether the test is skipped or not (<c>false</c> to run, <c>true</c> to skip).
            </summary>
            <remarks>
            Note: It is an error condition for both <see cref="P:Xunit.v3.IXunitTest.SkipUnless"/> and <see cref="P:Xunit.v3.IXunitTest.SkipWhen"/>
            to return a non-<c>null</c> value.
            <br />
            This value may not line up the with <see cref="P:Xunit.v3.IXunitTestCase.SkipWhen"/>, as you can skip
            individual data rows during delay enumeration.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTest.TestCase">
            <summary>
            Gets the test case this test belongs to.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTest.TestMethod">
            <summary>
            Gets the test method to run. May different from the test method embedded in the test case.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTest.TestMethodArguments">
            <summary>
            Gets the arguments to be passed to the test method during invocation.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTest.Timeout">
            <summary>
            Gets the timeout for the test, in milliseconds; if <c>0</c>, there is no timeout.
            </summary>
            <remarks>
            WARNING: Using this with <see cref="F:Xunit.Sdk.ParallelAlgorithm.Aggressive"/> will result
            in undefined behavior. Timeout is only supported by <see cref="F:Xunit.Sdk.ParallelAlgorithm.Conservative"/>
            (or when parallelization is disabled completely).
            </remarks>
        </member>
        <member name="T:Xunit.v3.IXunitTestAssembly">
            <summary>
            Represents a test assembly from xUnit.net v3 based on reflection.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.Assembly">
            <summary>
            Gets the assembly of this test assembly.
            </summary>
            <remarks>
            This should only be used to execute a test assembly. All reflection should be abstracted here
            instead for better testability.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.AssemblyFixtureTypes">
            <summary>
            Gets a list of fixture types associated with the test assembly.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.BeforeAfterTestAttributes">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the test assembly.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.CollectionBehavior">
            <summary>
            Gets the collection behavior associated with the assembly, if present.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.CollectionDefinitions">
            <summary>
            Gets the collection definitions attached to the test assembly, by collection name.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.TargetFramework">
            <summary>
            Gets the target framework the test assembly was compiled against. Will be in a
            form like ".NETFramework,Version=v4.7.2" or ".NETCoreApp,Version=v6.0".
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.TestCaseOrderer">
            <summary>
            Gets the test case orderer for the test assembly, if present.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.TestCollectionOrderer">
            <summary>
            Gets the test collection orderer for the test assembly, if present.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestAssembly.Version">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="T:Xunit.v3.IXunitTestCase">
            <summary>
            Represents a single test case from xUnit.net v3 based on reflection.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.SkipExceptions">
            <summary>
            Gets the exception types that, when thrown, will cause a
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.SkipReason">
            <summary>
            Gets the display text for the reason a test that might being skipped.
            </summary>
            <remarks>
            This differs from the contract of <see cref="P:Xunit.Sdk.ITestCaseMetadata.SkipReason"/> by virtue
            of the fact that when this value is non-<c>null</c>, it may indicate that a test is
            statically skipped (if both <see cref="P:Xunit.v3.IXunitTestCase.SkipUnless"/> and <see cref="P:Xunit.v3.IXunitTestCase.SkipWhen"/> are
            <c>null</c>) or dynamically skipped (if one is non-<c>null</c>).
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.SkipType">
            <summary>
            When set, indicates the type to use when resolving <see cref="P:Xunit.v3.IXunitTestCase.SkipUnless"/> or
            <see cref="P:Xunit.v3.IXunitTestCase.SkipWhen"/>. If not set, uses the test class type.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.SkipUnless">
            <summary>
            When set, indicates a public static property that is used at runtime to determine
            whether the test is skipped or not (<c>true</c> to run, <c>false</c> to skip).
            </summary>
            <remarks>
            Note: It is an error condition for both <see cref="P:Xunit.v3.IXunitTestCase.SkipUnless"/> and <see cref="P:Xunit.v3.IXunitTestCase.SkipWhen"/>
            to return a non-<c>null</c> value.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.SkipWhen">
            <summary>
            When set, indicates a public static property that is used at runtime to determine
            whether the test is skipped or not (<c>false</c> to run, <c>true</c> to skip).
            </summary>
            <remarks>
            Note: It is an error condition for both <see cref="P:Xunit.v3.IXunitTestCase.SkipUnless"/> and <see cref="P:Xunit.v3.IXunitTestCase.SkipWhen"/>
            to return a non-<c>null</c> value.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestClass">
            <summary>
            Gets the test class that this test case belongs to.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestClassMetadataToken">
            <summary>
            Gets the <see cref="P:System.Reflection.MemberInfo.MetadataToken"/> for the test class.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestClassName">
            <summary>
            Gets the full name of the class where the test is defined (i.e. <see cref="P:System.Type.FullName"/>).
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestClassSimpleName">
            <summary>
            Gets the simple name of the class where the test is defined (i.e. <see cref="P:System.Reflection.MemberInfo.Name"/>).
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestCollection">
            <summary>
            Gets the test collection this test case belongs to.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestMethod">
            <summary>
            Gets the test method this test case belongs to.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestMethodMetadataToken">
            <summary>
            Gets the <see cref="P:System.Reflection.MemberInfo.MetadataToken"/> for the test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestMethodName">
            <summary>
            Gets the method name where the test is defined.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestMethodParameterTypesVSTest">
            <summary>
            Gets the types for the test method parameters.
            </summary>
            <remarks>
            The values here are formatted according to
            <see href="https://github.com/microsoft/vstest/blob/main/docs/RFCs/0017-Managed-TestCase-Properties.md">VSTest rules</see>
            in order to support Test Explorer. Note that this is not the same as <see cref="P:System.Type.FullName"/>.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.TestMethodReturnTypeVSTest">
            <summary>
            Gets the test method return type.
            </summary>
            <remarks>
            The value here is formatted according to
            <see href="https://github.com/microsoft/vstest/blob/main/docs/RFCs/0017-Managed-TestCase-Properties.md">VSTest rules</see>
            in order to support Test Explorer. Note that this is not the same as <see cref="P:System.Type.FullName"/>.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestCase.Timeout">
            <summary>
            Gets the timeout of the test, in milliseconds; if zero or negative, means the test case has no timeout.
            </summary>
        </member>
        <member name="M:Xunit.v3.IXunitTestCase.CreateTests">
            <summary>
            Creates the tests that are emitted from this test case. Exceptions thrown here
            will be caught and converted into a test case failure.
            </summary>
        </member>
        <member name="M:Xunit.v3.IXunitTestCase.PostInvoke">
            <summary>
            Allows the test case to run some code just after the test case is finished running.
            </summary>
        </member>
        <member name="M:Xunit.v3.IXunitTestCase.PreInvoke">
            <summary>
            Allows the test case to run some code just before the test case is run.
            </summary>
        </member>
        <member name="T:Xunit.v3.IXunitTestClass">
            <summary>
            Represents a test class from xUnit.net v3 based on reflection.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestClass.BeforeAfterTestAttributes">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the test class (and
            the test collection and test assembly).
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestClass.Class">
            <summary>
            Gets the type that this test class refers to.
            </summary>
            <remarks>
            This should only be used to execute a test class. All reflection should be abstracted here
            instead for better testability.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestClass.ClassFixtureTypes">
            <summary>
            Gets a list of class fixture types associated with the test class (and the test collection).
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestClass.Constructors">
            <summary>
            Gets the public constructors on the test class. If the test class is static, will return <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestClass.Methods">
            <summary>
            Gets the public methods on the test class.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestClass.TestCaseOrderer">
            <summary>
            Gets the test case orderer for the test class, if present.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestClass.TestCollection">
            <summary>
            Gets the test collection this test class belongs to.
            </summary>
        </member>
        <member name="T:Xunit.v3.IXunitTestCollection">
            <summary>
            Represents a test collection from xUnit.net v3 based on reflection.
            </summary>
            <remarks>
            Test collections form the basis of the parallelization in xUnit.net v3. Test cases
            which are in the same test collection will not be run in parallel against sibling
            tests, but will run in parallel against tests in other collections. They also provide
            a level of shared context via <see cref="T:Xunit.ICollectionFixture`1"/>.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollection.BeforeAfterTestAttributes">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the test collection (and
            the test assembly).
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollection.ClassFixtureTypes">
            <summary>
            Gets a list of collection fixture types associated with the test collection.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollection.CollectionDefinition">
            <summary>
            Gets the type that this collection definition derived from, if it derives from
            one. Untyped collections are possible when test classes are decorated
            using <see cref="M:Xunit.CollectionAttribute.#ctor(System.String)"/> and there is no test collection
            class declared with the same name.
            </summary>
            <remarks>
            This should only be used to execute a test collection. All reflection should be abstracted here
            instead for better testability.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollection.CollectionFixtureTypes">
            <summary>
            Gets a list of collection fixture types associated with the test collection.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollection.DisableParallelization">
            <summary>
            Determines whether tests in this collection runs in parallel with any other collections.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollection.TestAssembly">
            <summary>
            Gets the test assembly this test collection belongs to.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestCollection.TestCaseOrderer">
            <summary>
            Gets the test case orderer for the test collection, if present.
            </summary>
        </member>
        <member name="T:Xunit.v3.IXunitTestMethod">
            <summary>
            Represents a test class from xUnit.net v3 based on reflection.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.BeforeAfterTestAttributes">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the test method (and the test class,
            test collection, and test assembly).
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.DataAttributes">
            <summary>
            Gets the <see cref="T:Xunit.v3.IDataAttribute"/>s attached to the test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.FactAttributes">
            <summary>
            Gets the <see cref="T:Xunit.v3.IFactAttribute"/>s attached to the test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.IsGenericMethodDefinition">
            <summary>
            Gets a flag which indicates whether this is a generic method definition.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.Method">
            <summary>
            Gets the method that this test method refers to.
            </summary>
            <remarks>
            This should only be used to execute a test method. All reflection should be abstracted here
            instead for better testability.
            </remarks>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.Parameters">
            <summary>
            Gets the parameters of the test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.ReturnType">
            <summary>
            Gets the return type of the test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.TestMethodArguments">
            <summary>
            Gets the arguments that will be passed to the test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.IXunitTestMethod.TestClass">
            <summary>
            Gets the test class that this test method belongs to.
            </summary>
        </member>
        <member name="M:Xunit.v3.IXunitTestMethod.GetDisplayName(System.String,System.String,System.Object[],System.Type[])">
            <summary>
            Gets the display name for the test method, factoring in arguments and generic types.
            </summary>
            <param name="baseDisplayName">The base display name.</param>
            <param name="label">The label for the test display name.</param>
            <param name="testMethodArguments">The test method arguments.</param>
            <param name="methodGenericTypes">The generic types of the method.</param>
        </member>
        <member name="M:Xunit.v3.IXunitTestMethod.MakeGenericMethod(System.Type[])">
            <summary>
            Creates a generic version of the test method with the given generic types.
            </summary>
            <param name="genericTypes">The generic types</param>
        </member>
        <member name="M:Xunit.v3.IXunitTestMethod.ResolveGenericTypes(System.Object[])">
            <summary>
            Resolves the generic types for the test method given the method's arguments. If the method
            is not generic, will return <c>null</c>.
            </summary>
            <param name="arguments">The method arguments</param>
        </member>
        <member name="M:Xunit.v3.IXunitTestMethod.ResolveMethodArguments(System.Object[])">
            <summary>
            Resolves argument values for the test method, ensuring they are the correct type, including
            support for optional method arguments.
            </summary>
            <param name="arguments">The test method arguments</param>
        </member>
        <member name="T:Xunit.v3.BeforeAfterTestAttribute">
            <summary>
            Default implementation of <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.BeforeAfterTestAttribute.After(System.Reflection.MethodInfo,Xunit.v3.IXunitTest)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.BeforeAfterTestAttribute.Before(System.Reflection.MethodInfo,Xunit.v3.IXunitTest)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DataAttribute">
            <summary>
            Abstract attribute which represents a based implementation of <see cref="T:Xunit.v3.IDataAttribute"/>.
            Data source providers derive from this attribute and implement <see cref="M:Xunit.v3.DataAttribute.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)"/>
            to return the data for the theory.
            </summary>
        </member>
        <member name="P:Xunit.v3.DataAttribute.Explicit">
            <summary>
            Sets a value that determines whether the data rows provided by this data
            provider should be considered explicit or not. If <c>true</c>, then the data
            rows will all be considered explicit; if <c>false</c>, then the data rows
            will all be considered not explicit; if unset, then the data rows will
            inherit their explicitness from <see cref="P:Xunit.v3.IFactAttribute.Explicit"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.DataAttribute.ExplicitAsNullable">
            <summary>
            Gettable as a nullable value since .NET Framework does not permit attributes to
            have nullable value types for settable properties.
            </summary>
        </member>
        <member name="P:Xunit.v3.DataAttribute.Label">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DataAttribute.Skip">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DataAttribute.SkipType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DataAttribute.SkipUnless">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DataAttribute.SkipWhen">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DataAttribute.TestDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DataAttribute.Timeout">
            <summary>
            Sets a value to determine if the data rows provided by this data provider should
            include a timeout (in milliseconds). If greater than zero, the data rows will have
            the given timeout; if zero or less, the data rows will not have a timeout; if unset,
            the data rows will inherit their timeout from <see cref="P:Xunit.v3.IFactAttribute.Timeout"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.DataAttribute.TimeoutAsNullable">
            <summary>
            Gettable as a nullable value since .NET Framework does not permit attributes to
            have nullable value types for settable properties.
            </summary>
        </member>
        <member name="P:Xunit.v3.DataAttribute.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DataAttribute.ConvertDataRow(System.Object)">
            <summary>
            Converts an item yielded by the data attribute to an <see cref="T:Xunit.ITheoryDataRow"/>, for return
            from <see cref="M:Xunit.v3.DataAttribute.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)"/>. Items yielded will typically be <c>object[]</c>, <see cref="T:Xunit.ITheoryDataRow"/>,
            or <see cref="T:System.Runtime.CompilerServices.ITuple"/>, but this override will allow derived
            attribute types to support additional data items. If the data item cannot be converted, this method
            will throw <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="dataRow">An item yielded from the data member.</param>
            <returns>An <see cref="T:Xunit.ITheoryDataRow"/> suitable for return from <see cref="M:Xunit.v3.DataAttribute.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="dataRow"/> does not point to a valid data
            row (must be compatible with <c>object[]</c> or <see cref="T:Xunit.ITheoryDataRow"/>).</exception>
        </member>
        <member name="M:Xunit.v3.DataAttribute.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DataAttribute.SupportsDiscoveryEnumeration">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.MemberDataAttributeBase">
            <summary>
            Provides a base class for attributes that will provide member data.
            </summary>
            <param name="memberName">
            The name of the public static member on the test class that will provide the test data
            It is recommended to use the <c>nameof</c> operator to ensure compile-time safety, e.g., <c>nameof(SomeMemberName)</c>.
            </param>
            <param name="arguments">The arguments to be passed to the member (only supported for methods; ignored for everything else)</param>
        </member>
        <member name="M:Xunit.v3.MemberDataAttributeBase.#ctor(System.String,System.Object[])">
            <summary>
            Provides a base class for attributes that will provide member data.
            </summary>
            <param name="memberName">
            The name of the public static member on the test class that will provide the test data
            It is recommended to use the <c>nameof</c> operator to ensure compile-time safety, e.g., <c>nameof(SomeMemberName)</c>.
            </param>
            <param name="arguments">The arguments to be passed to the member (only supported for methods; ignored for everything else)</param>
        </member>
        <member name="P:Xunit.v3.MemberDataAttributeBase.Arguments">
            <summary>
            Gets or sets the arguments passed to the member. Only supported for static methods.
            </summary>
        </member>
        <member name="P:Xunit.v3.MemberDataAttributeBase.DisableDiscoveryEnumeration">
            <summary>
            Returns <c>true</c> if the data attribute wants to skip enumerating data during discovery.
            This will cause the theory to yield a single test case for all data, and the data discovery
            will be during test execution instead of discovery.
            </summary>
        </member>
        <member name="P:Xunit.v3.MemberDataAttributeBase.MemberName">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:Xunit.v3.MemberDataAttributeBase.MemberType">
            <summary>
            Gets or sets the type to retrieve the member from. If not set, then the member will be
            retrieved from the unit test class.
            </summary>
        </member>
        <member name="M:Xunit.v3.MemberDataAttributeBase.ConvertDataRow(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.MemberDataAttributeBase.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.MemberDataAttributeBase.SupportsDiscoveryEnumeration">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestPipelineStartupAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code
            that runs during the test pipeline startup and shutdown (including both discovery and execution).
            </summary>
        </member>
        <member name="M:Xunit.v3.TestPipelineStartupAttribute.#ctor(System.Type)">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate that the developer wishes to have code
            that runs during the test pipeline startup and shutdown (including both discovery and execution).
            </summary>
        </member>
        <member name="P:Xunit.v3.TestPipelineStartupAttribute.TestPipelineStartupType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCaseDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which implement <see cref="T:Xunit.v3.IFactAttribute"/>,
            to indicate how test cases should be discovered.
            </summary>
            <param name="type">The type of the discoverer; must implement <see cref="T:Xunit.v3.IXunitTestCaseDiscoverer"/>.</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCaseDiscovererAttribute.#ctor(System.Type)">
            <summary>
            An attribute used to decorate classes which implement <see cref="T:Xunit.v3.IFactAttribute"/>,
            to indicate how test cases should be discovered.
            </summary>
            <param name="type">The type of the discoverer; must implement <see cref="T:Xunit.v3.IXunitTestCaseDiscoverer"/>.</param>
        </member>
        <member name="P:Xunit.v3.XunitTestCaseDiscovererAttribute.Type">
            <summary>
            Gets the type of the test case discoverer.
            </summary>
        </member>
        <member name="T:Xunit.v3.DynamicSkipToken">
            <summary>
            Container class for token used to dynamically skip tests.
            </summary>
        </member>
        <member name="F:Xunit.v3.DynamicSkipToken.Value">
            <summary>
            The contract for exceptions which indicate that something should be skipped rather than
            failed is that exception message should start with this, and that any text following this
            will be treated as the skip reason (for example,
            "$XunitDynamicSkip$This code can only run on Linux") will result in a skipped test with
            the reason of "This code can only run on Linux".
            </summary>
        </member>
        <member name="T:Xunit.v3.ExceptionAggregator">
            <summary>
            Aggregates exceptions. Intended to run one or more code blocks, and collect the
            exceptions thrown by those code blocks.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.ExceptionAggregator"/> value type.
            </summary>
        </member>
        <member name="P:Xunit.v3.ExceptionAggregator.HasExceptions">
            <summary>
            Returns <c>true</c> if the aggregator has at least one exception inside it.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.Add(System.Exception)">
            <summary>
            Adds an exception to the aggregator.
            </summary>
            <param name="ex">The exception to be added.</param>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.Aggregate(Xunit.v3.ExceptionAggregator)">
            <summary>
            Adds exceptions from another aggregator into this aggregator.
            </summary>
            <param name="aggregator">The aggregator whose exceptions should be copied.</param>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.Clear">
            <summary>
            Clears the aggregator.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.Clone">
            <summary>
            Clones the aggregator with a copy of the existing exceptions.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.Create">
            <summary>
            Creates an empty aggregator.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.Run(System.Action)">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.Run``1(System.Func{``0},``0)">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
            <param name="defaultValue">The default value to return if the lambda throws an exception</param>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.RunAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.RunAsync``1(System.Func{System.Threading.Tasks.ValueTask{``0}},``0)">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
            <param name="defaultValue">The default value to return if the lambda throws an exception</param>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.ThrowIfFaulted">
            <summary>
            Throws an exception if the aggregator contains any exceptions. If the aggregator contains
            a single exception, it will be re-thrown without losing the original stack trace; if
            the aggregator contains more than one exception, then the original exceptions will be
            wrapped up into an instance of <see cref="T:System.AggregateException"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExceptionAggregator.ToException">
            <summary>
            Returns an exception that represents the exceptions thrown by the code
            passed to the <see cref="M:Xunit.v3.ExceptionAggregator.Run(System.Action)"/> or RunAsync methods.
            </summary>
            <returns>Returns <c>null</c> if no exceptions were thrown; returns the
            exact exception if a single exception was thrown; returns <see cref="T:System.AggregateException"/>
            if more than one exception was thrown.</returns>
        </member>
        <member name="T:Xunit.v3.CollectionPerAssemblyTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IXunitTestCollectionFactory"/> that creates a single
            default test collection for the assembly, and places any tests classes which are not
            decorated by <see cref="T:Xunit.CollectionAttribute"/> or <see cref="T:Xunit.CollectionAttribute`1"/>
            into the default test collection.
            </summary>
        </member>
        <member name="M:Xunit.v3.CollectionPerAssemblyTestCollectionFactory.#ctor(Xunit.v3.IXunitTestAssembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.CollectionPerAssemblyTestCollectionFactory" /> class.
            </summary>
            <param name="testAssembly">The assembly.</param>
        </member>
        <member name="P:Xunit.v3.CollectionPerAssemblyTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CollectionPerAssemblyTestCollectionFactory.GetDefaultTestCollection(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.CollectionPerClassTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IXunitTestCollectionFactory"/> which creates a new test
            collection for each test class that isn't decorated with <see cref="T:Xunit.CollectionAttribute"/>
            or <see cref="T:Xunit.CollectionAttribute`1"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.CollectionPerClassTestCollectionFactory.#ctor(Xunit.v3.IXunitTestAssembly)">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IXunitTestCollectionFactory"/> which creates a new test
            collection for each test class that isn't decorated with <see cref="T:Xunit.CollectionAttribute"/>
            or <see cref="T:Xunit.CollectionAttribute`1"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="P:Xunit.v3.CollectionPerClassTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CollectionPerClassTestCollectionFactory.GetDefaultTestCollection(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DefaultTestCaseOrderer">
            <summary>
            Default implementation of <see cref="T:Xunit.v3.ITestCaseOrderer"/>. Orders tests in
            an unpredictable but stable order, so that repeated test runs of the
            identical test assembly run tests in the same order.
            </summary>
        </member>
        <member name="P:Xunit.v3.DefaultTestCaseOrderer.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Xunit.v3.DefaultTestCaseOrderer"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.DefaultTestCaseOrderer.OrderTestCases``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DefaultTestCollectionOrderer">
            <summary>
            Default implementation of <see cref="T:Xunit.v3.ITestCollectionOrderer"/>. Orders tests in
            an unpredictable and unstable order, so that repeated test runs of the
            identical test assembly run test collections in a random order.
            </summary>
        </member>
        <member name="P:Xunit.v3.DefaultTestCollectionOrderer.Instance">
            <summary>
            Get the singleton instance of <see cref="T:Xunit.v3.DefaultTestCollectionOrderer"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.DefaultTestCollectionOrderer.OrderTestCollections``1(System.Collections.Generic.IReadOnlyCollection{``0})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.FactDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IXunitTestCaseDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.FactAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.FactDiscoverer.CreateTestCase(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute)">
            <summary>
            Creates a single <see cref="T:Xunit.v3.XunitTestCase"/> for the given test method.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method.</param>
            <param name="factAttribute">The attribute that decorates the test method.</param>
        </member>
        <member name="M:Xunit.v3.FactDiscoverer.Discover(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute)">
            <summary>
            Discover test cases from a test method. By default, if the method is generic, or
            it contains arguments, returns a single <see cref="T:Xunit.v3.ExecutionErrorTestCase"/>;
            otherwise, it returns the result of calling <see cref="M:Xunit.v3.FactDiscoverer.CreateTestCase(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute)"/>.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="factAttribute">The fact attribute attached to the test method.</param>
            <returns>Returns zero or more test cases represented by the test method.</returns>
        </member>
        <member name="T:Xunit.v3.InProcessFrontController">
            <summary>
            This class is a "philosophical" implementation of <see cref="T:Xunit.IFrontController"/> (which isn't a type
            that's available here), intended to be used by in-process runners, wrapped around an implementation
            of <see cref="T:Xunit.v3.ITestFramework"/>. The signatures of the methods are slightly different, as they permit
            and require direct access to <see cref="T:Xunit.Sdk.ITestCase"/> instances rather than forcing the test cases through
            a round of serialization and deserialization. It will also manufacture the <see cref="T:Xunit.Sdk.IDiscoveryStarting"/>
            and <see cref="T:Xunit.Sdk.IDiscoveryComplete"/> messages that the test framework is not responsible for. When connected
            to remote meta-runners, the in-process runner can convert <see cref="T:Xunit.Sdk.ITestCase"/> instances into
            <see cref="T:Xunit.Runner.Common.TestCaseDiscovered"/> instances by using a converter like
            <see cref="M:Xunit.Sdk.MessageSinkMessageExtensions.ToTestCaseDiscovered"/> (which should be called from a
            callback passed to <see cref="M:Xunit.v3.InProcessFrontController.Find(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Func{Xunit.Sdk.ITestCase,System.Boolean},System.Threading.CancellationTokenSource,System.Type[],System.Func{Xunit.Sdk.ITestCase,System.Boolean,System.Threading.Tasks.ValueTask{System.Boolean}})"/>).
            </summary>
        </member>
        <member name="M:Xunit.v3.InProcessFrontController.#ctor(Xunit.v3.ITestFramework,System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.InProcessFrontController"/> class.
            </summary>
            <param name="testFramework">The test framework to be wrapped.</param>
            <param name="testAssembly">The assembly under test.</param>
            <param name="configFilePath">The optional configuration file path.</param>
        </member>
        <member name="P:Xunit.v3.InProcessFrontController.TestAssemblyUniqueID">
            <summary>
            Gets the unique ID for the test assembly provided to the discoverer.
            </summary>
        </member>
        <member name="P:Xunit.v3.InProcessFrontController.TestFrameworkDisplayName">
            <summary>
            Returns the display name of the test framework that this discoverer is running tests for.
            </summary>
        </member>
        <member name="M:Xunit.v3.InProcessFrontController.Find(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Func{Xunit.Sdk.ITestCase,System.Boolean},System.Threading.CancellationTokenSource,System.Type[],System.Func{Xunit.Sdk.ITestCase,System.Boolean,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Starts the process of finding tests in an assembly. Typically only used by
            runners which discover tests and present them into a UI for the user to interactively
            choose for selective run (via <see cref="M:Xunit.v3.InProcessFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.ITestCase},System.Threading.CancellationTokenSource)"/>). For runners which simply wish to
            discover and immediately run tests, they should instead use <see cref="M:Xunit.v3.InProcessFrontController.FindAndRun(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Func{Xunit.Sdk.ITestCase,System.Boolean},System.Threading.CancellationTokenSource,System.Type[])"/>,
            which permits the same filtering logic as this method.
            </summary>
            <param name="messageSink">The message sink to report discovery starting and discovery complete messages to.
            Discovered tests are *not* reported to this message sink, since it's also used for <see cref="M:Xunit.v3.InProcessFrontController.FindAndRun(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Func{Xunit.Sdk.ITestCase,System.Boolean},System.Threading.CancellationTokenSource,System.Type[])"/>,
            so it is assumed that callers to this method will use the <paramref name="discoveryCallback"/> to report
            discovered tests if needed.</param>
            <param name="options">The options to be used for discovery.</param>
            <param name="filter">The filter function for filtering test cases.</param>
            <param name="cancellationTokenSource">The cancellation token source used to cancel discovery.</param>
            <param name="types">When passed a non-<c>null</c> collection, only returns tests found
            from one of the provided types; when passed a <c>null</c> collection, discovers all
            tests in the assembly.</param>
            <param name="discoveryCallback">An optional callback to be called for each discovered test case.
            It provides both the test case and a flag which indicates if it passed the provided filter.</param>
        </member>
        <member name="M:Xunit.v3.InProcessFrontController.FindAndRun(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Func{Xunit.Sdk.ITestCase,System.Boolean},System.Threading.CancellationTokenSource,System.Type[])">
            <summary>
            Starts the process of finding and running tests in an assembly. Typically only used
            by runner which do not present test discovery UIs to users that allow them to run
            selected tests (those should instead use <see cref="M:Xunit.v3.InProcessFrontController.Find(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Func{Xunit.Sdk.ITestCase,System.Boolean},System.Threading.CancellationTokenSource,System.Type[],System.Func{Xunit.Sdk.ITestCase,System.Boolean,System.Threading.Tasks.ValueTask{System.Boolean}})"/> and <see cref="M:Xunit.v3.InProcessFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.ITestCase},System.Threading.CancellationTokenSource)"/>
            as separate operations).
            </summary>
            <param name="messageSink">The message sink to report messages to.</param>
            <param name="discoveryOptions">The options to be used for discovery.</param>
            <param name="executionOptions">The options to be used for execution.</param>
            <param name="filter">The filter function for filtering test cases.</param>
            <param name="cancellationTokenSource">The cancellation token sourced used to cancel discovery/execution.</param>
            <param name="types">When passed a non-<c>null</c> collection, discovery/filtering/execution
            only looks for tests from one of the provided types; when passed a <c>null</c> collection,
            discovery/filtering/execution looks at all types in the assembly.</param>
        </member>
        <member name="M:Xunit.v3.InProcessFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.ITestCase},System.Threading.CancellationTokenSource)">
            <summary>
            Starts the process of running selected tests in the assembly. The test cases to run come from
            calling <see cref="M:Xunit.v3.InProcessFrontController.Find(Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Func{Xunit.Sdk.ITestCase,System.Boolean},System.Threading.CancellationTokenSource,System.Type[],System.Func{Xunit.Sdk.ITestCase,System.Boolean,System.Threading.Tasks.ValueTask{System.Boolean}})"/> and collecting the test cases that were returned via the callback.
            </summary>
            <param name="messageSink">The message sink to report messages to.</param>
            <param name="executionOptions">The options to be used for execution.</param>
            <param name="testCases">The test cases to execute.</param>
            <param name="cancellationTokenSource">The cancellation token source used to cancel discovery.</param>
        </member>
        <member name="T:Xunit.v3.TestCollectionFactoryBase">
            <summary>
            Base class with common functionality between <see cref="T:Xunit.v3.CollectionPerAssemblyTestCollectionFactory"/>
            and <see cref="T:Xunit.v3.CollectionPerClassTestCollectionFactory"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.TestCollectionFactoryBase.#ctor(Xunit.v3.IXunitTestAssembly)">
            <summary>
            Base class with common functionality between <see cref="T:Xunit.v3.CollectionPerAssemblyTestCollectionFactory"/>
            and <see cref="T:Xunit.v3.CollectionPerClassTestCollectionFactory"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="P:Xunit.v3.TestCollectionFactoryBase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionFactoryBase.TestAssembly">
            <summary>
            Gets the test assembly.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestCollectionFactoryBase.Get(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionFactoryBase.GetDefaultTestCollection(System.Type)">
            <summary>
            Override to provide a test collection when the given test class is not decorated
            with any test collection attributes.
            </summary>
            <param name="testClass">The test class</param>
        </member>
        <member name="T:Xunit.v3.TestContextAccessor">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestContextAccessor"/>.
            </summary>
        </member>
        <member name="F:Xunit.v3.TestContextAccessor.Instance">
            <summary>
            Get the singleton instance of <see cref="T:Xunit.v3.TestContextAccessor"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestContextAccessor.Current">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestFramework">
            <summary>
            A default implementation of <see cref="T:Xunit.v3.ITestFramework"/> that tracks objects to be
            disposed when the framework is disposed. The discoverer and executor are automatically
            tracked for disposal, since those interfaces mandate an implementation
            of <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestFramework.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestFramework.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestFramework.TestPipelineStartup">
            <summary>
            Gets the value that was set for the test pipeline startup, if one was present.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestFramework.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFramework.CreateDiscoverer(System.Reflection.Assembly)">
            <summary>
            Override this method to provide the implementation of <see cref="T:Xunit.v3.ITestFrameworkDiscoverer"/>.
            </summary>
            <param name="assembly">The assembly that is being discovered.</param>
            <returns>Returns the test framework discoverer.</returns>
        </member>
        <member name="M:Xunit.v3.TestFramework.CreateExecutor(System.Reflection.Assembly)">
            <summary>
            Override this method to provide the implementation of <see cref="T:Xunit.v3.ITestFrameworkExecutor"/>.
            </summary>
            <param name="assembly">The assembly that is being executed.</param>
            <returns>Returns the test framework executor.</returns>
        </member>
        <member name="M:Xunit.v3.TestFramework.GetDiscoverer(System.Reflection.Assembly)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFramework.GetExecutor(System.Reflection.Assembly)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFramework.SetTestPipelineStartup(Xunit.v3.ITestPipelineStartup)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestFrameworkDiscoverer`1">
            <summary>
            A base implementation of <see cref="T:Xunit.v3.ITestFrameworkDiscoverer"/> that supports test filtering
            and runs the discovery process on a thread pool thread.
            </summary>
            <typeparam name="TTestClass">The test class object model type. Must derive from
            <see cref="T:Xunit.Sdk.ITestClass"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestFrameworkDiscoverer`1.#ctor(Xunit.Sdk.ITestAssembly)">
            <summary>
            A base implementation of <see cref="T:Xunit.v3.ITestFrameworkDiscoverer"/> that supports test filtering
            and runs the discovery process on a thread pool thread.
            </summary>
            <typeparam name="TTestClass">The test class object model type. Must derive from
            <see cref="T:Xunit.Sdk.ITestClass"/>.</typeparam>
        </member>
        <member name="P:Xunit.v3.TestFrameworkDiscoverer`1.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework discoverer.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestFrameworkDiscoverer`1.TestAssembly">
            <summary>
            Gets the test assembly.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestFrameworkDiscoverer`1.CreateTestClass(System.Type)">
            <inheritdoc/>
            <summary>
            Implement this method to create a test class for the given CLR type.
            </summary>
            <param name="class">The CLR type.</param>
            <returns>The test class.</returns>
        </member>
        <member name="M:Xunit.v3.TestFrameworkDiscoverer`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFrameworkDiscoverer`1.Find(System.Func{Xunit.Sdk.ITestCase,System.Threading.Tasks.ValueTask{System.Boolean}},Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Type[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFrameworkDiscoverer`1.FindTestsForType(`0,Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Func{Xunit.Sdk.ITestCase,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Core implementation to discover unit tests in a given test class.
            </summary>
            <param name="testClass">The test class.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
            <param name="discoveryCallback">The callback that is called for each discovered test case.
            The return value of the callback indicates the same thing as the return value of this function:
            return <c>true</c> to continue discovery, or <c>false</c> to halt it.</param>
            <returns>Returns <c>true</c> if discovery should continue; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.v3.TestFrameworkDiscoverer`1.GetExportedTypes">
            <summary>
            Override this to provide a list of the exported types in the assembly.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestFrameworkDiscoverer`1.IsValidTestClass(System.Type)">
            <summary>
            Determines if a type should be used for discovery. Can be used to filter out types that
            are not desirable. The default implementation filters out abstract (non-static) classes.
            </summary>
            <param name="type">The type.</param>
            <returns>Returns <c>true</c> if the type can contain tests; <c>false</c>, otherwise.</returns>
        </member>
        <member name="T:Xunit.v3.TestFrameworkExecutor`1">
            <summary>
            A reusable implementation of <see cref="T:Xunit.v3.ITestFrameworkExecutor"/> which contains the basic behavior
            for running tests.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
            <param name="testAssembly">The test assembly.</param>
        </member>
        <member name="M:Xunit.v3.TestFrameworkExecutor`1.#ctor(Xunit.Sdk.ITestAssembly)">
            <summary>
            A reusable implementation of <see cref="T:Xunit.v3.ITestFrameworkExecutor"/> which contains the basic behavior
            for running tests.
            </summary>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
            <param name="testAssembly">The test assembly.</param>
        </member>
        <member name="P:Xunit.v3.TestFrameworkExecutor`1.DisposalTracker">
            <summary>
            Gets the disposal tracker for the test framework discoverer.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestFrameworkExecutor`1.TestAssembly">
            <summary>
            Gets the test assembly for execution.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestFrameworkExecutor`1.CreateDiscoverer">
            <summary>
            Override to create a test framework discoverer that can be used to discover
            tests when the user asks to run all test.
            </summary>
            <returns>The test framework discoverer</returns>
        </member>
        <member name="M:Xunit.v3.TestFrameworkExecutor`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFrameworkExecutor`1.RunTestCases(System.Collections.Generic.IReadOnlyCollection{`0},Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Threading.CancellationToken)">
            <summary>
            Runs selected test cases in the assembly.
            </summary>
            <param name="testCases">The test cases to run.</param>
            <param name="executionMessageSink">The message sink to report results back to.</param>
            <param name="executionOptions">The options to be used during test execution.</param>
            <param name="cancellationToken">The cancellation token which can be used to cancel the test
            execution process.</param>
        </member>
        <member name="T:Xunit.v3.TestOutputHelper">
            <summary>
            Default implementation of <see cref="T:Xunit.ITestOutputHelper"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestOutputHelper.Output">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestOutputHelper.Initialize(Xunit.v3.IMessageBus,Xunit.Sdk.ITest)">
            <summary>
            Initialize the test output helper with information about a test.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestOutputHelper.Uninitialize">
            <summary>
            Resets the test output helper to its uninitialized state.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestOutputHelper.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestOutputHelper.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestOutputHelper.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestOutputHelper.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TheoryDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IXunitTestCaseDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.v3.ITheoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.TheoryDiscoverer.CreateTestCasesForDataRow(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.ITheoryAttribute,Xunit.ITheoryDataRow,System.Object[])">
            <summary>
            Creates test cases for a single row of data. By default, returns a single instance of <see cref="T:Xunit.v3.XunitTestCase"/>
            with the data row inside of it.
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="theoryAttribute">The theory attribute attached to the test method.</param>
            <param name="dataRow">The data row that generated <paramref name="testMethodArguments"/>.</param>
            <param name="testMethodArguments">The arguments for the test method.</param>
            <returns>The test cases</returns>
        </member>
        <member name="M:Xunit.v3.TheoryDiscoverer.CreateTestCasesForTheory(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.ITheoryAttribute)">
            <summary>
            Creates test cases for the entire theory. This is used when one or more of the theory data items
            are not serializable, or if the user has requested to skip theory pre-enumeration, or if the user
            has requested the entire theory be skipped. By default, returns a single instance
            of <see cref="T:Xunit.v3.XunitDelayEnumeratedTheoryTestCase"/> (which performs the
            data discovery at runtime, for non-skipped theories) or <see cref="T:Xunit.v3.XunitTestCase"/>
            (for skipped theories).
            </summary>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="theoryAttribute">The theory attribute attached to the test method.</param>
            <returns>The test case</returns>
        </member>
        <member name="M:Xunit.v3.TheoryDiscoverer.Discover(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute)">
            <summary>
            Discover test cases from a test method.
            </summary>
            <remarks>
            This method performs the following steps:<br/>
            - If the theory attribute is marked with Skip, or pre-enumeration is off, or any of the test data is non serializable,
              returns the result of <see cref="M:Xunit.v3.TheoryDiscoverer.CreateTestCasesForTheory(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.ITheoryAttribute)"/>;<br/>
            - If there is no theory data, returns a single test case of <see cref="T:Xunit.v3.ExecutionErrorTestCase"/> with the error in it;<br/>
            - Otherwise, it returns one test case per data row, created by calling <see cref="M:Xunit.v3.TheoryDiscoverer.CreateTestCasesForDataRow(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.ITheoryAttribute,Xunit.ITheoryDataRow,System.Object[])"/>.
            </remarks>
            <param name="discoveryOptions">The discovery options to be used.</param>
            <param name="testMethod">The test method the test cases belong to.</param>
            <param name="factAttribute">The theory attribute attached to the test method.</param>
            <returns>Returns zero or more test cases represented by the test method.</returns>
        </member>
        <member name="T:Xunit.v3.XunitTestFramework">
            <summary>
            The implementation of <see cref="T:Xunit.v3.ITestFramework"/> that supports discovery and
            execution of unit tests linked against xunit.v3.core.dll.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestFramework.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestFramework"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestFramework.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestFramework"/> class.
            </summary>
            <param name="configFileName">The optional test configuration file.</param>
        </member>
        <member name="P:Xunit.v3.XunitTestFramework.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestFramework.CreateDiscoverer(System.Reflection.Assembly)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestFramework.CreateExecutor(System.Reflection.Assembly)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestFrameworkDiscoverer">
            <summary>
            The implementation of <see cref="T:Xunit.v3.ITestFrameworkDiscoverer"/> that supports discovery
            of unit tests linked against xunit.v3.core.dll.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkDiscoverer.#ctor(Xunit.v3.IXunitTestAssembly,Xunit.v3.IXunitTestCollectionFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="testAssembly">The test assembly</param>
            <param name="collectionFactory">The test collection factory used to look up test collections.</param>
        </member>
        <member name="P:Xunit.v3.XunitTestFrameworkDiscoverer.DiscovererTypeCache">
            <summary>
            Gets the mapping dictionary of fact attribute type to discoverer type. The key
            is a type that implements <see cref="T:Xunit.v3.IFactAttribute"/>; the value is the
            discoverer type, if known; <c>null</c> if not.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestFrameworkDiscoverer.TestAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestFrameworkDiscoverer.TestCollectionFactory">
            <summary>
            Gets the test collection factory that makes test collections.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkDiscoverer.CreateTestClass(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkDiscoverer.Find(System.Func{Xunit.Sdk.ITestCase,System.Threading.Tasks.ValueTask{System.Boolean}},Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Type[],System.Nullable{System.Threading.CancellationToken})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkDiscoverer.FindTestsForMethod(Xunit.v3.IXunitTestMethod,Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Func{Xunit.Sdk.ITestCase,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Finds the tests on a test method.
            </summary>
            <param name="testMethod">The test method.</param>
            <param name="discoveryOptions">The options used by the test framework during discovery.</param>
            <param name="discoveryCallback">The callback that is called for each discovered test case.</param>
            <returns>Return <c>true</c> to continue test discovery, <c>false</c>, otherwise.</returns>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkDiscoverer.FindTestsForType(Xunit.v3.IXunitTestClass,Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Func{Xunit.Sdk.ITestCase,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkDiscoverer.GetDiscoverer(System.Type)">
            <summary>
            Gets the test case discover instance for the given discoverer type. The instances are cached
            and reused, since they should not be stateful.
            </summary>
            <param name="discovererType">The discoverer type.</param>
            <returns>Returns the test case discoverer instance, if known; may return <c>null</c>
            when an error occurs (which is logged to the diagnostic message sink).</returns>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkDiscoverer.GetExportedTypes">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestFrameworkExecutor">
            <summary>
            The implementation of <see cref="T:Xunit.v3.ITestFrameworkExecutor"/> that supports execution
            of unit tests linked against xunit.v3.core.dll.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestFrameworkExecutor"/> class.
            </remarks>
            <param name="testAssembly">The test assembly.</param>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkExecutor.#ctor(Xunit.v3.IXunitTestAssembly)">
            <summary>
            The implementation of <see cref="T:Xunit.v3.ITestFrameworkExecutor"/> that supports execution
            of unit tests linked against xunit.v3.core.dll.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestFrameworkExecutor"/> class.
            </remarks>
            <param name="testAssembly">The test assembly.</param>
        </member>
        <member name="P:Xunit.v3.XunitTestFrameworkExecutor.TestAssembly">
            <summary>
            Gets the test assembly that contains the test.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkExecutor.CreateDiscoverer">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestFrameworkExecutor.RunTestCases(System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitRunnerHelper">
            <summary>
            Helper functions for xUnit.net v3 runners.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitRunnerHelper.FailTest(Xunit.v3.IMessageBus,System.Threading.CancellationTokenSource,Xunit.Sdk.ITest,System.Exception)">
            <summary>
            Fail a test with the given exception.
            </summary>
            <param name="messageBus">The message bus to send the messages to</param>
            <param name="cancellationTokenSource">The cancellation token source to cancel if requested</param>
            <param name="test">The test to fail</param>
            <param name="exception">The exception to fail the test cases with</param>
        </member>
        <member name="M:Xunit.v3.XunitRunnerHelper.FailTestCases(Xunit.v3.IMessageBus,System.Threading.CancellationTokenSource,System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.ITestCase},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Fail a set of test cases with the given message.
            </summary>
            <param name="messageBus">The message bus to send the messages to</param>
            <param name="cancellationTokenSource">The cancellation token source to cancel if requested</param>
            <param name="testCases">The test cases to fail</param>
            <param name="messageFormat">A message template where <c>{0}</c> will be replaced with the
            display name of the test case during failure processing</param>
            <param name="sendTestCollectionMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestCollectionStarting"/>
            and <see cref="T:Xunit.Sdk.ITestCollectionFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestClassMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestClassStarting"/>
            and <see cref="T:Xunit.Sdk.ITestClassFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestMethodMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestMethodStarting"/>
            and <see cref="T:Xunit.Sdk.ITestMethodFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestCaseMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestCaseStarting"/>
            and <see cref="T:Xunit.Sdk.ITestCaseFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestStarting"/>
            and <see cref="T:Xunit.Sdk.ITestFinished"/> messages; set to <c>false</c> to skip</param>
        </member>
        <member name="M:Xunit.v3.XunitRunnerHelper.FailTestCases(Xunit.v3.IMessageBus,System.Threading.CancellationTokenSource,System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.ITestCase},System.Exception,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Fail a set of test cases with the given exception.
            </summary>
            <param name="messageBus">The message bus to send the messages to</param>
            <param name="cancellationTokenSource">The cancellation token source to cancel if requested</param>
            <param name="testCases">The test cases to fail</param>
            <param name="exception">The exception to fail the test cases with</param>
            <param name="sendTestCollectionMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestCollectionStarting"/>
            and <see cref="T:Xunit.Sdk.ITestCollectionFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestClassMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestClassStarting"/>
            and <see cref="T:Xunit.Sdk.ITestClassFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestMethodMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestMethodStarting"/>
            and <see cref="T:Xunit.Sdk.ITestMethodFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestCaseMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestCaseStarting"/>
            and <see cref="T:Xunit.Sdk.ITestCaseFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestStarting"/>
            and <see cref="T:Xunit.Sdk.ITestFinished"/> messages; set to <c>false</c> to skip</param>
        </member>
        <member name="M:Xunit.v3.XunitRunnerHelper.RunXunitTestCase(Xunit.v3.IXunitTestCase,Xunit.v3.IMessageBus,System.Threading.CancellationTokenSource,Xunit.v3.ExceptionAggregator,Xunit.Sdk.ExplicitOption,System.Object[])">
            <summary>
            Runs a single test case (which implements <see cref="T:Xunit.v3.IXunitTestCase"/>) using
            the <see cref="T:Xunit.v3.XunitTestCaseRunner"/> after enumerating all tests.
            </summary>
            <param name="testCase">The test case to run</param>
            <param name="messageBus">The message bus to send the messages to</param>
            <param name="cancellationTokenSource">The cancellation token source to cancel if requested</param>
            <param name="aggregator">The exception aggregator to record exceptions to</param>
            <param name="explicitOption">A flag to indicate which types of tests to run (non-explicit, explicit, or both)</param>
            <param name="constructorArguments">The arguments to pass to the test class constructor</param>
            <returns></returns>
        </member>
        <member name="M:Xunit.v3.XunitRunnerHelper.SkipTestCases(Xunit.v3.IMessageBus,System.Threading.CancellationTokenSource,System.Collections.Generic.IReadOnlyCollection{Xunit.Sdk.ITestCase},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Skips a set of test cases with the given skip reason.
            </summary>
            <param name="messageBus">The message bus to send the messages to</param>
            <param name="cancellationTokenSource">The cancellation token source to cancel if requested</param>
            <param name="testCases">The test cases to fail</param>
            <param name="skipReason">The skip reason</param>
            <param name="sendTestCollectionMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestCollectionStarting"/>
            and <see cref="T:Xunit.Sdk.ITestCollectionFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestClassMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestClassStarting"/>
            and <see cref="T:Xunit.Sdk.ITestClassFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestMethodMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestMethodStarting"/>
            and <see cref="T:Xunit.Sdk.ITestMethodFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestCaseMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestCaseStarting"/>
            and <see cref="T:Xunit.Sdk.ITestCaseFinished"/> messages; set to <c>false</c> to skip</param>
            <param name="sendTestMessages">Set to <c>true</c> to send <see cref="T:Xunit.Sdk.ITestStarting"/>
            and <see cref="T:Xunit.Sdk.ITestFinished"/> messages; set to <c>false</c> to skip</param>
        </member>
        <member name="T:Xunit.v3.AfterTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IAfterTestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.AfterTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.AfterTestFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.AfterTestFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.AfterTestFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.AfterTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IAfterTestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.AfterTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.AfterTestStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.AfterTestStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.AfterTestStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.MessageSinkMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>, with serialization support.
            </summary>
            <remarks>
            Because of serialization, all concrete message sink message types must be decorated
            with <see cref="T:Xunit.Sdk.JsonTypeIDAttribute"/> to set a unique type ID for serialization purposes.
            </remarks>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.ValidateObjectState">
            <summary>
            Validates the state of the message object. This should be called just before serializing the message
            or just after deserializing the message to ensure that the message is not missing any required
            property values.
            </summary>
            <exception cref="T:Xunit.Sdk.UnsetPropertiesException">Throw when one or more properties are missing values.</exception>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Called before serializing the message. Implementers are expected to call <see cref="M:Xunit.v3.MessageSinkMessage.ValidatePropertyIsNotNull(System.Object,System.String,System.Collections.Generic.HashSet{System.String})"/>
            for each property that must have a value, to record invalid property values into the provided hash set.
            </summary>
            <param name="invalidProperties">The hash set to record invalid properties into</param>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.ValidatePropertyIsNotNull(System.Object,System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Validates that the property value is not <c>null</c>, and if it is, adds the given
            property name to the invalid property hash set.
            </summary>
            <param name="propertyValue">The property value</param>
            <param name="propertyName">The property name</param>
            <param name="invalidProperties">The hash set to contain the invalid property name list</param>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.#ctor">
            <summary>
            Initializes a new instance of the see <see cref="T:Xunit.v3.MessageSinkMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <summary>
            Override to serialize the values in the message into JSON.
            </summary>
            <param name="serializer">The serializer to write values to.</param>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.ToDisplayString(System.String[])">
            <summary>
            Converts a string array into a display value, for use in an <see cref="M:System.Object.ToString"/> overload.
            </summary>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.ToDisplayString``1(``0[])">
            <summary>
            Converts am array into a display value, for use in an <see cref="M:System.Object.ToString"/> overload.
            </summary>
        </member>
        <member name="M:Xunit.v3.MessageSinkMessage.ToJson">
            <summary>
            Creates a JSON serialized version of this message.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the message class does not have a <see cref="T:Xunit.Sdk.JsonTypeIDAttribute"/>.</exception>
            <exception cref="T:Xunit.Sdk.UnsetPropertiesException">Thrown when one or more properties are missing values.</exception>
        </member>
        <member name="T:Xunit.v3.TestAssemblyMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyMessage.AssemblyUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCaseMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCaseMessage.TestCaseUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestClassMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestClassMessage.TestClassUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCollectionMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCollectionMessage.TestCollectionUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestMessage.TestUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestMethodMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestMethodMessage.TestMethodUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestResultMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestResultMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestResultMessage.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestResultMessage.FinishTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestResultMessage.Output">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestResultMessage.Warnings">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestResultMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestResultMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestResultMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.BeforeTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IBeforeTestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.BeforeTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.BeforeTestFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.BeforeTestFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.BeforeTestFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.BeforeTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IBeforeTestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.BeforeTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.BeforeTestStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.BeforeTestStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.BeforeTestStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DiagnosticMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDiagnosticMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.DiagnosticMessage.Message">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.DiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.DiagnosticMessage"/> class with
            the provided message.
            </summary>
            <param name="message">The diagnostic message</param>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.DiagnosticMessage"/> class with
            the provided message format and single argument.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.DiagnosticMessage"/> class with
            the provided message format and two arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.DiagnosticMessage"/> class with
            the provided message format and three arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
            <param name="arg2">The value to replace {2} in the format string.</param>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.DiagnosticMessage"/> class with
            the provided message format and multiple arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiagnosticMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DiscoveryComplete">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDiscoveryComplete"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.DiscoveryComplete.TestCasesToRun">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiscoveryComplete.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiscoveryComplete.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiscoveryComplete.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DiscoveryStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDiscoveryStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.DiscoveryStarting.AssemblyName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DiscoveryStarting.AssemblyPath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.DiscoveryStarting.ConfigFilePath">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiscoveryStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiscoveryStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DiscoveryStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.ErrorMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IErrorMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.ErrorMessage.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.ErrorMessage.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.ErrorMessage.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.ErrorMessage.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.ErrorMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.ErrorMessage.FromException(System.Exception)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.IErrorMessage"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
        </member>
        <member name="M:Xunit.v3.ErrorMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.ErrorMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.InternalDiagnosticMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IInternalDiagnosticMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.InternalDiagnosticMessage.Message">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.InternalDiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.InternalDiagnosticMessage"/> class with
            the provided message.
            </summary>
            <param name="message">The diagnostic message</param>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.InternalDiagnosticMessage"/> class with
            the provided message format and single argument.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.InternalDiagnosticMessage"/> class with
            the provided message format and two arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.InternalDiagnosticMessage"/> class with
            the provided message format and three arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
            <param name="arg2">The value to replace {2} in the format string.</param>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.v3.InternalDiagnosticMessage"/> class with
            the provided message format and multiple arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.InternalDiagnosticMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestAssemblyCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyCleanupFailure.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyCleanupFailure.FromException(System.Exception,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestAssemblyCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
        </member>
        <member name="M:Xunit.v3.TestAssemblyCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestAssemblyFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyFinished.FinishTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyFinished.TestsNotRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyFinished.TestsTotal">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestAssemblyStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.AssemblyName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.AssemblyPath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.ConfigFilePath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.Seed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.TargetFramework">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.TestEnvironment">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestAssemblyStarting.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCaseCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCaseCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseCleanupFailure.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseCleanupFailure.FromException(System.Exception,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCaseCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
            <param name="testCaseUniqueID">The unique ID of the test case</param>
        </member>
        <member name="M:Xunit.v3.TestCaseCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCaseDiscovered">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseDiscovered"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.Serialization">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.SourceFilePath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.SourceLineNumber">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestCaseDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestClassMetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestClassNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestClassSimpleName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestMethodArity">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestMethodMetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestMethodName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestMethodParameterTypesVSTest">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.TestMethodReturnTypeVSTest">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseDiscovered.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseDiscovered.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseDiscovered.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseDiscovered.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCaseFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCaseFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseFinished.TestsNotRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseFinished.TestsTotal">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCaseStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.SourceFilePath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.SourceLineNumber">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestCaseDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestClassMetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestClassNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestClassSimpleName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestMethodArity">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestMethodMetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestMethodName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestMethodParameterTypesVSTest">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.TestMethodReturnTypeVSTest">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCaseStarting.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCaseStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestClassCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestClassCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassCleanupFailure.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassCleanupFailure.FromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestClassCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
        </member>
        <member name="M:Xunit.v3.TestClassCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestClassConstructionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassConstructionFinished"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestClassConstructionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassConstructionStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestClassDisposeFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassDisposeFinished"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestClassDisposeStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassDisposeStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestClassFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassFinished"/>
            </summary>
        </member>
        <member name="P:Xunit.v3.TestClassFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassFinished.TestsNotRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassFinished.TestsTotal">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestClassStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestClassStarting.TestClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassStarting.TestClassNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassStarting.TestClassSimpleName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestClassStarting.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCleanupFailure.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCleanupFailure.FromException(System.Exception,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
            <param name="testCaseUniqueID">The unique ID of the test case</param>
            <param name="testUniqueID">The unique ID of the test</param>
        </member>
        <member name="M:Xunit.v3.TestCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCollectionCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCollectionCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionCleanupFailure.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionCleanupFailure.FromException(System.Exception,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCollectionCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
        </member>
        <member name="M:Xunit.v3.TestCollectionCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCollectionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCollectionFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionFinished.TestsNotRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionFinished.TestsTotal">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCollectionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCollectionStarting.TestCollectionClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionStarting.TestCollectionDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestCollectionStarting.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestFailed">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestFailed"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestFailed.Cause">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestFailed.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestFailed.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestFailed.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestFailed.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFailed.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFailed.FromException(System.Exception,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.String[],System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestFailed"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
            <param name="testCaseUniqueID">The unique ID of the test case</param>
            <param name="testUniqueID">The unique ID of the test</param>
            <param name="executionTime">The execution time of the test (may be <c>null</c> if the test wasn't executed)</param>
            <param name="output">The (optional) output from the test</param>
            <param name="warnings">The (optional) warnings that were recorded during test execution</param>
            <param name="finishTime">The time when the test finished executing; defaults to <see cref="P:System.DateTimeOffset.UtcNow"/></param>
        </member>
        <member name="M:Xunit.v3.TestFailed.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestFinished.Attachments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="F:Xunit.v3.TestFinished.EmptyAttachments">
            <summary>
            An empty set of attachments that can be used when none are provided.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestMethodCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestMethodCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodCleanupFailure.ExceptionTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodCleanupFailure.Messages">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodCleanupFailure.StackTraces">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodCleanupFailure.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodCleanupFailure.FromException(System.Exception,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestMethodCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
        </member>
        <member name="M:Xunit.v3.TestMethodCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestMethodFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestMethodFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodFinished.TestsNotRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodFinished.TestsTotal">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodFinished.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestMethodStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestMethodStarting.MethodArity">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodStarting.MethodName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestMethodStarting.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestNotRun">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestNotRun"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestOutput">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestOutput"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestOutput.Output">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestOutput.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestOutput.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestOutput.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestPassed">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestPassed"/>.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestSkipped">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestSkipped"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestSkipped.Reason">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestSkipped.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestSkipped.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestSkipped.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestStarting.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestStarting.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestStarting.TestDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestStarting.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.TestStarting.Traits">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestStarting.ValidateObjectState(System.Collections.Generic.HashSet{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase">
            <summary>
            An instance of <see cref="T:Xunit.v3.XunitDelayEnumeratedTheoryTestCase"/> which has a cultural override.
            </summary>
        </member>
        <member name="M:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase.#ctor(System.String,Xunit.v3.IXunitTestMethod,System.String,System.String,System.Boolean,System.Boolean,System.Type[],System.String,System.Type,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase"/> class.
            </summary>
            <param name="culture">The culture to run the theory under.</param>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="testCaseDisplayName">The display name for the test case.</param>
            <param name="uniqueID">The optional unique ID for the test case; if not provided, will be calculated.</param>
            <param name="explicit">Indicates whether the test case was marked as explicit.</param>
            <param name="skipTestWithoutData">Set to <c>true</c> to skip if the test has no data, rather than fail.</param>
            <param name="skipExceptions">The value from <see cref="P:Xunit.v3.IFactAttribute.SkipExceptions"/>.</param>
            <param name="skipReason">The value from <see cref="P:Xunit.v3.IFactAttribute.Skip"/></param>
            <param name="skipType">The value from <see cref="P:Xunit.v3.IFactAttribute.SkipType"/> </param>
            <param name="skipUnless">The value from <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/></param>
            <param name="skipWhen">The value from <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/></param>
            <param name="traits">The optional traits list.</param>
            <param name="sourceFilePath">The optional source file in where this test case originated.</param>
            <param name="sourceLineNumber">The optional source line number where this test case originated.</param>
            <param name="timeout">The optional timeout for the test case (in milliseconds).</param>
        </member>
        <member name="P:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase.Culture">
            <summary>
            Gets the culture the theory will be run under.
            </summary>
        </member>
        <member name="M:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase.PostInvoke">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase.PreInvoke">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CulturedXunitDelayEnumeratedTheoryTestCase.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.CulturedXunitTestCase">
            <summary>
            An instance of <see cref="T:Xunit.v3.XunitTestCase"/> which has a cultural override.
            </summary>
        </member>
        <member name="M:Xunit.v3.CulturedXunitTestCase.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.CulturedXunitTestCase.#ctor(System.String,Xunit.v3.IXunitTestMethod,System.String,System.String,System.Boolean,System.Type[],System.String,System.Type,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}},System.Object[],System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.CulturedXunitTestCase"/> class.
            </summary>
            <param name="culture">The culture to run the test under</param>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="testCaseDisplayName">The display name for the test case.</param>
            <param name="uniqueID">The unique ID for the test case.</param>
            <param name="explicit">Indicates whether the test case was marked as explicit.</param>
            <param name="skipExceptions">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipExceptions"/>.</param>
            <param name="skipReason">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.Skip"/>.</param>
            <param name="skipType">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipType"/>.</param>
            <param name="skipUnless">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/>.</param>
            <param name="skipWhen">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/>.</param>
            <param name="traits">The optional traits list.</param>
            <param name="testMethodArguments">The optional arguments for the test method.</param>
            <param name="sourceFilePath">The optional source file in where this test case originated.</param>
            <param name="sourceLineNumber">The optional source line number where this test case originated.</param>
            <param name="timeout">The optional timeout for the test case (in milliseconds).</param>
        </member>
        <member name="P:Xunit.v3.CulturedXunitTestCase.Culture">
            <summary>
            Gets the culture the test case will be run under.
            </summary>
        </member>
        <member name="M:Xunit.v3.CulturedXunitTestCase.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CulturedXunitTestCase.PostInvoke">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CulturedXunitTestCase.PreInvoke">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.CulturedXunitTestCase.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.ExecutionErrorTestCase">
            <summary>
            A simple implementation of <see cref="T:Xunit.v3.IXunitTestCase"/> that can be used to report an error
            rather than running a test.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExecutionErrorTestCase.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.ExecutionErrorTestCase.#ctor(Xunit.v3.IXunitTestMethod,System.String,System.String,System.String)">
            <summary>
            Please use the constructor which accepts sourceFilePath and sourceLineNumber. This overload will be removed in the next major version.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExecutionErrorTestCase.#ctor(Xunit.v3.IXunitTestMethod,System.String,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.ExecutionErrorTestCase"/> class.
            </summary>
            <param name="testMethod">The test method.</param>
            <param name="testCaseDisplayName">The display name for the test case.</param>
            <param name="uniqueID">The unique ID for the test case.</param>
            <param name="sourceFilePath">The source filename, if known</param>
            <param name="sourceLineNumber">The source line number, if known</param>
            <param name="errorMessage">The error message to report for the test.</param>
        </member>
        <member name="P:Xunit.v3.ExecutionErrorTestCase.ErrorMessage">
            <summary>
            Gets the error message that will be displayed when the test is run.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExecutionErrorTestCase.CreateTests">
            <summary>
            Throws the expected error mesage rather than creating tests.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExecutionErrorTestCase.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.ExecutionErrorTestCase.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.RunSummary">
            <summary>
            Represents the statistical summary from a run of one or more tests.
            </summary>
        </member>
        <member name="F:Xunit.v3.RunSummary.Total">
            <summary>
            The total number of tests run.
            </summary>
        </member>
        <member name="F:Xunit.v3.RunSummary.Failed">
            <summary>
            The number of failed tests.
            </summary>
        </member>
        <member name="F:Xunit.v3.RunSummary.Skipped">
            <summary>
            The number of skipped tests.
            </summary>
        </member>
        <member name="F:Xunit.v3.RunSummary.NotRun">
            <summary>
            The number of tests that were not run.
            </summary>
        </member>
        <member name="F:Xunit.v3.RunSummary.Time">
            <summary>
            The total time taken to run the tests, in seconds.
            </summary>
        </member>
        <member name="M:Xunit.v3.RunSummary.Aggregate(Xunit.v3.RunSummary)">
            <summary>
            Adds a run summary's totals into this run summary.
            </summary>
            <param name="other">The run summary to be added.</param>
        </member>
        <member name="M:Xunit.v3.RunSummary.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitDelayEnumeratedTheoryTestCase">
            <summary>
            Represents a test case which runs multiple tests for theory data, either because theory
            data pre-enumeration was disabled or because the data was not serializable.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitDelayEnumeratedTheoryTestCase.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitDelayEnumeratedTheoryTestCase.SkipTestWithoutData">
            <summary>
            Gets a flag which indicates whether a theory without data is skipped rather than failed.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitDelayEnumeratedTheoryTestCase.#ctor(Xunit.v3.IXunitTestMethod,System.String,System.String,System.Boolean,System.Boolean,System.Type[],System.String,System.Type,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitDelayEnumeratedTheoryTestCase"/> class.
            </summary>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="testCaseDisplayName">The display name for the test case.</param>
            <param name="uniqueID">The optional unique ID for the test case; if not provided, will be calculated.</param>
            <param name="explicit">Indicates whether the test case was marked as explicit.</param>
            <param name="skipTestWithoutData">Set to <c>true</c> to skip if the test has no data, rather than fail.</param>
            <param name="skipExceptions">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipExceptions"/>.</param>
            <param name="skipReason">The value from <see cref="P:Xunit.v3.IFactAttribute.Skip"/></param>
            <param name="skipType">The value from <see cref="P:Xunit.v3.IFactAttribute.SkipType"/> </param>
            <param name="skipUnless">The value from <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/></param>
            <param name="skipWhen">The value from <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/></param>
            <param name="traits">The optional traits list.</param>
            <param name="sourceFilePath">The optional source file in where this test case originated.</param>
            <param name="sourceLineNumber">The optional source line number where this test case originated.</param>
            <param name="timeout">The optional timeout for the test case (in milliseconds).</param>
        </member>
        <member name="M:Xunit.v3.XunitDelayEnumeratedTheoryTestCase.CreateTests">
            <summary>
            Enumerates the theory data and creates tests to be run.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitDelayEnumeratedTheoryTestCase.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitDelayEnumeratedTheoryTestCase.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTest">
            <summary>
            An implementation of <see cref="T:Xunit.Sdk.ITest"/> for xUnit v3.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTest.#ctor(Xunit.v3.IXunitTestCase,Xunit.v3.IXunitTestMethod,System.Nullable{System.Boolean},System.String,System.Type,System.String,System.String,System.String,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyCollection{System.String}},System.Nullable{System.Int32},System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTest"/> class.
            </summary>
            <param name="testCase">The test case this test belongs to.</param>
            <param name="testMethod">The test method to be run; may differ from the test method embedded into the test case</param>
            <param name="explicit">A flag to indicate the test was marked as explicit; if not set, will fall back to the test case</param>
            <param name="skipReason">The skip reason for this test.</param>
            <param name="skipType">The type used for <paramref name="skipUnless"/> or <paramref name="skipWhen"/>.</param>
            <param name="skipUnless">The property used to determine if a test is skipped (<c>true</c> to run, <c>false</c> to skip)</param>
            <param name="skipWhen">The property used to determine if a test is skipped (<c>false</c> to run, <c>true</c> to skip)</param>
            <param name="testDisplayName">The display name for this test.</param>
            <param name="testIndex">The index of this test inside the test case. Used for computing <see cref="P:Xunit.v3.XunitTest.UniqueID"/>.</param>
            <param name="traits">The traits for the given test.</param>
            <param name="timeout">The timeout for the test; if not set, will fall back to the test case</param>
            <param name="testMethodArguments">The arguments to be passed to the test method</param>
        </member>
        <member name="M:Xunit.v3.XunitTest.#ctor(Xunit.v3.IXunitTestCase,Xunit.v3.IXunitTestMethod,System.Nullable{System.Boolean},System.String,System.Type,System.String,System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyCollection{System.String}},System.Nullable{System.Int32},System.Object[])">
            <summary>
            This constructor is for testing purposes only. Do not use in production code.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTest.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.SkipType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.SkipUnless">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.SkipWhen">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.TestCase">
            <summary>
            Gets the xUnit v3 test case.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTest.Xunit#Sdk#ITest#TestCase">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.TestDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.TestMethod">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.TestMethodArguments">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTest.UniqueID">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestAssembly">
            <summary>
            The default implementation of <see cref="T:Xunit.v3.IXunitTestAssembly"/> for xUnit.net v3.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestAssembly.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestAssembly.#ctor(System.Reflection.Assembly,System.String,System.Version,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestAssembly"/> class.
            </summary>
            <param name="assembly">The test assembly.</param>
            <param name="configFileName">The optional configuration filename</param>
            <param name="version">The version number of the assembly (defaults to "0.0.0.0")</param>
            <param name="uniqueID">The unique ID for the test assembly (only used to override default behavior in testing scenarios)</param>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.AssemblyFixtureTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.AssemblyName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.AssemblyPath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.BeforeAfterTestAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.CollectionBehavior">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.CollectionDefinitions">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.ConfigFilePath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.ModuleVersionID">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.TargetFramework">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.TestCaseOrderer">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.TestCollectionOrderer">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.UniqueID">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssembly.Version">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssembly.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssembly.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCase">
            <summary>
            Default implementation of <see cref="T:Xunit.v3.IXunitTestCase"/> for xUnit.net v3 that supports test methods decorated with
            <see cref="T:Xunit.FactAttribute"/>. Test methods decorated with derived attributes may use this as a base class
            to build from.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.#ctor(Xunit.v3.IXunitTestMethod,System.String,System.String,System.Boolean,System.Type[],System.String,System.Type,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}},System.Object[],System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestCase"/> class.
            </summary>
            <param name="testMethod">The test method this test case belongs to.</param>
            <param name="testCaseDisplayName">The display name for the test case.</param>
            <param name="uniqueID">The unique ID for the test case.</param>
            <param name="explicit">Indicates whether the test case was marked as explicit.</param>
            <param name="skipExceptions">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipExceptions"/>.</param>
            <param name="skipReason">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.Skip"/>.</param>
            <param name="skipType">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipType"/>.</param>
            <param name="skipUnless">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/>.</param>
            <param name="skipWhen">The value obtained from <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/>.</param>
            <param name="traits">The optional traits list.</param>
            <param name="testMethodArguments">The optional arguments for the test method.</param>
            <param name="sourceFilePath">The optional source file in where this test case originated.</param>
            <param name="sourceLineNumber">The optional source line number where this test case originated.</param>
            <param name="timeout">The optional timeout for the test case (in milliseconds).</param>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.DisposalTracker">
            <summary>
            Used to dispose of test method arguments when the test case is disposed.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.SkipExceptions">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.SkipType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.SkipUnless">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.SkipWhen">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.SourceFilePath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.SourceLineNumber">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestCaseDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestClass">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestClassMetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestClassNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestClassSimpleName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestMethod">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestMethodArguments">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestMethodArity">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestMethodMetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestMethodName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestMethodParameterTypesVSTest">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.TestMethodReturnTypeVSTest">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.Traits">
            <summary>
            Gets the traits associated with this test case.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.Xunit#Sdk#ITestCaseMetadata#Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCase.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.CreateTests">
            <remarks>
            By default, this method returns a single <see cref="T:Xunit.v3.XunitTest"/> that is appropriate
            for a one-to-one mapping between test and test case. Override this method to change the
            tests that are associated with this test case.
            </remarks>
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <summary>
            Called when the test case should populate itself with data from the serialization info.
            </summary>
            <param name="info">The info to get the object data from</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.PostInvoke">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.PreInvoke">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.ResolveTestMethodArguments(System.Reflection.ParameterInfo[],System.Object[])">
            <summary>
            Computes values from the test case and resolves the test method arguments just before execution.
            Typically used from <see cref="M:Xunit.v3.XunitTestCase.CreateTests"/> so that the executed test has an appropriately
            typed argument, regardless of the type that was used to serialize the argument.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCase.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <summary>
            Called when the test case should store its serialized values into the serialization info.
            </summary>
            <param name="info">The info to store the object data into</param>
        </member>
        <member name="T:Xunit.v3.XunitTestClass">
            <summary>
            Default implementation of <see cref="T:Xunit.v3.IXunitTestClass"/> for xUnit v3 tests based on reflection.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestClass.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestClass.#ctor(System.Type,Xunit.v3.IXunitTestCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestClass"/> class.
            </summary>
            <param name="class">The test class</param>
            <param name="testCollection">The test collection the class belongs to</param>
            <param name="uniqueID">The unique ID for the test class (only used to override default behavior in testing scenarios)</param>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.BeforeAfterTestAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.Class">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.ClassFixtureTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.Constructors">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.Methods">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.TestCaseOrderer">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.TestClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.TestClassNamespace">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.TestClassSimpleName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.Xunit#Sdk#ITestClass#TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestClass.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestClass.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestClass.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCollection">
            <summary>
            The default implementation of <see cref="T:Xunit.v3.IXunitTestCollection"/> for xUnit.net v3.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCollection.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCollection.#ctor(Xunit.v3.IXunitTestAssembly,System.Type,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestCollection"/> class.
            </summary>
            <param name="testAssembly">The test assembly the collection belongs to</param>
            <param name="collectionDefinition">The optional type which contains the collection definition</param>
            <param name="disableParallelization">A flag to indicate whether this test collection opts out of parallelization</param>
            <param name="displayName">The display name for the test collection</param>
            <param name="uniqueID">The unique ID for the test collection (only used to override default behavior in testing scenarios)</param>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.BeforeAfterTestAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.ClassFixtureTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.CollectionDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.CollectionFixtureTypes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.DisableParallelization">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.TestAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.TestCaseOrderer">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.TestCollectionClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.TestCollectionDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestCollection.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCollection.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCollection.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestMethod">
            <summary>
            The default implementation of <see cref="T:Xunit.v3.IXunitTestMethod"/> for xUnit.net v3 based on <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.#ctor">
            <summary>
            Called by the de-serializer; should only be called by deriving classes for de-serialization purposes
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.#ctor(Xunit.v3.IXunitTestClass,System.Reflection.MethodInfo,System.Object[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestMethod"/> class.
            </summary>
            <param name="testClass">The test class</param>
            <param name="method">The test method</param>
            <param name="testMethodArguments">The arguments to pass to the test method</param>
            <param name="uniqueID">The unique ID for the test method (only used to override default behavior in testing scenarios)</param>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.BeforeAfterTestAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.DataAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.FactAttributes">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.IsGenericMethodDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.Method">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.MethodArity">
            <summary>
            Gets the arity (number of generic types) of the test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.MethodName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.TestClass">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.TestMethodArguments">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestMethod.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.Deserialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.GetDisplayName(System.String,System.Object[],System.Type[])">
            <summary>
            Please use the version which accepts label. This overload will be removed in the next major version.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.GetDisplayName(System.String,System.String,System.Object[],System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.MakeGenericMethod(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.ResolveGenericTypes(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.ResolveMethodArguments(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestMethod.Serialize(Xunit.Sdk.IXunitSerializationInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.ContextBase">
            <summary>
            Base class for all execution pipeline context classes.
            </summary>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
        </member>
        <member name="M:Xunit.v3.ContextBase.#ctor(Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Base class for all execution pipeline context classes.
            </summary>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
        </member>
        <member name="P:Xunit.v3.ContextBase.Aggregator">
            <summary>
            Gets the aggregator used for reporting exceptions.
            </summary>
        </member>
        <member name="P:Xunit.v3.ContextBase.CancellationTokenSource">
            <summary>
            Gets the cancellation token source used for cancelling test execution.
            </summary>
        </member>
        <member name="P:Xunit.v3.ContextBase.ExplicitOption">
            <summary>
            Gets a flag which indicates how explicit tests should be handled.
            </summary>
        </member>
        <member name="P:Xunit.v3.ContextBase.MessageBus">
            <summary>
            Gets the message bus to send execution engine messages to.
            </summary>
        </member>
        <member name="M:Xunit.v3.ContextBase.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.ContextBase.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestAssemblyRunner`4">
            <summary>
            A base class that provides default behavior when running tests in an assembly. It groups the tests
            by test collection, and then runs the individual test collections.
            </summary>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTestAssembly">The type of the test assembly object model. Must derive
            from <see cref="T:Xunit.Sdk.ITestAssembly"/>.</typeparam>
            <typeparam name="TTestCollection">The type of the test collection object model. Must derive
            from <see cref="T:Xunit.Sdk.ITestCollection"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestAssemblyRunner`4"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.FailTestCollection(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3},System.Exception)">
            <summary>
            Fails the tests from a test collection due to an exception.
            </summary>
            <remarks>
            By default, using <see cref="T:Xunit.v3.XunitRunnerHelper"/> to fail the test cases.
            </remarks>
            <param name="ctxt">The context that describes the current test assembly</param>
            <param name="testCollection">The test collection that is being failed.</param>
            <param name="testCases">The test cases that belong to the test collection.</param>
            <param name="exception">The exception that was caused during startup.</param>
            <returns>Returns summary information about the tests that were failed.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.GetTestFrameworkDisplayName(`0)">
            <summary>
            Gets the display name for the test framework. Used to populate <see cref="T:Xunit.v3.TestAssemblyStarting"/>
            during <see cref="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyStarting(`0)"/>.
            </summary>
            <param name="ctxt">The context that describes the current test assembly</param>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.OnError(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown by <see cref="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyFinished(`0,Xunit.v3.RunSummary)"/>. By default, this
            sends <see cref="T:Xunit.v3.ErrorMessage"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>. It must never throw an exception.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that was thrown by <see cref="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyFinished(`0,Xunit.v3.RunSummary)"/>.</param>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyCleanupFailure(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown while cleaning up, after the test assembly
            has run. By default this sends <see cref="T:Xunit.v3.TestAssemblyCleanupFailure"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown are
            converted into fatal exception messages (via <see cref="T:Xunit.Sdk.IErrorMessage"/>) and sent to the message
            bus in <paramref name="ctxt"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test assembly</param>
            <param name="exception">The exception that caused the cleanup failure (may be an instance
            of <see cref="T:System.AggregateException"/> if more than one exception occurred).</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyFinished(`0,Xunit.v3.RunSummary)">
            <summary>
            This method will be called when the test assembly has finished running. By default this sends
            <see cref="T:Xunit.v3.TestAssemblyFinished"/>. Override this to enable any extensibility related to test
            assembly finish.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown will
            be reported as top-level exceptions. Any exceptions that are present in the aggregator (presumably
            from derived implementations of this method, <see cref="M:Xunit.v3.TestAssemblyRunner`4.RunTestCollections(`0,System.Exception)"/>, or
            <see cref="M:Xunit.v3.TestAssemblyRunner`4.RunTestCollection(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3})"/>) will invoke <see cref="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyCleanupFailure(`0,System.Exception)"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test assembly</param>
            <param name="summary">The execution summary for the test assembly</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyStarting(`0)">
            <summary>
            This method will be called before the test assembly has started running. TBy default this sends
            <see cref="T:Xunit.v3.TestAssemblyStarting"/>. Override this to enable any extensibility related to test
            assembly start.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Initializing"/> and any exceptions thrown will
            contribute to test assembly failure (and will prevent the test assembly from running). Even if this
            method records exceptions, <see cref="M:Xunit.v3.TestAssemblyRunner`4.OnTestAssemblyFinished(`0,Xunit.v3.RunSummary)"/> will be called.
            </remarks>
            <param name="ctxt">The context that describes the current test assembly</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.OrderTestCollections(`0)">
            <summary>
            Orders the test collections in the assembly. By default does not re-order the test collections.
            Override this to provide custom test collection ordering.
            </summary>
            <param name="ctxt">The context that describes the current test assembly</param>
            <returns>Test collections in run order (and associated, not-yet-ordered test cases).</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.Run(`0)">
            <summary>
            Runs the tests in the test assembly.
            </summary>
            <param name="ctxt">The context that describes the current test assembly</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.RunTestCollections(`0,System.Exception)">
            <summary>
            Runs the list of test collections. By default, groups the tests by collection and runs them synchronously.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test assembly cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test assembly</param>
            <param name="exception">The exception that was caused during startup; should be used as an indicator that the
            downstream tests should fail with the provided exception rather than going through standard execution</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.RunTestCollection(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3})">
            <summary>
            Override this method to run the tests in an individual test collection.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test assembly cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test assembly</param>
            <param name="testCollection">The test collection that is being run.</param>
            <param name="testCases">The test cases that belong to the test collection.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunner`4.SetTestContext(`0,Xunit.TestEngineStatus)">
            <summary>
            Sets the current <see cref="T:Xunit.TestContext"/> for the current test assembly and the given test assembly status.
            </summary>
            <param name="ctxt">The context that describes the current test assembly</param>
            <param name="testAssemblyStatus">The current test assembly status.</param>
        </member>
        <member name="T:Xunit.v3.TestAssemblyRunnerContext`2">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestAssemblyRunner`4"/>.
            </summary>
            <typeparam name="TTestAssembly">The type of the test assembly object model. Must derive
            from <see cref="T:Xunit.Sdk.ITestAssembly"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
            <param name="testAssembly">The test assembly</param>
            <param name="testCases">The test cases from the assembly</param>
            <param name="executionMessageSink">The message sink to send execution messages to</param>
            <param name="executionOptions">The options used during test execution</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunnerContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Threading.CancellationToken)">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestAssemblyRunner`4"/>.
            </summary>
            <typeparam name="TTestAssembly">The type of the test assembly object model. Must derive
            from <see cref="T:Xunit.Sdk.ITestAssembly"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
            <param name="testAssembly">The test assembly</param>
            <param name="testCases">The test cases from the assembly</param>
            <param name="executionMessageSink">The message sink to send execution messages to</param>
            <param name="executionOptions">The options used during test execution</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.Aggregator">
            <summary>
            Gets the aggregator used for reporting exceptions.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.CancellationTokenSource">
            <summary>
            Gets the cancellation token source used for cancelling test execution.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.ExecutionMessageSink">
            <summary>
            Gets the execution message sink provided by the runner. This is typically wrapped into
            the message bus by <see cref="M:Xunit.v3.TestAssemblyRunnerContext`2.CreateMessageBus"/>.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.ExecutionOptions">
            <summary>
            Gets the execution options provided by the runner.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.MessageBus">
            <summary>
            Gets the message bus to send execution engine messages to.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.TargetFramework">
            <summary>
            Gets the target framework that the test assembly is targeting. By default, this returns <c>null</c>.
            Test frameworks that are based on .NET runtime assemblies can look for <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute"/>
            decorated at the assembly level, which is added automatically by the compiler.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.TestAssembly">
            <summary>
            Gets the assembly that is being executed.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.TestCases">
            <summary>
            Gets the test cases associated with this test assembly.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestAssemblyRunnerContext`2.TestEnvironment">
            <summary>
            Gets the environment that the test are running in. By default, returns a string which
            indicates process bitness, processor architecture (when known), and the description of
            the runtime environment (from <see cref="P:System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription"/>).
            </summary>
            <remarks>
            Example: "64-bit (x64) .NET 8.0.11"
            </remarks>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunnerContext`2.CreateMessageBus">
            <summary>
            Creates the message bus to be used for test execution. By default, it inspects
            the options for the <see cref="F:Xunit.Sdk.TestOptionsNames.Execution.SynchronousMessageReporting"/>
            flag, and if present, creates a message bus that ensures all messages are delivered
            on the same thread.
            </summary>
            <returns>The message bus.</returns>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunnerContext`2.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestAssemblyRunnerContext`2.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCaseRunner`3">
            <summary>
            A base class that provides default behavior when running test cases which are assumed
            to result in one or more tests (that implement <see cref="T:Xunit.Sdk.ITest"/>).
            </summary>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
            <typeparam name="TTest">The type of the test that is generated from the test case. Must
            derive from <see cref="T:Xunit.Sdk.ITest"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestCaseRunner`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestCaseRunner`3"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestCaseRunner`3.FailTest(`0,`2,System.Exception)">
            <summary>
            Override this method to fail an individual test.
            </summary>
            <remarks>
            By default, uses <see cref="T:Xunit.v3.XunitRunnerHelper"/> to fail the test cases.
            </remarks>
            <param name="ctxt">The context that describes the current test case</param>
            <param name="test">The test to be failed.</param>
            <param name="exception">The exception that was caused during startup.</param>
            <returns>Returns summary information about the test case run.</returns>
        </member>
        <member name="M:Xunit.v3.TestCaseRunner`3.RunTest(`0,`2)">
            <summary>
            Override this method to run an individual test.
            </summary>
            <param name="ctxt">The context that describes the current test method</param>
            <param name="test">The test to be run.</param>
            <returns>Returns summary information about the test case run.</returns>
        </member>
        <member name="M:Xunit.v3.TestCaseRunner`3.RunTestCase(`0,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCaseRunnerBase`2">
            <summary>
            A base class that provides default behavior when running test cases.
            </summary>
            <remarks>
            This class does not make any test-related assumptions about test cases, only that
            at some point, a test case will be "run" and results will be provided. As such, it
            has no definitions that related to tests (or <see cref="T:Xunit.Sdk.ITest"/>). The intention with
            this base class is that it can serve as a base for non-traditional test cases, such
            as injecting errors into the test pipeline during discovery that aren't uncovered
            until execution time.
            </remarks>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestCaseRunnerBase`2"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.OnError(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown by <see cref="M:Xunit.v3.TestCaseRunnerBase`2.OnTestCaseFinished(`0,Xunit.v3.RunSummary)"/>. By default, this
            sends <see cref="T:Xunit.v3.ErrorMessage"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>. It must never throw an exception.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that was thrown by <see cref="M:Xunit.v3.TestCaseRunnerBase`2.OnTestCaseFinished(`0,Xunit.v3.RunSummary)"/>.</param>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.OnTestCaseCleanupFailure(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown while cleaning up, after the test
            case has run. By default, this sends <see cref="T:Xunit.v3.TestCaseCleanupFailure"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown are
            converted into fatal exception messages (via <see cref="T:Xunit.Sdk.IErrorMessage"/>) and sent to the message
            bus in <paramref name="ctxt"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test case</param>
            <param name="exception">The exception that caused the cleanup failure (may be an instance
            of <see cref="T:System.AggregateException"/> if more than one exception occurred).</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.OnTestCaseFinished(`0,Xunit.v3.RunSummary)">
            <summary>
            This method will be called when the test case has finished running. By default, this sends
            <see cref="T:Xunit.v3.TestCaseFinished"/>. Override this to enable any extensibility related to test
            case finish.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown will
            be reported as top-level exceptions. Any exceptions that are present in the aggregator (presumably
            from derived implementations of this method or <see cref="M:Xunit.v3.TestCaseRunnerBase`2.RunTestCase(`0,System.Exception)"/>) will invoke
            <see cref="M:Xunit.v3.TestCaseRunnerBase`2.OnTestCaseCleanupFailure(`0,System.Exception)"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test case</param>
            <param name="summary">The execution summary for the test case.</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.OnTestCaseStarting(`0)">
            <summary>
            This method will be called before the test case has started running. TBy default, this sends
            <see cref="T:Xunit.v3.TestCaseStarting"/>. Override this to enable any extensibility related to test
            case start.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Initializing"/> and any exceptions thrown will
            contribute to test case failure (and will prevent the test case from running). Even if
            this method records exceptions, <see cref="M:Xunit.v3.TestCaseRunnerBase`2.OnTestCaseFinished(`0,Xunit.v3.RunSummary)"/> will be called.
            </remarks>
            <param name="ctxt">The context that describes the current test case</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.Run(`0)">
            <summary>
            Executes the administrivia around running a test case, while leaving the actual
            test case execution up to <see cref="M:Xunit.v3.TestCaseRunnerBase`2.RunTestCase(`0,System.Exception)"/>.
            </summary>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.RunTestCase(`0,System.Exception)">
            <summary>
            Override this to run the test case.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test case cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test case</param>
            <param name="exception">The exception that was caused during startup; should be used as an indicator that the
            downstream tests should fail with the provided exception rather than going through standard execution</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBase`2.SetTestContext(`0,Xunit.TestEngineStatus)">
            <summary>
            Sets the current <see cref="T:Xunit.TestContext"/> for the current test case and the given test case status.
            </summary>
            <remarks>
            This method must never throw. Behavior is undefined if it does. Instead, exceptions that
            occur should be recorded in the aggregator in <paramref name="ctxt"/> and will be reflected
            in a way that's appropriate based on when this method is called.
            </remarks>
            <param name="ctxt">The context that describes the current test case</param>
            <param name="testCaseStatus">The current test case status.</param>
        </member>
        <member name="T:Xunit.v3.TestCaseRunnerBaseContext`1">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestCaseRunnerBase`2"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerBaseContext`1.#ctor(`0,Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestCaseRunnerBase`2"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="P:Xunit.v3.TestCaseRunnerBaseContext`1.TestCase">
            <summary>
            Gets the test case that is being executed.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestCaseRunnerContext`2">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestCaseRunner`3"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
            <typeparam name="TTest">The type of the test that is generated from the test case. Must
            derive from <see cref="T:Xunit.Sdk.ITest"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestCaseRunnerContext`2.#ctor(`0,Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestCaseRunner`3"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
            <typeparam name="TTest">The type of the test that is generated from the test case. Must
            derive from <see cref="T:Xunit.Sdk.ITest"/>.</typeparam>
        </member>
        <member name="P:Xunit.v3.TestCaseRunnerContext`2.Tests">
            <summary>
            Gets the tests for the given test case.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestClassRunner`4">
            <summary>
            A base class that provides default behavior when running tests in a test class. It groups the tests
            by test method, and then runs the individual test methods.
            </summary>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTestClass">The type of the test class used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestClass"/>.</typeparam>
            <typeparam name="TTestMethod">The type of the test method used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestMethod"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestClassRunner`4"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.CreateTestClassConstructorArguments(`0)">
            <summary>
            Creates the arguments for the test class constructor. By default just returns an empty
            set of arguments. Override to find the arguments for the constructor.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Initializing"/> and any exceptions thrown will
            contribute to test class failure (and will prevent the test class from running)
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <returns>The test class constructor arguments.</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.FailTestMethod(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3},System.Object[],System.Exception)">
            <summary>
            Fails the tests from a test method due to an exception.
            </summary>
            <remarks>
            By default, using <see cref="T:Xunit.v3.XunitRunnerHelper"/> to fail the test cases.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="testMethod">The test method that contains the test cases. May be <c>null</c> for test cases that do not
            support classes and methods.</param>
            <param name="testCases">The test cases to be failed.</param>
            <param name="constructorArguments">The constructor arguments that would have been used to create the test class.</param>
            <param name="exception">The exception that was caused during startup.</param>
            <returns>Returns summary information about the tests that were failed.</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.OnError(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown by <see cref="M:Xunit.v3.TestClassRunner`4.OnTestClassFinished(`0,Xunit.v3.RunSummary)"/>. By default, this
            sends <see cref="T:Xunit.v3.ErrorMessage"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>. It must never throw an exception.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that was thrown by <see cref="M:Xunit.v3.TestClassRunner`4.OnTestClassFinished(`0,Xunit.v3.RunSummary)"/>.</param>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.OnTestClassCleanupFailure(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown while cleaning up, after the test class
            has run. By default, this sends <see cref="T:Xunit.v3.TestClassCleanupFailure"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown are
            converted into fatal exception messages (via <see cref="T:Xunit.Sdk.IErrorMessage"/>) and sent to the message
            bus in <paramref name="ctxt"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that caused the cleanup failure (may be an instance
            of <see cref="T:System.AggregateException"/> if more than one exception occurred).</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.OnTestClassFinished(`0,Xunit.v3.RunSummary)">
            <summary>
            This method will be called when the test class has finished running. By default, this sends
            <see cref="T:Xunit.v3.TestClassFinished"/>. Override this to enable any extensibility related to test
            class finish.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown will
            be reported as top-level exceptions. Any exceptions that are present in the aggregator (presumably
            from derived implementations of this method, <see cref="M:Xunit.v3.TestClassRunner`4.RunTestMethods(`0,System.Exception)"/>, or <see cref="M:Xunit.v3.TestClassRunner`4.RunTestMethod(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3},System.Object[])"/>)
            will invoke <see cref="M:Xunit.v3.TestClassRunner`4.OnTestClassCleanupFailure(`0,System.Exception)"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="summary">The execution summary for the test class</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.OnTestClassStarting(`0)">
            <summary>
            This method will be called before the test class has started running. By default, this sends
            <see cref="T:Xunit.v3.TestClassStarting"/>. Override this to enable any extensibility related to test
            class start.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Initializing"/> and any exceptions thrown will
            contribute to test class failure (and will prevent the test class from running). Even if
            this method records exceptions, <see cref="M:Xunit.v3.TestClassRunner`4.OnTestClassFinished(`0,Xunit.v3.RunSummary)"/> will be called.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.OrderTestCases(`0)">
            <summary>
            Orders the test cases in the class. By default does not re-order the test cases.
            Override this to provide custom test case ordering.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test class failure
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.Run(`0)">
            <summary>
            Runs the tests in the test class.
            </summary>
            <param name="ctxt">The context that describes the current test class</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.RunTestMethods(`0,System.Exception)">
            <summary>
            Runs the list of test methods. By default, orders the tests, groups them by method
            and runs them synchronously.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test class cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that was caused during startup; should be used as an indicator that the
            downstream tests should fail with the provided exception rather than going through standard execution</param>
            <returns>Returns summary information about the tests that were run</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.RunTestMethod(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3},System.Object[])">
            <summary>
            Override this method to run the tests in an individual test method.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test class cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="testMethod">The test method that contains the test cases. May be <c>null</c> for test cases that do not
            support classes and methods.</param>
            <param name="testCases">The test cases to be run.</param>
            <param name="constructorArguments">The constructor arguments that will be used to create the test class.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestClassRunner`4.SetTestContext(`0,Xunit.TestEngineStatus)">
            <summary>
            Sets the current <see cref="T:Xunit.TestContext"/> for the current test class and the given test class status.
            </summary>
            <remarks>
            This method must never throw. Behavior is undefined if it does. Instead, exceptions that
            occur should be recorded in the aggregator in <paramref name="ctxt"/> and will be reflected
            in a way that's appropriate based on when this method is called.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="testClassStatus">The current test class status.</param>
        </member>
        <member name="T:Xunit.v3.TestClassRunnerContext`2">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestClassRunnerContext`2"/>.
            </summary>
            <param name="testClass">The test class</param>
            <param name="testCases">The test from the test class</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestClass">The type of the test class used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestClass"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestClassRunnerContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestClassRunnerContext`2"/>.
            </summary>
            <param name="testClass">The test class</param>
            <param name="testCases">The test from the test class</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestClass">The type of the test class used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestClass"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="P:Xunit.v3.TestClassRunnerContext`2.TestCases">
            <summary>
            Gets the test cases associated with the test class.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestClassRunnerContext`2.TestClass">
            <summary>
            Gets the test class that is being executed.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestCollectionRunner`4">
            <summary>
            A base class that provides default behavior when running tests in a test collection. It groups the tests
            by test class, and then runs the individual test classes.
            </summary>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTestCollection">The type of the test collection used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestCollection"/>.</typeparam>
            <typeparam name="TTestClass">The type of the test class used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestClass"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestCollectionRunner`4"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.FailTestClass(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3},System.Exception)">
            <summary>
            Fails the tests from a test class due to an exception.
            </summary>
            <remarks>
            By default, using <see cref="T:Xunit.v3.XunitRunnerHelper"/> to fail the test cases.
            </remarks>
            <param name="ctxt">The context that describes the current test collection</param>
            <param name="testClass">The test class that is being failed. May be <c>null</c> for test cases that do not
            support classes and methods.</param>
            <param name="testCases">The test cases to be failed.</param>
            <param name="exception">The exception that was caused during startup.</param>
            <returns>Returns summary information about the tests that were failed.</returns>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.OnError(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown by <see cref="M:Xunit.v3.TestCollectionRunner`4.OnTestCollectionFinished(`0,Xunit.v3.RunSummary)"/>. By default, this
            sends <see cref="T:Xunit.v3.ErrorMessage"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>. It must never throw an exception.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that was thrown by <see cref="M:Xunit.v3.TestCollectionRunner`4.OnTestCollectionFinished(`0,Xunit.v3.RunSummary)"/>.</param>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.OnTestCollectionCleanupFailure(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown while cleaning up, after the test collection
            has run. By default, this sends <see cref="T:Xunit.v3.TestCollectionCleanupFailure"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown are
            converted into fatal exception messages (via <see cref="T:Xunit.Sdk.IErrorMessage"/>) and sent to the message
            bus in <paramref name="ctxt"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test collection</param>
            <param name="exception">The exception that caused the cleanup failure (may be an instance
            of <see cref="T:System.AggregateException"/> if more than one exception occurred).</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.OnTestCollectionFinished(`0,Xunit.v3.RunSummary)">
            <summary>
            This method will be called when the test collection has finished running. By default this sends
            <see cref="T:Xunit.v3.TestCollectionFinished"/>. Override this to enable any extensibility related to test
            collection finish.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown will
            be reported as top-level exceptions. Any exceptions that are present in the aggregator (presumably
            from derived implementations of this method, <see cref="M:Xunit.v3.TestCollectionRunner`4.RunTestClasses(`0,System.Exception)"/>, or <see cref="M:Xunit.v3.TestCollectionRunner`4.RunTestClass(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3})"/>)
            will invoke <see cref="M:Xunit.v3.TestCollectionRunner`4.OnTestCollectionCleanupFailure(`0,System.Exception)"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test collection</param>
            <param name="summary">The execution summary for the test collection</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.OnTestCollectionStarting(`0)">
            <summary>
            This method will be called before the test collection has started running. By default this sends
            <see cref="T:Xunit.v3.TestCollectionStarting"/>. Override this to enable any extensibility related to test
            collection start.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Initializing"/> and any exceptions thrown will
            contribute to test collection failure (and will prevent the test collection from running). Even if
            this method records exceptions, <see cref="M:Xunit.v3.TestCollectionRunner`4.OnTestCollectionFinished(`0,Xunit.v3.RunSummary)"/> will be called.
            </remarks>
            <param name="ctxt">The context that describes the current test collection</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.Run(`0)">
            <summary>
            Runs the tests in the test collection.
            </summary>
            <param name="ctxt">The context that describes the current test collection</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.RunTestClasses(`0,System.Exception)">
            <summary>
            Runs the list of test classes. By default, groups the tests by class and runs them synchronously.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test collection cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test collection</param>
            <param name="exception">The exception that was caused during startup; should be used as an indicator that the
            downstream tests should fail with the provided exception rather than going through standard execution</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.RunTestClass(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3})">
            <summary>
            Override this method to run the tests in an individual test class.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test collection cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test collection</param>
            <param name="testClass">The test class to be run. May be <c>null</c> for test cases that do not
            support classes and methods.</param>
            <param name="testCases">The test cases to be run.</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunner`4.SetTestContext(`0,Xunit.TestEngineStatus)">
            <summary>
            Sets the current <see cref="T:Xunit.TestContext"/> for the current test collection and the given test collection status.
            </summary>
            <param name="ctxt">The context that describes the current test collection</param>
            <param name="testCollectionStatus">The current test collection status.</param>
        </member>
        <member name="T:Xunit.v3.TestCollectionRunnerContext`2">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestCollectionRunner`4"/>.
            </summary>
            <param name="testCollection">The test collection</param>
            <param name="testCases">The test cases from the test collection</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestCollection">The type of the test collection used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestCollection"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestCollectionRunnerContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestCollectionRunner`4"/>.
            </summary>
            <param name="testCollection">The test collection</param>
            <param name="testCases">The test cases from the test collection</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestCollection">The type of the test collection used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestCollection"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="P:Xunit.v3.TestCollectionRunnerContext`2.TestCases">
            <summary>
            Gets the test cases that belong to the test collection.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestCollectionRunnerContext`2.TestCollection">
            <summary>
            Gets the test collection that is being executed.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestMethodRunner`3">
            <summary>
            A base class that provides default behavior when running tests in a test method.
            </summary>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTestMethod">The type of the test method used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestMethod"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestMethodRunner`3"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.FailTestCase(`0,`2,System.Exception)">
            <summary>
            Override this method to fail an individual test case.
            </summary>
            <remarks>
            By default, uses <see cref="T:Xunit.v3.XunitRunnerHelper"/> to fail the test cases.
            </remarks>
            <param name="ctxt">The context that describes the current test method</param>
            <param name="testCase">The test case to be failed.</param>
            <param name="exception">The exception that was caused during startup.</param>
            <returns>Returns summary information about the test case run.</returns>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.OnError(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown by <see cref="M:Xunit.v3.TestMethodRunner`3.OnTestMethodFinished(`0,Xunit.v3.RunSummary)"/>. By default, this
            sends <see cref="T:Xunit.v3.ErrorMessage"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>. It must never throw an exception.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that was thrown by <see cref="M:Xunit.v3.TestMethodRunner`3.OnTestMethodFinished(`0,Xunit.v3.RunSummary)"/>.</param>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.OnTestMethodCleanupFailure(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown while cleaning up, after the test method
            has run. By default, this sends <see cref="T:Xunit.v3.TestMethodCleanupFailure"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown are
            converted into fatal exception messages (via <see cref="T:Xunit.Sdk.IErrorMessage"/>) and sent to the message
            bus in <paramref name="ctxt"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test method</param>
            <param name="exception">The exception that caused the cleanup failure (may be an instance
            of <see cref="T:System.AggregateException"/> if more than one exception occurred).</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.OnTestMethodFinished(`0,Xunit.v3.RunSummary)">
            <summary>
            This method will be called when the test method has finished running. By default, this sends
            <see cref="T:Xunit.v3.TestMethodFinished"/>. Override this to enable any extensibility related to test
            method finish.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown will
            be reported as top-level exceptions. Any exceptions that are present in the aggregator (presumably
            from derived implementations of this method, <see cref="M:Xunit.v3.TestMethodRunner`3.RunTestCases(`0,System.Exception)"/>, or <see cref="M:Xunit.v3.TestMethodRunner`3.RunTestCase(`0,`2)"/>)
            will invoke <see cref="M:Xunit.v3.TestMethodRunner`3.OnTestMethodCleanupFailure(`0,System.Exception)"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test method</param>
            <param name="summary">The execution summary for the test method</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.OnTestMethodStarting(`0)">
            <summary>
            This method will be called before the test method has started running. By default, this sends
            <see cref="T:Xunit.v3.TestMethodStarting"/>. Override this to enable any extensibility related to test
            method start.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Initializing"/> and any exceptions thrown will
            contribute to test method failure (and will prevent the test method from running). Even if
            this method records exceptions, <see cref="M:Xunit.v3.TestMethodRunner`3.OnTestMethodFinished(`0,Xunit.v3.RunSummary)"/> will be called.
            </remarks>
            <param name="ctxt">The context that describes the current test method</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.Run(`0)">
            <summary>
            Runs the tests in the test method.
            </summary>
            <param name="ctxt">The context that describes the current test method</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.RunTestCases(`0,System.Exception)">
            <summary>
            Runs the list of test cases. By default, it runs the cases in order, synchronously.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test method cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test method</param>
            <param name="exception">The exception that was caused during startup; should be used as an indicator that the
            downstream tests should fail with the provided exception rather than going through standard execution</param>
            <returns>Returns summary information about the tests that were run.</returns>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.RunTestCase(`0,`2)">
            <summary>
            Override this method to run an individual test case.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test method cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test method</param>
            <param name="testCase">The test case to be run.</param>
            <returns>Returns summary information about the test case run.</returns>
        </member>
        <member name="M:Xunit.v3.TestMethodRunner`3.SetTestContext(`0,Xunit.TestEngineStatus)">
            <summary>
            Sets the current <see cref="T:Xunit.TestContext"/> for the current test method and the given test method status.
            </summary>
            <remarks>
            This method must never throw. Behavior is undefined if it does. Instead, exceptions that
            occur should be recorded in the aggregator in <paramref name="ctxt"/> and will be reflected
            in a way that's appropriate based on when this method is called.
            </remarks>
            <param name="ctxt">The context that describes the current test method</param>
            <param name="testMethodStatus">The current test method status.</param>
        </member>
        <member name="T:Xunit.v3.TestMethodRunnerContext`2">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestMethodRunner`3"/>.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="testCases">The test cases from the test method</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestMethod">The type of the test method used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestMethod"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestMethodRunnerContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestMethodRunner`3"/>.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="testCases">The test cases from the test method</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <typeparam name="TTestMethod">The type of the test method used by the test framework.
            Must derive from <see cref="T:Xunit.Sdk.ITestMethod"/>.</typeparam>
            <typeparam name="TTestCase">The type of the test case used by the test framework. Must
            derive from <see cref="T:Xunit.Sdk.ITestCase"/>.</typeparam>
        </member>
        <member name="P:Xunit.v3.TestMethodRunnerContext`2.TestCases">
            <summary>
            Gets the test cases that are derived from this test method.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestMethodRunnerContext`2.TestMethod">
            <summary>
            Gets the test method that is being executed.
            </summary>
        </member>
        <member name="T:Xunit.v3.TestRunner`2">
            <summary>
            A base class that provides default behavior when running a test. This includes support
            for skipping tests.
            </summary>
            <remarks>
            This class does not make any assumptions about what it means to run an individual test,
            just that at some point, the test will be run. The intention with this base class is that
            it can serve as a base for non-traditional tests.
            </remarks>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTest">The test type used by the test framework. Must derive from
            <see cref="T:Xunit.Sdk.ITest"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestRunner`2"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.CreateTestClass(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.CreateTestClassInstance(`0)">
            <summary>
            Override to creates and initialize the instance of the test class.
            </summary>
            <param name="ctxt">The context that describes the current test</param>
            <returns>Returns the test class instance, the sync context that is current after the creation,
            and a capture of the execution context so that it can be restored later.</returns>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure. Since the method is potentially async, we depend on it to capture and
            return the sync context so that it may be propagated appropriately.
            </remarks>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.DisposeTestClassInstance(`0,System.Object)">
            <summary>
            Disposes the test class instance. By default, will call <see cref="M:System.IAsyncDisposable.DisposeAsync"/> if
            it's implemented, falling back to <see cref="M:System.IDisposable.Dispose"/> if not.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown will
            contribute to test cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="testClassInstance">The test class instance</param>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.InvokeTest(`0,System.Object)">
            <summary>
            Invokes the test method and returns the amount of time spent executing.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="testClassInstance">The instance of the test class (may be <c>null</c> when
            running a static test method)</param>
            <returns>Returns the execution time (in seconds) spent running the test method.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.InvokeTestMethod(`0,System.Object)">
            <summary>
            Called by <see cref="M:Xunit.v3.TestRunner`2.InvokeTest(`0,System.Object)"/> to invoke the test method.
            </summary>
            <param name="ctxt">The context that describes the current test</param>
            <param name="testClassInstance">The instance of the test class (may be <c>null</c> when
            running a static test method)</param>
            <returns>Returns the result of the test method invocation. This value is evaluated to determine
            if it indicates asynchronous execution (by calling <see cref="M:Xunit.Sdk.AsyncUtility.TryConvertToValueTask(System.Object)"/>)
            so that <see cref="M:Xunit.v3.TestRunner`2.InvokeTest(`0,System.Object)"/> can wait on the resulting operation.</returns>
            <remarks>
            By default, this uses reflection to invoke the test method from the context. Developers can
            override this method to replace the test method invocation and/or to add operations before/after
            the test method is invoked.
            </remarks>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.IsTestClassCreatable(`0)">
            <summary>
            Override to determine whether a test class should be created.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure (and test class creation will not take place).
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.IsTestClassDisposable(`0,System.Object)">
            <summary>
            Determine whether a test class instance should be disposed. The pipeline will only call
            <see cref="M:Xunit.v3.TestRunner`2.DisposeTestClassInstance(`0,System.Object)"/> if this returns <c>true</c>. By default, looks to
            see if the class implements <see cref="T:System.IAsyncDisposable"/> or <see cref="T:System.IDisposable"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="testClassInstance">The test class instance</param>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.OnTestClassConstructionFinished(`0)">
            <summary>
            This method will be called when a test class instance has finished being constructed. By
            default, this sends <see cref="T:Xunit.v3.TestClassConstructionFinished"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The invoker context</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.OnTestClassConstructionStarting(`0)">
            <summary>
            This method will be called when a test class instance is about to be constructed. By
            default, this sends <see cref="T:Xunit.v3.TestClassConstructionStarting"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure (and test class creation will not take place).
            </remarks>
            <param name="ctxt">The invoker context</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.OnTestClassDisposeFinished(`0)">
            <summary>
            This method will be called when a test class instance has finished being disposed. By
            default, this sends <see cref="T:Xunit.v3.TestClassDisposeFinished"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The invoker context</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.OnTestClassDisposeStarting(`0)">
            <summary>
            This method will be called when a test class instance is about to be disposed. By
            default, this sends <see cref="T:Xunit.v3.TestClassDisposeStarting"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The invoker context</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.PostInvoke(`0)">
            <summary>
            Override this method to call code just after the test invocation has completed, but before
            the test class instance has been disposed.
            </summary>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.PreInvoke(`0)">
            <summary>
            Override this method to call code just after the test class instance has been created, but
            before the test has been invoked.
            </summary>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunner`2.RunTest(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestRunnerBase`2">
            <summary>
            A base class that provides default behavior when running a test. This includes support
            for skipping tests.
            </summary>
            <remarks>
            This class does not make any assumptions about what it means to run an individual test,
            just that at some point, the test will be run. The intention with this base class is that
            it can serve as a base for non-traditional tests (e.g., tests that are not derived from
            invoking CLR methods).
            </remarks>
            <typeparam name="TContext">The context type used by the runner</typeparam>
            <typeparam name="TTest">The test type used by the test framework. Must derive from
            <see cref="T:Xunit.Sdk.ITest"/>.</typeparam>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.TestRunner`2"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.GetAttachments(`0)">
            <summary>
            Gets the attachments for the test. If the test framework did not collect attachments
            (or does not support attachments), then it should return <c>null</c>.
            </summary>
            <remarks>
            By default, this method returns <see cref="P:Xunit.ITestContext.Attachments"/> from the current context.
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.GetTestOutput(`0)">
            <summary>
            Gets any output collected from the test after execution is complete. If the test framework
            did not collect any output, or does not support collecting output, then it should
            return <see cref="F:System.String.Empty"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.GetWarnings(`0)">
            <summary>
            Gets the warnings that will be reported during test results. By default, returns <c>null</c>,
            indicating that there were no warnings
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnError(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown by <see cref="M:Xunit.v3.TestRunnerBase`2.OnTestFinished(`0,System.Decimal,System.String,System.String[],System.Collections.Generic.IReadOnlyDictionary{System.String,Xunit.Sdk.TestAttachment})"/>. By default, this
            sends <see cref="T:Xunit.v3.ErrorMessage"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>. It must never throw an exception.
            </remarks>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="exception">The exception that was thrown by <see cref="M:Xunit.v3.TestRunnerBase`2.OnTestFinished(`0,System.Decimal,System.String,System.String[],System.Collections.Generic.IReadOnlyDictionary{System.String,Xunit.Sdk.TestAttachment})"/>.</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestCleanupFailure(`0,System.Exception)">
            <summary>
            This method is called when an exception was thrown while cleaning up, after the test has run.
            By default, this sends <see cref="T:Xunit.v3.TestCleanupFailure"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.CleaningUp"/> and any exceptions thrown are
            converted into fatal exception messages (via <see cref="T:Xunit.Sdk.IErrorMessage"/>) and sent to the message
            bus in <paramref name="ctxt"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="exception">The exception that caused the cleanup failure (may be an instance
            of <see cref="T:System.AggregateException"/> if more than one exception occurred).</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestFailed(`0,System.Exception,System.Decimal,System.String,System.String[])">
            <summary>
            This method is called when a test has failed. By default, this sends <see cref="T:Xunit.v3.TestFailed"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="exception">The exception that caused the test failure</param>
            <param name="executionTime">The time spent running the test</param>
            <param name="output">The output from the test</param>
            <param name="warnings">The warnings that were generated during the test</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestFinished(`0,System.Decimal,System.String,System.String[],System.Collections.Generic.IReadOnlyDictionary{System.String,Xunit.Sdk.TestAttachment})">
            <summary>
            This method is called just after the test has finished running. By default, this sends
            <see cref="T:Xunit.v3.TestFinished"/>. Override this to enable any extensibility related to test
            finish.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            be reported as top-level exceptions. Any exceptions that are present in the aggregator (presumably
            from derived implementations of this method, <see cref="M:Xunit.v3.TestRunnerBase`2.GetAttachments(`0)"/>, <see cref="M:Xunit.v3.TestRunnerBase`2.GetTestOutput(`0)"/>,
            <see cref="M:Xunit.v3.TestRunnerBase`2.GetWarnings(`0)"/>, or <see cref="M:Xunit.v3.TestRunnerBase`2.RunTest(`0)"/>) will invoke <see cref="M:Xunit.v3.TestRunnerBase`2.OnTestCleanupFailure(`0,System.Exception)"/>.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="executionTime">The time spent running the test</param>
            <param name="output">The output from the test</param>
            <param name="warnings">The warnings that were generated during the test</param>
            <param name="attachments">The attachments that were assocated with the test</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestNotRun(`0,System.String,System.String[])">
            <summary>
            This method is called when a test was not run. By default, this sends <see cref="T:Xunit.v3.TestNotRun"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="output">The output from the test</param>
            <param name="warnings">The warnings that were generated during the test</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestPassed(`0,System.Decimal,System.String,System.String[])">
            <summary>
            This method is called when a test has passed. By default, this sends <see cref="T:Xunit.v3.TestPassed"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="executionTime">The time spent running the test</param>
            <param name="output">The output from the test</param>
            <param name="warnings">The warnings that were generated during the test</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestSkipped(`0,System.String,System.Decimal,System.String,System.String[])">
            <summary>
            This method is called when a test is skipped. By default, this sends <see cref="T:Xunit.v3.TestSkipped"/>.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test cleanup failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="skipReason">The reason given for skipping the test</param>
            <param name="executionTime">The time spent running the test</param>
            <param name="output">The output from the test</param>
            <param name="warnings">The warnings that were generated during the test</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestStarting(`0)">
            <summary>
            This method is called just before the test is run. By default, this sends
            <see cref="T:Xunit.v3.TestStarting"/>. Override this to enable any extensibility related to test
            start.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Initializing"/> and any exceptions thrown will
            contribute to test failure (and will prevent the test from running).  Even if this method records
            exceptions, <see cref="M:Xunit.v3.TestRunnerBase`2.OnTestFinished(`0,System.Decimal,System.String,System.String[],System.Collections.Generic.IReadOnlyDictionary{System.String,Xunit.Sdk.TestAttachment})"/> will be called.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <returns>Return <c>true</c> if test execution should continue; <c>false</c> if it should be shut down.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.OnTestStarting(`0,System.Boolean,System.Int32)">
            <summary>
            This is a helper that allows passing explicit and timeout values, since those are not
            part of the core object model.
            </summary>
            <param name="ctxt">The context that describes the current test</param>
            <param name="explicit">A flag which indicates whether this is an explicit test</param>
            <param name="timeout">The timeout for running this test</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.Run(`0)">
            <summary>
            Runs the test.
            </summary>
            <remarks>
            This function is the primary orchestrator of test execution.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <returns>Returns summary information about the test that was run.</returns>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.RunTest(`0)">
            <summary>
            Override this method to run the test.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.SetTestContext(`0,Xunit.TestEngineStatus,Xunit.TestResultState,System.Object)">
            <summary>
            Sets the test context for the given test state and engine status.
            </summary>
            <remarks>
            This method must never throw. Behavior is undefined if it does. Instead, exceptions that
            occur should be recorded in the aggregator in <paramref name="ctxt"/> and will be reflected
            in a way that's appropriate based on when this method is called.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
            <param name="testStatus">The current engine status for the test</param>
            <param name="testState">The current test state</param>
            <param name="testClassInstance">The instance of the test class</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.ShouldTestRun(`0)">
            <summary>
            Override this to determine whether a test should be run or not (meaning, if you return <c>false</c>,
            it will be reported with a status of <see cref="F:Xunit.TestResult.NotRun"/>). By default, this method will
            return <c>true</c>. This is typically used to implement the ability to exclude specific tests
            unless they've been explicitly asked to be run.
            </summary>
            <remarks>
            This method runs during <see cref="F:Xunit.TestEngineStatus.Running"/> and any exceptions thrown will
            contribute to test failure.
            </remarks>
            <param name="ctxt">The context that describes the current test</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBase`2.UpdateTestContext(System.Object,Xunit.TestResultState)">
            <summary>
            Updates the test context values while the test is running, without swapping out the test context
            itself. This preserves the values in the existing context (notably, the cancellation token, which
            is wrapped and passed, and as such cannot be replaced).
            </summary>
        </member>
        <member name="T:Xunit.v3.TestRunnerBaseContext`1">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestRunnerBase`2"/>.
            </summary>
            <param name="test">The test</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="skipReason">The skip reason for the test, if it's being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerBaseContext`1.#ctor(`0,Xunit.v3.IMessageBus,System.String,Xunit.Sdk.ExplicitOption,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestRunnerBase`2"/>.
            </summary>
            <param name="test">The test</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="skipReason">The skip reason for the test, if it's being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
        </member>
        <member name="P:Xunit.v3.TestRunnerBaseContext`1.Test">
            <summary>
            Gets the test that's being invoked.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestRunnerBaseContext`1.GetSkipReason(System.Exception)">
            <summary>
            Gets the runtime skip reason for the test.
            </summary>
            <param name="exception">The exception that was thrown during test invocation</param>
            <returns>The skip reason, if the test is skipped; <c>null</c>, otherwise</returns>
        </member>
        <member name="T:Xunit.v3.TestRunnerContext`1">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestRunner`2"/>. This includes an assumption
            that a test means invoking a method on a class.
            </summary>
            <param name="test">The test</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="skipReason">The skip reason for the test, if it's being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="testMethod">The test method</param>
            <param name="testMethodArguments">The method arguments for the test method</param>
        </member>
        <member name="M:Xunit.v3.TestRunnerContext`1.#ctor(`0,Xunit.v3.IMessageBus,System.String,Xunit.Sdk.ExplicitOption,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Base context class for <see cref="T:Xunit.v3.TestRunner`2"/>. This includes an assumption
            that a test means invoking a method on a class.
            </summary>
            <param name="test">The test</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="skipReason">The skip reason for the test, if it's being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="testMethod">The test method</param>
            <param name="testMethodArguments">The method arguments for the test method</param>
        </member>
        <member name="P:Xunit.v3.TestRunnerContext`1.TestMethod">
            <summary>
            Gets the method that this test originated in.
            </summary>
        </member>
        <member name="P:Xunit.v3.TestRunnerContext`1.TestMethodArguments">
            <summary>
            Gets the arguments to be passed to the test method during invocation.
            </summary>
        </member>
        <member name="T:Xunit.v3.XunitTestAssemblyRunner">
            <summary>
            The test assembly runner for xUnit.net v3 tests.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestAssemblyRunner"/> class.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunner.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Xunit.v3.XunitTestAssemblyRunner"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunner.Run(Xunit.v3.IXunitTestAssembly,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Threading.CancellationToken)">
            <summary>
            Runs the test assembly.
            </summary>
            <param name="testAssembly">The test assembly to be executed.</param>
            <param name="testCases">The test cases associated with the test assembly.</param>
            <param name="executionMessageSink">The message sink to send execution messages to.</param>
            <param name="executionOptions">The execution options to use when running tests.</param>
            <param name="cancellationToken">The cancellation token used to cancel test execution.</param>
        </member>
        <member name="T:Xunit.v3.XunitTestAssemblyRunnerBase`4">
            <summary>
            The test assembly runner for xUnit.net v3 tests (with overridable context).
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBase`4.GetTestFrameworkDisplayName(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBase`4.OnTestAssemblyFinished(`0,Xunit.v3.RunSummary)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBase`4.OnTestAssemblyStarting(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBase`4.OrderTestCollections(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBase`4.RunTestCollections(`0,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBase`4.RunTestCollection(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestAssemblyRunnerBase`4"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
            <param name="testCases">The test cases from the assembly</param>
            <param name="executionMessageSink">The message sink to send execution messages to</param>
            <param name="executionOptions">The options used during test execution</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Threading.CancellationToken)">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestAssemblyRunnerBase`4"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
            <param name="testCases">The test cases from the assembly</param>
            <param name="executionMessageSink">The message sink to send execution messages to</param>
            <param name="executionOptions">The options used during test execution</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.AssemblyFixtureMappings">
            <summary>
            Gets the mapping manager for assembly-level fixtures.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.AssemblyTestCaseOrderer">
            <summary>
            Gets the assembly-level test case orderer, if one is present.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.AssemblyTestCollectionOrderer">
            <summary>
            Gets the assembly-level test collection orderer, if one is present.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.DisableParallelization">
            <summary>
            Gets a flag which indicates whether the user has requested that parallelization be disabled.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.ExplicitOption">
            <summary>
            Gets a flag which indicates how explicit tests should be handled.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.MaxParallelThreads">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel. If this returns a
            positive integer, that is the maximum number of threads; if it returns -1, that indicates that
            unlimited threads should be allowed.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.ParallelAlgorithm">
            <summary>
            Gets the algorithm used for parallelism.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.TestAssembly">
            <summary>
            Gets the assembly that is being executed.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.TargetFramework">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.TestEnvironment">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.RunTestCollection(Xunit.v3.IXunitTestCollection,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.v3.ITestCaseOrderer)">
            <summary>
            Delegation of <see cref="M:Xunit.v3.XunitTestAssemblyRunnerBase`4.RunTestCollection(`0,`2,System.Collections.Generic.IReadOnlyCollection{`3})"/>
            that properly obeys the parallel algorithm requirements.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerBaseContext`2.SetupParallelism">
            <summary>
            Sets up the mechanics for parallelism.
            </summary>
        </member>
        <member name="T:Xunit.v3.XunitTestAssemblyRunnerContext">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestAssemblyRunner"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
            <param name="testCases">The test cases from the assembly</param>
            <param name="executionMessageSink">The message sink to send execution messages to</param>
            <param name="executionOptions">The options used during test execution</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="M:Xunit.v3.XunitTestAssemblyRunnerContext.#ctor(Xunit.v3.IXunitTestAssembly,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.IMessageSink,Xunit.Sdk.ITestFrameworkExecutionOptions,System.Threading.CancellationToken)">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestAssemblyRunner"/>.
            </summary>
            <param name="testAssembly">The test assembly</param>
            <param name="testCases">The test cases from the assembly</param>
            <param name="executionMessageSink">The message sink to send execution messages to</param>
            <param name="executionOptions">The options used during test execution</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="T:Xunit.v3.XunitTestCaseRunner">
            <summary>
            The test case runner for xUnit.net v3 tests.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCaseRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestCaseRunner"/> class.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCaseRunner.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Xunit.v3.XunitTestCaseRunner"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCaseRunner.Run(Xunit.v3.IXunitTestCase,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTest},Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.String,System.String,Xunit.Sdk.ExplicitOption,System.Object[])">
            <summary>
            Runs the test case.
            </summary>
            <remarks>
            This entry point is used for both single-test (like <see cref="T:Xunit.FactAttribute"/> and individual data
            rows for <see cref="T:Xunit.TheoryAttribute"/> tests) and multi-test test cases (like <see cref="T:Xunit.TheoryAttribute"/>
            when pre-enumeration is disable or the theory data was not serializable).
            </remarks>
            <param name="testCase">The test case that this invocation belongs to.</param>
            <param name="tests">The tests for the test case.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="displayName">The display name of the test case.</param>
            <param name="skipReason">The skip reason, if the test is to be skipped.</param>
            <param name="explicitOption">A flag to indicate how explicit tests should be treated.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <returns>Returns summary information about the test that was run.</returns>
        </member>
        <member name="M:Xunit.v3.XunitTestCaseRunner.RunTest(Xunit.v3.XunitTestCaseRunnerContext,Xunit.v3.IXunitTest)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCaseRunnerBase`3">
            <summary>
            The test case runner for xUnit.net v3 tests (with overridable context).
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCaseRunnerBase`3.RunTestCase(`0,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCaseRunnerBaseContext`2">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCaseRunnerBase`3"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="tests">The tests for the test case</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="displayName">The display name of the test case</param>
            <param name="skipReason">The skip reason, if the test case is being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCaseRunnerBaseContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.String,System.String,Xunit.Sdk.ExplicitOption,System.Object[])">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCaseRunnerBase`3"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="tests">The tests for the test case</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="displayName">The display name of the test case</param>
            <param name="skipReason">The skip reason, if the test case is being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="P:Xunit.v3.XunitTestCaseRunnerBaseContext`2.BeforeAfterTestAttributes">
            <summary>
            Gets the list of <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/> instances for this test case.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCaseRunnerBaseContext`2.ConstructorArguments">
            <summary>
            Gets the arguments to pass to the constructor of the test class when creating it.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCaseRunnerBaseContext`2.DisplayName">
            <summary>
            Gets the display name of the test case.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCaseRunnerBaseContext`2.SkipReason">
            <summary>
            Gets the statically specified skip reason for the test. Note that this only covers values
            passed via <see cref="P:Xunit.v3.IFactAttribute.Skip"/>, and not dynamically skipped tests.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCaseRunnerBaseContext`2.Tests">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCaseRunnerContext">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCaseRunner"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="tests">The tests for the test case</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="displayName">The display name of the test case</param>
            <param name="skipReason">The skip reason, if the test case is being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCaseRunnerContext.#ctor(Xunit.v3.IXunitTestCase,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTest},Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.String,System.String,Xunit.Sdk.ExplicitOption,System.Object[])">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCaseRunner"/>.
            </summary>
            <param name="testCase">The test case</param>
            <param name="tests">The tests for the test case</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="displayName">The display name of the test case</param>
            <param name="skipReason">The skip reason, if the test case is being skipped</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="T:Xunit.v3.XunitTestClassRunner">
            <summary>
            The test class runner for xUnit.net v3 tests.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestClassRunner"/> class.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestClassRunner.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Xunit.v3.XunitTestClassRunner"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunner.Run(Xunit.v3.IXunitTestClass,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ITestCaseOrderer,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,Xunit.v3.FixtureMappingManager)">
            <summary>
            Runs the test class.
            </summary>
            <param name="testClass">The test class to be run.</param>
            <param name="testCases">The test cases to be run. Cannot be empty.</param>
            <param name="explicitOption">A flag to indicate how explicit tests should be treated.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that will be used to decide how to order the test.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="collectionFixtureMappings">The mapping of collection fixture types to fixtures.</param>
            <returns></returns>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunner.RunTestMethod(Xunit.v3.XunitTestClassRunnerContext,Xunit.v3.IXunitTestMethod,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestClassRunnerBase`4">
            <summary>
            The test class runner for xUnit.net v3 tests (with overridable context).
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.CreateTestClassConstructorArguments(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.FormatConstructorArgsMissingMessage(`0,System.Reflection.ConstructorInfo,System.Collections.Generic.IReadOnlyList{System.Tuple{System.Int32,System.Reflection.ParameterInfo}})">
            <summary>
            Gets the message to be used when the constructor is missing arguments.
            </summary>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="constructor">The constructor that was selected</param>
            <param name="unusedArguments">The arguments that had no matching parameter values</param>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.GetConstructorArgument(`0,System.Reflection.ConstructorInfo,System.Int32,System.Reflection.ParameterInfo)">
            <summary>
            Tries to supply a test class constructor argument.
            </summary>
            <param name="ctxt">The context that describes the current test class</param>
            <param name="constructor">The constructor that will be used to create the test class.</param>
            <param name="index">The parameter index.</param>
            <param name="parameter">The parameter information.</param>
            <returns>Returns the constructor argument if available, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.OnTestClassFinished(`0,Xunit.v3.RunSummary)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.OnTestClassStarting(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.OrderTestCases(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.SelectTestClassConstructor(`0)">
            <summary>
            Selects the test constructor.
            </summary>
            <param name="ctxt">The context that describes the current test class</param>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBase`4.SetTestContext(`0,Xunit.TestEngineStatus)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestClassRunnerBaseContext`2">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestClassRunnerBase`4"/>.
            </summary>
            <param name="testClass">The test class</param>
            <param name="testCases">The test from the test class</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The orderer used to sort the test cases for executiong</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="collectionFixtureMappings">The fixtures attached to the test collection</param>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBaseContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ITestCaseOrderer,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,Xunit.v3.FixtureMappingManager)">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestClassRunnerBase`4"/>.
            </summary>
            <param name="testClass">The test class</param>
            <param name="testCases">The test from the test class</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The orderer used to sort the test cases for executiong</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="collectionFixtureMappings">The fixtures attached to the test collection</param>
        </member>
        <member name="P:Xunit.v3.XunitTestClassRunnerBaseContext`2.ClassFixtureMappings">
            <summary>
            Gets the mapping manager for class-level fixtures.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestClassRunnerBaseContext`2.TestCaseOrderer">
            <summary>
            Gets or sets the orderer used to order the test cases.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerBaseContext`2.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestClassRunnerContext">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestClassRunner"/>.
            </summary>
            <param name="testClass">The test class</param>
            <param name="testCases">The test from the test class</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The orderer used to sort the test cases for executiong</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="collectionFixtureMappings">The fixtures attached to the test collection</param>
        </member>
        <member name="M:Xunit.v3.XunitTestClassRunnerContext.#ctor(Xunit.v3.IXunitTestClass,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ITestCaseOrderer,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,Xunit.v3.FixtureMappingManager)">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestClassRunner"/>.
            </summary>
            <param name="testClass">The test class</param>
            <param name="testCases">The test from the test class</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The orderer used to sort the test cases for executiong</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="collectionFixtureMappings">The fixtures attached to the test collection</param>
        </member>
        <member name="T:Xunit.v3.XunitTestCollectionRunner">
            <summary>
            The test collection runner for xUnit.net v3 tests.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestCollectionRunner"/> class.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCollectionRunner.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Xunit.v3.XunitTestCollectionRunner"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunner.Run(Xunit.v3.IXunitTestCollection,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ITestCaseOrderer,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,Xunit.v3.FixtureMappingManager)">
            <summary>
            Runs the test collection.
            </summary>
            <param name="testCollection">The test collection to be run.</param>
            <param name="testCases">The test cases to be run. Cannot be empty.</param>
            <param name="explicitOption">A flag to indicate how explicit tests should be treated.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="testCaseOrderer">The test case orderer that was applied at the assembly level.</param>
            <param name="aggregator">The exception aggregator used to run code and collection exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="assemblyFixtureMappings">The mapping manager for assembly fixtures.</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunner.RunTestClass(Xunit.v3.XunitTestCollectionRunnerContext,Xunit.v3.IXunitTestClass,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCollectionRunnerBase`4">
            <summary>
            The test collection runner for xUnit.net v3 tests (with overridable context).
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunnerBase`4.GetTestCaseOrderer(`0)">
            <summary>
            Gives an opportunity to override test case orderer. By default, this method gets the
            orderer from the collection definition. If this function returns <c>null</c>, the
            test case orderer passed into the constructor will be used.
            </summary>
            <param name="ctxt">The context that describes the current test collection</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunnerBase`4.OnTestCollectionFinished(`0,Xunit.v3.RunSummary)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunnerBase`4.OnTestCollectionStarting(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCollectionRunnerBaseContext`2">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCollectionRunnerBaseContext`2"/>.
            </summary>
            <param name="testCollection">The test collection</param>
            <param name="testCases">The test cases from the test collection</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The order used to order tests cases in the collection</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="assemblyFixtureMappings">The fixtures associated with the test assembly</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunnerBaseContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ITestCaseOrderer,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,Xunit.v3.FixtureMappingManager)">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCollectionRunnerBaseContext`2"/>.
            </summary>
            <param name="testCollection">The test collection</param>
            <param name="testCases">The test cases from the test collection</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The order used to order tests cases in the collection</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="assemblyFixtureMappings">The fixtures associated with the test assembly</param>
        </member>
        <member name="P:Xunit.v3.XunitTestCollectionRunnerBaseContext`2.CollectionFixtureMappings">
            <summary>
            Gets the mapping manager for collection-level fixtures.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestCollectionRunnerBaseContext`2.TestCaseOrderer">
            <summary>
            Gets or sets the orderer used to order test cases within the test collection.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunnerBaseContext`2.InitializeAsync">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestCollectionRunnerContext">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCollectionRunner"/>.
            </summary>
            <param name="testCollection">The test collection</param>
            <param name="testCases">The test cases from the test collection</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The order used to order tests cases in the collection</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="assemblyFixtureMappings">The fixtures associated with the test assembly</param>
        </member>
        <member name="M:Xunit.v3.XunitTestCollectionRunnerContext.#ctor(Xunit.v3.IXunitTestCollection,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ITestCaseOrderer,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,Xunit.v3.FixtureMappingManager)">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestCollectionRunner"/>.
            </summary>
            <param name="testCollection">The test collection</param>
            <param name="testCases">The test cases from the test collection</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="testCaseOrderer">The order used to order tests cases in the collection</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="assemblyFixtureMappings">The fixtures associated with the test assembly</param>
        </member>
        <member name="T:Xunit.v3.XunitTestMethodRunner">
            <summary>
            The test method runner for xUnit.net v3 tests.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestMethodRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestMethodRunner"/> class.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestMethodRunner.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Xunit.v3.XunitTestMethodRunner"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestMethodRunner.Run(Xunit.v3.IXunitTestMethod,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Object[])">
            <summary>
            Runs the test test method.
            </summary>
            <param name="testMethod">The test method to be run.</param>
            <param name="testCases">The test cases to be run. Cannot be empty.</param>
            <param name="explicitOption">A flag to indicate how explicit tests should be treated.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="constructorArguments">The constructor arguments for the test class.</param>
        </member>
        <member name="T:Xunit.v3.XunitTestMethodRunnerBase`3">
            <summary>
            The base test method runner for xUnit.net v3 tests (with overridable context).
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestMethodRunnerBase`3.RunTestCase(`0,`2)">
            <summary>
            Runs the test case.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestMethodRunnerBaseContext`2">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestMethodRunnerBase`3"/>.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="testCases">The test cases from the test method</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="M:Xunit.v3.XunitTestMethodRunnerBaseContext`2.#ctor(`0,System.Collections.Generic.IReadOnlyCollection{`1},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Object[])">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestMethodRunnerBase`3"/>.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="testCases">The test cases from the test method</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="P:Xunit.v3.XunitTestMethodRunnerBaseContext`2.ConstructorArguments">
            <summary>
            Gets the arguments to send to the test class constructor.
            </summary>
        </member>
        <member name="T:Xunit.v3.XunitTestMethodRunnerContext">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestMethodRunner"/>.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="testCases">The test cases from the test method</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="M:Xunit.v3.XunitTestMethodRunnerContext.#ctor(Xunit.v3.IXunitTestMethod,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IXunitTestCase},Xunit.Sdk.ExplicitOption,Xunit.v3.IMessageBus,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Object[])">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestMethodRunner"/>.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="testCases">The test cases from the test method</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="T:Xunit.v3.XunitTestRunner">
            <summary>
            The test runner for xUnit.net v3 tests.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestRunner"/> class.
            </summary>
        </member>
        <member name="F:Xunit.v3.XunitTestRunner.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Xunit.v3.XunitTestRunner"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestRunner.Run(Xunit.v3.IXunitTest,Xunit.v3.IMessageBus,System.Object[],Xunit.Sdk.ExplicitOption,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IBeforeAfterTestAttribute})">
            <summary>
            Runs the test.
            </summary>
            <param name="test">The test that this invocation belongs to.</param>
            <param name="messageBus">The message bus to report run status to.</param>
            <param name="constructorArguments">The arguments to be passed to the test class constructor.</param>
            <param name="explicitOption">A flag to indicate how explicit tests should be treated.</param>
            <param name="aggregator">The exception aggregator used to run code and collect exceptions.</param>
            <param name="cancellationTokenSource">The task cancellation token source, used to cancel the test run.</param>
            <param name="beforeAfterAttributes">The list of <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s for this test.</param>
            <returns>Returns summary information about the test that was run.</returns>
        </member>
        <member name="T:Xunit.v3.XunitTestRunnerBase`2">
            <summary>
            The base test runner for xUnit.net v3 tests (with overridable context).
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.CreateTestClassInstance(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.GetAttachments(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.GetTestOutput(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.GetWarnings(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.InvokeTest(`0,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.IsTestClassCreatable(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.PostInvoke(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.PreInvoke(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.OnTestStarting(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.RunTest(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBase`2.ShouldTestRun(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.XunitTestRunnerBaseContext`1">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestRunner"/>.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBaseContext`1.#ctor(`0,Xunit.v3.IMessageBus,Xunit.Sdk.ExplicitOption,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IBeforeAfterTestAttribute},System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.XunitTestRunnerBaseContext`1"/> class.
            </summary>
            <param name="test">The test</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="beforeAfterTestAttributes">The <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s that are applied to the test</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="P:Xunit.v3.XunitTestRunnerBaseContext`1.BeforeAfterTestAttributes">
            <summary>
            Gets the collection of <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/> used for this test.
            </summary>
        </member>
        <member name="P:Xunit.v3.XunitTestRunnerBaseContext`1.ConstructorArguments">
            <summary>
            Gets the arguments that should be passed to the test class when it's constructed.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBaseContext`1.GetSkipReason(System.Exception)">
            <summary>
            Gets the runtime skip reason for the test, inspecting the provided exception to see
            if it contractually matches a "dynamically skipped" exception (that is, any
            exception message that starts with <see cref="F:Xunit.v3.DynamicSkipToken.Value"/>).
            If the exception does not match the pattern, consults the base skip reason
            (from <see cref="P:Xunit.v3.IFactAttribute.Skip"/>), as well as <see cref="P:Xunit.v3.IFactAttribute.SkipUnless"/>
            and <see cref="P:Xunit.v3.IFactAttribute.SkipWhen"/> to determine if the test should be
            dynamically skipped.
            </summary>
            <param name="exception">The exception to inspect</param>
            <returns>The skip reason, if the test is skipped; <c>null</c>, otherwise</returns>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBaseContext`1.RunAfterAttributes">
            <summary>
            Runs the <see cref="M:Xunit.v3.IBeforeAfterTestAttribute.After(System.Reflection.MethodInfo,Xunit.v3.IXunitTest)"/> side of the before after attributes.
            </summary>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerBaseContext`1.RunBeforeAttributes">
            <summary>
            Runs the <see cref="M:Xunit.v3.IBeforeAfterTestAttribute.Before(System.Reflection.MethodInfo,Xunit.v3.IXunitTest)"/> side of the before after attributes.
            </summary>
        </member>
        <member name="T:Xunit.v3.XunitTestRunnerContext">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestRunner"/>.
            </summary>
            <param name="test">The test</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="beforeAfterTestAttributes">The <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s that are applied to the test</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="M:Xunit.v3.XunitTestRunnerContext.#ctor(Xunit.v3.IXunitTest,Xunit.v3.IMessageBus,Xunit.Sdk.ExplicitOption,Xunit.v3.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IBeforeAfterTestAttribute},System.Object[])">
            <summary>
            Context class for <see cref="T:Xunit.v3.XunitTestRunner"/>.
            </summary>
            <param name="test">The test</param>
            <param name="messageBus">The message bus to send execution messages to</param>
            <param name="explicitOption">The user's choice on how to treat explicit tests</param>
            <param name="aggregator">The exception aggregator</param>
            <param name="cancellationTokenSource">The cancellation token source</param>
            <param name="beforeAfterTestAttributes">The <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s that are applied to the test</param>
            <param name="constructorArguments">The constructor arguments for the test class</param>
        </member>
        <member name="T:Xunit.v3.DelegatingMessageBus">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IMessageBus"/> that delegates to another implementation of
            <see cref="T:Xunit.v3.IMessageBus"/> while calling into an optional callback for each message.
            </summary>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageBus.#ctor(Xunit.v3.IMessageBus,System.Action{Xunit.Sdk.IMessageSinkMessage})">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IMessageBus"/> that delegates to another implementation of
            <see cref="T:Xunit.v3.IMessageBus"/> while calling into an optional callback for each message.
            </summary>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageBus.QueueMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageBus.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DelegatingMessageBus`1">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IMessageBus"/> that delegates to another implementation of
            <see cref="T:Xunit.v3.IMessageBus"/> while calling into an optional callback for each message. In addition,
            it issues a <see cref="P:Xunit.v3.DelegatingMessageBus`1.Finished"/> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen and records the final message for later retrieval.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageBus`1.#ctor(Xunit.v3.IMessageBus,System.Action{Xunit.Sdk.IMessageSinkMessage})">
            <summary>
            Implementation of <see cref="T:Xunit.v3.IMessageBus"/> that delegates to another implementation of
            <see cref="T:Xunit.v3.IMessageBus"/> while calling into an optional callback for each message. In addition,
            it issues a <see cref="P:Xunit.v3.DelegatingMessageBus`1.Finished"/> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen and records the final message for later retrieval.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
            <param name="innerMessageBus">The message bus to delegate to.</param>
            <param name="callback">The callback to send messages to.</param>
        </member>
        <member name="P:Xunit.v3.DelegatingMessageBus`1.FinalMessage">
            <summary>
            The final message that was seen that caused <see cref="P:Xunit.v3.DelegatingMessageBus`1.Finished"/> to be triggered.
            </summary>
        </member>
        <member name="P:Xunit.v3.DelegatingMessageBus`1.Finished">
            <summary>
            An event that is triggered when a message of type <typeparamref name="TFinalMessage"/> is seen.
            </summary>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageBus`1.QueueMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DelegatingMessageSink">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageSink" /> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageSink" /> while calling into an optional callback for each message.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageSink.#ctor(Xunit.Sdk.IMessageSink,System.Action{Xunit.Sdk.IMessageSinkMessage})">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageSink" /> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageSink" /> while calling into an optional callback for each message.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DelegatingMessageSink`1">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageSink" /> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageSink" /> while calling into an optional callback for each message. In addition,
            it issues a <see cref="P:Xunit.v3.DelegatingMessageSink`1.Finished" /> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen and records the final message for later retrieval.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageSink`1.#ctor(Xunit.Sdk.IMessageSink,System.Action{Xunit.Sdk.IMessageSinkMessage})">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IMessageSink" /> that delegates to another implementation of
            <see cref="T:Xunit.Sdk.IMessageSink" /> while calling into an optional callback for each message. In addition,
            it issues a <see cref="P:Xunit.v3.DelegatingMessageSink`1.Finished" /> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen and records the final message for later retrieval.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Xunit.v3.DelegatingMessageSink`1.FinalMessage">
            <summary>
            The final message that was seen that caused <see cref="P:Xunit.v3.DelegatingMessageSink`1.Finished"/> to be triggered.
            </summary>
        </member>
        <member name="P:Xunit.v3.DelegatingMessageSink`1.Finished">
            <summary>
            An event that is triggered when a message of type <typeparamref name="TFinalMessage" /> is seen.
            </summary>
        </member>
        <member name="M:Xunit.v3.DelegatingMessageSink`1.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.DisplayNameFormatter">
            <summary>
            Represents a formatter that formats the display name of a class and/or method into a more
            human readable form using additional options.
            </summary>
        </member>
        <member name="M:Xunit.v3.DisplayNameFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.DisplayNameFormatter"/> class.
            </summary>
        </member>
        <member name="M:Xunit.v3.DisplayNameFormatter.#ctor(Xunit.Sdk.TestMethodDisplay,Xunit.Sdk.TestMethodDisplayOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.DisplayNameFormatter"/> class.
            </summary>
            <param name="display">The <see cref="T:Xunit.Sdk.TestMethodDisplay"/> used by the formatter.</param>
            <param name="displayOptions">The <see cref="T:Xunit.Sdk.TestMethodDisplayOptions"/> used by the formatter.</param>
        </member>
        <member name="M:Xunit.v3.DisplayNameFormatter.Format(System.String)">
            <summary>
            Formats the specified display name.
            </summary>
            <param name="displayName">The display name to format.</param>
            <returns>The formatted display name.</returns>
        </member>
        <member name="T:Xunit.v3.ExecutionTimer">
            <summary>
            The methods on this static class can measure the time taken to execute actions (both synchronous
            and asynchronous).
            </summary>
        </member>
        <member name="M:Xunit.v3.ExecutionTimer.Measure(System.Action)">
            <summary>
            Executes an action and returns the amount of time it took to execute. Note: time cannot be
            measured for any action that throws an exception, so this should only be called by code that
            is known not to throw (f.e., using <see cref="T:Xunit.v3.ExceptionAggregator"/>) or when the execution
            time for throwing code is irrelevant.
            </summary>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:Xunit.v3.ExecutionTimer.Measure``1(System.Func{``0})">
            <summary>
            Executes a function and returns the amount of time it took to execute. Note: time cannot be
            measured for any action that throws an exception, so this should only be called by code that
            is known not to throw (f.e., using <see cref="T:Xunit.v3.ExceptionAggregator"/>) or when the execution
            time for throwing code is irrelevant.
            </summary>
            <param name="func">The function to measure.</param>
        </member>
        <member name="M:Xunit.v3.ExecutionTimer.MeasureAsync(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Executes an asynchronous action and returns the amount of time it took to execute. Note: time
            cannot be measured for any action that throws an exception, so this should only be called by
            code that is known not to throw (f.e., using <see cref="T:Xunit.v3.ExceptionAggregator"/>) or when the
            execution time for throwing code is irrelevant.
            </summary>
            <param name="asyncAction">The asynchronous action to measure.</param>
        </member>
        <member name="M:Xunit.v3.ExecutionTimer.MeasureAsync``1(System.Func{System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Executes an asynchronous function and returns the amount of time it took to execute. Note: time
            cannot be measured for any action that throws an exception, so this should only be called by
            code that is known not to throw (f.e., using <see cref="T:Xunit.v3.ExceptionAggregator"/>) or when the
            execution time for throwing code is irrelevant.
            </summary>
            <param name="asyncFunc">The asynchronous function to measure.</param>
        </member>
        <member name="T:Xunit.v3.ExtensibilityPointFactory">
            <summary>
            Represents a factory for the types used for extensibility throughout the system.
            </summary>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.Get``1(System.Type,System.Object[])">
            <summary>
            Gets an instance of the given type, casting it to <typeparamref name="TInterface"/>, using the provided
            constructor arguments.
            </summary>
            <typeparam name="TInterface">The interface type.</typeparam>
            <param name="type">The implementation type.</param>
            <param name="ctorArgs">The constructor arguments. Since diagnostic message sinks are optional,
            the code first looks for a type that takes the given arguments plus the message sink, and only
            falls back to the message sink-less constructor if none was found.</param>
            <returns>The instance of the type.</returns>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetTestFramework(System.Reflection.Assembly)">
            <summary>
            Gets the test framework object for the given test assembly. It is important that callers to this function have
            called <see cref="M:Xunit.TestContext.SetForInitialization(Xunit.Sdk.IMessageSink,System.Boolean,System.Boolean)"/> before calling this, so that the test framework and
            any ancillary helper classes have access to the diagnostic and internal diagnostic message sinks.
            </summary>
            <param name="testAssembly">The test assembly to get the test framework for</param>
            <returns>The test framework object</returns>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetXunitTestCaseDiscoverer(System.Type)">
            <summary>
            Gets an xUnit.net v3 test discoverer.
            </summary>
            <param name="testCaseDiscovererType">The test case discoverer type</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetXunitTestCollectionFactory(System.Type,Xunit.v3.IXunitTestAssembly)">
            <summary>
            Gets an xUnit.net v3 test collection factory.
            </summary>
            <param name="testCollectionFactoryType">The test collection factory type</param>
            <param name="testAssembly">The test assembly under test</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetAssemblyBeforeAfterTestAttributes(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the given test assembly.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetAssemblyFixtureTypes(System.Reflection.Assembly)">
            <summary>
            Gets the fixture types that are attached to the test assembly via <see cref="T:Xunit.v3.IAssemblyFixtureAttribute"/>s.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetAssemblyTestCaseOrderer(System.Reflection.Assembly)">
            <summary>
            Gets the test case orderer that's attached to a test assembly. Returns <c>null</c> if there
            isn't one attached.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetAssemblyTestCollectionOrderer(System.Reflection.Assembly)">
            <summary>
            Gets the test collection orderer that's attached to a test assembly. Returns <c>null</c> if there
            isn't one attached.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetAssemblyTraits(System.Reflection.Assembly)">
            <summary>
            Gets the traits that are attached to the test assembly via <see cref="T:Xunit.v3.ITraitAttribute"/>s.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetClassBeforeAfterTestAttributes(System.Type,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IBeforeAfterTestAttribute})">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the given test class.
            </summary>
            <param name="testClass">The test class</param>
            <param name="collectionBeforeAfterAttributes">The before after attributes from the test collection,
            to be merged into the result.</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetClassClassFixtureTypes(System.Type,System.Collections.Generic.IReadOnlyCollection{System.Type})">
            <summary>
            Gets the fixture types that are attached to the test class via <see cref="T:Xunit.IClassFixture`1"/>.
            </summary>
            <param name="testClass">The test class</param>
            <param name="collectionClassFixtureTypes">The class fixture types from the test collection, which
            will be merged into the result</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetClassTestCaseOrderer(System.Type)">
            <summary>
            Gets the test case orderer that's attached to a test class. Returns <c>null</c> if there
            isn't one attached.
            </summary>
            <param name="testClass">The test class</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetClassTraits(System.Type,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyCollection{System.String}})">
            <summary>
            Gets the traits that are attached to the test class via <see cref="T:Xunit.v3.ITraitAttribute"/>s.
            </summary>
            <param name="testClass">The test class</param>
            <param name="testCollectionTraits">The traits inherited from the test collection</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetCollectionBeforeAfterTestAttributes(System.Type,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IBeforeAfterTestAttribute})">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the given test collection.
            </summary>
            <param name="collectionDefinition">The collection definition type</param>
            <param name="assemblyBeforeAfterTestAttributes">The before after attributes from the test assembly,
            to be merged into the result.</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetCollectionBehavior(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:Xunit.v3.ICollectionBehaviorAttribute"/> that's attached to the test assembly, if there is one.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetCollectionDefinitions(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="T:Xunit.CollectionDefinitionAttribute"/>s that are attached to the test assembly.
            Verifies that there are no collection definitions with identical names.
            </summary>
            <param name="testAssembly">The test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetCollectionClassFixtureTypes(System.Type)">
            <summary>
            Gets the fixture types that are attached to the test collection via <see cref="T:Xunit.IClassFixture`1"/>.
            </summary>
            <param name="collectionDefinition">The test collection definition type</param>
            <returns></returns>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetCollectionCollectionFixtureTypes(System.Type)">
            <summary>
            Gets the fixture types that are attached to the test collection via <see cref="T:Xunit.ICollectionFixture`1"/>.
            </summary>
            <param name="collectionDefinition">The test collection definition type</param>
            <returns></returns>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetCollectionTestCaseOrderer(System.Type)">
            <summary>
            Gets the test case orderer that's attached to a test collection. Returns <c>null</c> if there
            isn't one attached.
            </summary>
            <param name="collectionDefinition">The test collection definition</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetCollectionTraits(System.Type,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyCollection{System.String}})">
            <summary>
            Gets the traits that are attached to the test collection via <see cref="T:Xunit.v3.ITraitAttribute"/>s.
            </summary>
            <param name="testCollectionDefinition">The test collection</param>
            <param name="testAssemblyTraits">The traits inherited from the test assembly</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetMethodBeforeAfterTestAttributes(System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyCollection{Xunit.v3.IBeforeAfterTestAttribute})">
            <summary>
            Gets the <see cref="T:Xunit.v3.IBeforeAfterTestAttribute"/>s attached to the given method.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="classBeforeAfterAttributes">The before after attributes from the test class,
            to be merged into the result.</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetMethodDataAttributes(System.Reflection.MethodInfo)">
            <summary>
            Gets the <see cref="T:Xunit.v3.IDataAttribute"/>s attached to the given test method.
            </summary>
            <param name="testMethod">The test method</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetMethodFactAttributes(System.Reflection.MethodInfo)">
            <summary>
            Gets the <see cref="T:Xunit.v3.IFactAttribute"/>s attached to the given test method.
            </summary>
            <param name="testMethod">The test method</param>
        </member>
        <member name="M:Xunit.v3.ExtensibilityPointFactory.GetMethodTraits(System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IReadOnlyCollection{System.String}})">
            <summary>
            Gets the traits that are attached to the test method via <see cref="T:Xunit.v3.ITraitAttribute"/>s.
            </summary>
            <param name="testMethod">The test method</param>
            <param name="testClassTraits">The traits inherited from the test class</param>
        </member>
        <member name="T:Xunit.v3.FixtureMappingManager">
            <summary>
            Maps fixture objects, including support for generic collection fixtures.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.v3.FixtureMappingManager"/> class.
            </remarks>
            <param name="fixtureCategory">The category of fixture (i.e., "Assembly"); used in exception messages</param>
            <param name="parentMappingManager">The parent mapping manager (used to resolve constructor arguments)</param>
        </member>
        <member name="M:Xunit.v3.FixtureMappingManager.#ctor(System.String,Xunit.v3.FixtureMappingManager)">
            <summary>
            Maps fixture objects, including support for generic collection fixtures.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.v3.FixtureMappingManager"/> class.
            </remarks>
            <param name="fixtureCategory">The category of fixture (i.e., "Assembly"); used in exception messages</param>
            <param name="parentMappingManager">The parent mapping manager (used to resolve constructor arguments)</param>
        </member>
        <member name="M:Xunit.v3.FixtureMappingManager.#ctor(System.String,System.Object[])">
            <summary>
            FOR TESTING PURPOSES ONLY.
            </summary>
        </member>
        <member name="P:Xunit.v3.FixtureMappingManager.LocalFixtureTypes">
            <summary>
            Returns a list of the known fixture types at this category level. This will not include fixture
            types known from parent categories and above.
            </summary>
        </member>
        <member name="P:Xunit.v3.FixtureMappingManager.GlobalFixtureTypes">
            <summary>
            Returns a list of all known fixture types at all category levels.
            </summary>
        </member>
        <member name="M:Xunit.v3.FixtureMappingManager.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.FixtureMappingManager.GetFixture(System.Type)">
            <summary>
            Get a value for the given fixture type. If the fixture type is unknown, then returns <c>null</c>.
            </summary>
            <param name="fixtureType">The type of the fixture</param>
            <returns>Returns the value if the fixture type is found, or <c>null</c> if it's not.</returns>
        </member>
        <member name="M:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.FixtureMappingManager.InitializeAsync(System.Collections.Generic.IReadOnlyCollection{System.Type})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.MaxConcurrencySyncContext">
            <summary>
            An implementation of <see cref="T:System.Threading.SynchronizationContext"/> which runs work on custom threads
            rather than in the thread pool, and limits the number of in-flight actions.
            </summary>
        </member>
        <member name="M:Xunit.v3.MaxConcurrencySyncContext.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.v3.MaxConcurrencySyncContext"/> class.
            </summary>
            <param name="maximumConcurrencyLevel">The maximum number of tasks to run at any one time.</param>
        </member>
        <member name="M:Xunit.v3.MaxConcurrencySyncContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.MaxConcurrencySyncContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.MaxConcurrencySyncContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestClassComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and <see cref="T:System.Collections.Generic.IComparer`1"/>
            for <see cref="T:Xunit.Sdk.ITestClass"/>, using the unique ID for the comparison.
            </summary>
        </member>
        <member name="F:Xunit.v3.TestClassComparer.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestClassComparer.Compare(Xunit.Sdk.ITestClass,Xunit.Sdk.ITestClass)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassComparer.Equals(Xunit.Sdk.ITestClass,Xunit.Sdk.ITestClass)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestClassComparer.GetHashCode(Xunit.Sdk.ITestClass)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestCollectionComparer`1">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and <see cref="T:System.Collections.Generic.IComparer`1"/>
            for <see cref="T:Xunit.Sdk.ITestCollection"/>, using the unique ID for the comparison.
            </summary>
            <typeparam name="TTestCollection">The type of the test collection. Must derive
            from <see cref="T:Xunit.Sdk.ITestCollection"/>.</typeparam>
        </member>
        <member name="F:Xunit.v3.TestCollectionComparer`1.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestCollectionComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestCollectionComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.v3.TestIntrospectionHelper">
            <summary>
            Helper functions for retrieving and interpreting test and test case details from various sources
            (like <see cref="T:Xunit.v3.IFactAttribute"/>, <see cref="T:Xunit.v3.IDataAttribute"/>, and others).
            </summary>
        </member>
        <member name="M:Xunit.v3.TestIntrospectionHelper.GetTestCaseDetails(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute,System.Object[],System.Nullable{System.Int32},System.String)">
            <summary>
            Please use the version which accepts label. This overload will be removed in the next major version.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestIntrospectionHelper.GetTestCaseDetails(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute,System.Object[],System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Retrieve the details for a test case that is a test method decorated with an
            instance of <see cref="T:Xunit.v3.IFactAttribute"/> (or derived).
            </summary>
            <param name="discoveryOptions">The options used for discovery.</param>
            <param name="testMethod">The test method.</param>
            <param name="factAttribute">The fact attribute that decorates the test method.</param>
            <param name="testMethodArguments">The optional test method arguments.</param>
            <param name="timeout">The optional timeout; if not provided, will be looked up from the <paramref name="factAttribute"/>.</param>
            <param name="baseDisplayName">The optional base display name for the test method.</param>
            <param name="label">The optional label to be used to help format the test case display name.</param>
        </member>
        <member name="M:Xunit.v3.TestIntrospectionHelper.GetTestCaseDetailsForTheoryDataRow(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.ITheoryAttribute,Xunit.ITheoryDataRow,System.Object[])">
            <summary>
            Retrieve the details for a test case that is a test method decorated with an instance
            of <see cref="T:Xunit.v3.ITheoryAttribute"/> (or derived) when you have a data row. The data row
            is used to augment the returned information (traits, skip reason, etc.).
            </summary>
            <param name="discoveryOptions">The options used for discovery.</param>
            <param name="testMethod">The test method.</param>
            <param name="theoryAttribute">The theory attribute that decorates the test method.</param>
            <param name="dataRow">The data row for the test.</param>
            <param name="testMethodArguments">The test method arguments obtained from the <paramref name="dataRow"/> after being type-resolved.</param>
        </member>
        <member name="M:Xunit.v3.TestIntrospectionHelper.GetTraits(Xunit.v3.IXunitTestMethod,Xunit.ITheoryDataRow)">
            <summary>
            Merges the traits from the test method (which already reflect the traits from the test
            assembly, test collection, and test class) with the traits attached to the data row.
            </summary>
            <param name="testMethod">The test method to get traits from.</param>
            <param name="dataRow">The data row to get traits from.</param>
            <returns>The traits dictionary</returns>
        </member>
        <member name="M:Xunit.v3.TestIntrospectionHelper.MergeTraitsInto(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.HashSet{System.String}},System.String[])">
            <summary>
            Merges string-array traits (like from <see cref="P:Xunit.v3.IDataAttribute.Traits"/>) into an existing traits dictionary.
            </summary>
            <param name="traits">The existing traits dictionary.</param>
            <param name="additionalTraits">The additional traits to merge.</param>
        </member>
        <member name="T:Xunit.v3.TestMethodComparer">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:Xunit.Sdk.ITestMethod"/>.
            Compares the names of the methods.
            </summary>
        </member>
        <member name="F:Xunit.v3.TestMethodComparer.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:Xunit.v3.TestMethodComparer.Equals(Xunit.Sdk.ITestMethod,Xunit.Sdk.ITestMethod)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.v3.TestMethodComparer.GetHashCode(Xunit.Sdk.ITestMethod)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.AssemblyFixtureAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of
            the fixture data is initialized before any test in the assembly are run (including
            <see cref="M:Xunit.IAsyncLifetime.InitializeAsync"/> if it's implemented). After all the tests in the
            assembly have been run, it is cleaned up by calling <see cref="M:System.IAsyncDisposable.DisposeAsync"/>
            if it's implemented, or it falls back to <see cref="M:System.IDisposable.Dispose"/> if that's implemented.
            Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data
            from inside the test, a constructor argument should be added to the test class which exactly
            matches the fixture type.
            </summary>
            <param name="assemblyFixtureType">The assembly fixture class type</param>
        </member>
        <member name="M:Xunit.AssemblyFixtureAttribute.#ctor(System.Type)">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate per-assembly fixture data. An instance of
            the fixture data is initialized before any test in the assembly are run (including
            <see cref="M:Xunit.IAsyncLifetime.InitializeAsync"/> if it's implemented). After all the tests in the
            assembly have been run, it is cleaned up by calling <see cref="M:System.IAsyncDisposable.DisposeAsync"/>
            if it's implemented, or it falls back to <see cref="M:System.IDisposable.Dispose"/> if that's implemented.
            Assembly fixtures must have a public parameterless constructor. To gain access to the fixture data
            from inside the test, a constructor argument should be added to the test class which exactly
            matches the fixture type.
            </summary>
            <param name="assemblyFixtureType">The assembly fixture class type</param>
        </member>
        <member name="P:Xunit.AssemblyFixtureAttribute.AssemblyFixtureType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CaptureConsoleAttribute">
            <summary>
            Captures <see cref="T:System.Console"/> output (<see cref="P:System.Console.Out"/> and/or <see cref="P:System.Console.Error"/>)
            and reports it to the test output helper.
            </summary>
        </member>
        <member name="P:Xunit.CaptureConsoleAttribute.CaptureError">
            <summary>
            Gets or sets a flag to indicate whether to override <see cref="P:System.Console.Error"/>.
            </summary>
        </member>
        <member name="P:Xunit.CaptureConsoleAttribute.CaptureOut">
            <summary>
            Gets or sets a flag to indicate whether to override <see cref="P:System.Console.Out"/>
            (which includes the <c>Write</c> and <c>WriteLine</c> methods on <see cref="T:System.Console"/>).
            </summary>
        </member>
        <member name="T:Xunit.CaptureTraceAttribute">
            <summary>
            Captures <see cref="T:System.Diagnostics.Trace"/> and <see cref="T:System.Diagnostics.Debug"/> output and reports it to the
            test output helper.
            </summary>
        </member>
        <member name="T:Xunit.ClassDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from a class
            which must implement IEnumerable&lt;object?[]&gt;.
            </summary>
            <param name="class">The class that provides the data.</param>
        </member>
        <member name="M:Xunit.ClassDataAttribute.#ctor(System.Type)">
            <summary>
            Provides a data source for a data theory, with the data coming from a class
            which must implement IEnumerable&lt;object?[]&gt;.
            </summary>
            <param name="class">The class that provides the data.</param>
        </member>
        <member name="P:Xunit.ClassDataAttribute.Class">
            <summary>
            Gets the type of the class that provides the data.
            </summary>
        </member>
        <member name="M:Xunit.ClassDataAttribute.ConvertDataRow(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.ClassDataAttribute.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.ClassDataAttribute.SupportsDiscoveryEnumeration">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.ClassDataAttribute`1">
            <summary>
            Provides a data source for a data theory, with the data coming from a class
            which must implement IEnumerable&lt;object?[]&gt;.
            </summary>
            <typeparam name="TClass">The class that provides the data.</typeparam>
            <remarks>
            .NET Framework does not support generic attributes. Please use the non-generic <see cref="T:Xunit.ClassDataAttribute"/>
            when targeting .NET Framework.
            </remarks>
        </member>
        <member name="M:Xunit.ClassDataAttribute`1.#ctor">
            <summary>
            Provides a data source for a data theory, with the data coming from a class
            which must implement IEnumerable&lt;object?[]&gt;.
            </summary>
            <typeparam name="TClass">The class that provides the data.</typeparam>
            <remarks>
            .NET Framework does not support generic attributes. Please use the non-generic <see cref="T:Xunit.ClassDataAttribute"/>
            when targeting .NET Framework.
            </remarks>
        </member>
        <member name="T:Xunit.CollectionAttribute">
            <summary>
            Used to declare a specific test collection for a test class.
            </summary>
        </member>
        <member name="M:Xunit.CollectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionAttribute" /> class, with the
            given collection name.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="M:Xunit.CollectionAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionAttribute" /> class based on
            a collection definition type, with an auto-generated name based on that type. Equivalent
            to using <see cref="T:Xunit.CollectionAttribute`1"/>.
            </summary>
            <param name="type">The type representing the collection fixture.</param>
        </member>
        <member name="P:Xunit.CollectionAttribute.Name">
            <summary>
            Gets the name of the collection. If <see cref="M:Xunit.CollectionAttribute.#ctor(System.String)"/> was called,
            will return the provided name; if <see cref="M:Xunit.CollectionAttribute.#ctor(System.Type)"/> was called,
            will return a synthetic name for the type.
            </summary>
        </member>
        <member name="P:Xunit.CollectionAttribute.Type">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.CollectionAttribute.GetCollectionNameForType(System.Type)">
            <summary>
            Gets the collection name that will result for a given type.
            </summary>
            <param name="type">The collection type</param>
        </member>
        <member name="T:Xunit.CollectionAttribute`1">
            <summary>
            Used to declare a specific test collection for a test class. Equivalent to using <see cref="T:Xunit.CollectionAttribute"/>
            with the <see cref="M:Xunit.CollectionAttribute.#ctor(System.Type)">type-based constructor</see>.
            </summary>
            <remarks>
            .NET Framework does not support generic attributes. Please use the non-generic <see cref="T:Xunit.CollectionAttribute"/>
            when targeting .NET Framework.
            </remarks>
            <typeparam name="TCollectionDefinition">The type for the collection definition.</typeparam>
        </member>
        <member name="P:Xunit.CollectionAttribute`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.CollectionAttribute`1.Type">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CollectionBehavior">
            <summary>
            Defines the built-in behavior types for collections in xUnit.net.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerAssembly">
            <summary>
            By default, generates a collection per assembly, and any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/> or
            <see cref="T:Xunit.CollectionAttribute`1"/> (or any class that implements
            <see cref="T:Xunit.v3.ICollectionAttribute"/>) will be placed into the assembly-level
            collection.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerClass">
            <summary>
            By default, generates a collection per test class for any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/> or
            <see cref="T:Xunit.CollectionAttribute`1"/> (or any class that implements
            <see cref="T:Xunit.v3.ICollectionAttribute"/>).
            </summary>
        </member>
        <member name="T:Xunit.CollectionBehaviorAttribute">
            <summary>
            Default implementation of <see cref="T:Xunit.v3.ICollectionBehaviorAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute" /> class.
            Uses the default collection behavior (<see cref="F:Xunit.CollectionBehavior.CollectionPerClass"/>).
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(Xunit.CollectionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute" /> class
            with the given built-in collection behavior.
            </summary>
            <param name="collectionBehavior">The collection behavior for the assembly.</param>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute" /> class
            with the given custom collection behavior.
            </summary>
            <param name="collectionFactoryType">The factory type</param>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.CollectionFactoryType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.DisableTestParallelization">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.MaxParallelThreads">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.ParallelAlgorithm">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CollectionDefinitionAttribute">
            <summary>
            Used to declare a test collection container class. The container class gives
            developers a place to attach interfaces like <see cref="T:Xunit.IClassFixture`1"/> and
            <see cref="T:Xunit.ICollectionFixture`1"/> that will be applied to all tests classes
            that are members of the test collection.
            </summary>
        </member>
        <member name="M:Xunit.CollectionDefinitionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionDefinitionAttribute" /> class.
            Use this constructor when collection references by test classes use the generic
            <see cref="T:Xunit.CollectionAttribute`1"/> attribute or refer to the
            fixture class using <see cref="M:Xunit.CollectionAttribute.#ctor(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Xunit.CollectionDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionDefinitionAttribute" /> class.
            Use this constructor when collection references by test classes use
            <see cref="M:Xunit.CollectionAttribute.#ctor(System.String)"/>.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="P:Xunit.CollectionDefinitionAttribute.DisableParallelization">
            <summary>
            Determines whether tests in this collection runs in parallel with any other collections.
            </summary>
        </member>
        <member name="P:Xunit.CollectionDefinitionAttribute.Name">
            <summary>
            Gets the collection defintion name, if one was provided.
            </summary>
        </member>
        <member name="T:Xunit.CulturedFactAttribute">
            <summary>
            Attribute that is applied to a method to indicate that is a fact that should be run
            by the default test runner, using one or more cultures.
            </summary>
            <param name="cultures">One or more cultures to run the test method under. The cultures must be valid culture names
            that can be passed to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/>.</param>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
        </member>
        <member name="M:Xunit.CulturedFactAttribute.#ctor(System.String[],System.String,System.Int32)">
            <summary>
            Attribute that is applied to a method to indicate that is a fact that should be run
            by the default test runner, using one or more cultures.
            </summary>
            <param name="cultures">One or more cultures to run the test method under. The cultures must be valid culture names
            that can be passed to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/>.</param>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
        </member>
        <member name="P:Xunit.CulturedFactAttribute.Cultures">
            <summary>
            Gets the cultures that the test will be run under.
            </summary>
        </member>
        <member name="T:Xunit.CulturedTheoryAttribute">
            <summary>
            Attribute that is applied to a method to indicate that it is a data theory that should be run
            by the default test runner, using one or more cultures.
            </summary>
            <param name="cultures">One or more cultures to run the test method under. The cultures must be valid culture names
            that can be passed to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/>.</param>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <remarks>
            Data theories are tests which are fed data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed multiple times (once with each
            data row). Data is provided by attributes which implement <see cref="T:Xunit.v3.IDataAttribute"/> (most commonly,
            <see cref="T:Xunit.InlineDataAttribute"/> and <see cref="T:Xunit.MemberDataAttribute"/>).
            </remarks>
        </member>
        <member name="M:Xunit.CulturedTheoryAttribute.#ctor(System.String[],System.String,System.Int32)">
            <summary>
            Attribute that is applied to a method to indicate that it is a data theory that should be run
            by the default test runner, using one or more cultures.
            </summary>
            <param name="cultures">One or more cultures to run the test method under. The cultures must be valid culture names
            that can be passed to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/>.</param>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <remarks>
            Data theories are tests which are fed data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed multiple times (once with each
            data row). Data is provided by attributes which implement <see cref="T:Xunit.v3.IDataAttribute"/> (most commonly,
            <see cref="T:Xunit.InlineDataAttribute"/> and <see cref="T:Xunit.MemberDataAttribute"/>).
            </remarks>
        </member>
        <member name="P:Xunit.CulturedTheoryAttribute.Cultures">
            <summary>
            Gets the cultures that the test will be run under.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestPipelineException">
            <summary>
            Represents an exception that happened during the processing of the test pipeline. This typically
            means there were problems identifying the correct test class constructor, problems creating the
            fixture data, etc.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestPipelineException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestPipelineException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Xunit.Sdk.TestPipelineException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestPipelineException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception that is being reported.</param>
        </member>
        <member name="M:Xunit.Sdk.TestPipelineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestTimeoutException">
            <summary>
            Thrown if a test exceeds the specified timeout.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestTimeoutException.ForTimedOutTest(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Sdk.TestTimeoutException"/> for a test that has
            timed out.
            </summary>
            <param name="timeout">The timeout that was exceeded, in milliseconds</param>
        </member>
        <member name="T:Xunit.Sdk.TraceAssertException">
            <summary>
            This exception is throwing when a failure from <c>Trace.Assert</c> or
            <c>Debug.Assert</c> has been detected.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TraceAssertException.ForAssertFailure(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.Sdk.TraceAssertException"/> to be thrown when a
            failure from <c>Trace.Assert</c> or <c>Debug.Assert</c> has been detected.
            </summary>
            <param name="message">The <c>message</c> value from the assert failure</param>
            <param name="detailMessage">The <c>detailMessage</c> value from the assert failure</param>
            <returns></returns>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkOptionsReadExtensions">
            <summary>
            Extension methods for reading <see cref="T:Xunit.Sdk.ITestFrameworkDiscoveryOptions"/> and <see cref="T:Xunit.Sdk.ITestFrameworkExecutionOptions"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.Culture(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the culture to use for discovering tests. <c>null</c> uses the default OS culture;
            <see cref="F:System.String.Empty"/> uses the invariant culture; any other value passes the
            provided value to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/> and uses the resulting object
            with <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.DiagnosticMessages(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.DiagnosticMessagesOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not present,
            returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.IncludeSourceInformation(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether discovered test cases should include source information.
            Note that not all runners have access to source information, so this flag does not guarantee
            that source information will be provided.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.IncludeSourceInformationOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether discovered test cases should include source information.
            Note that not all runners have access to source information, so this flag does not guarantee
            that source information will be provided. If the flag is not present, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.MethodDisplay(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.MethodDisplayOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods. If the flag is not present,
            returns the default value (<see cref="F:Xunit.Sdk.TestMethodDisplay.ClassAndMethod"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.MethodDisplayOptions(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display options to format test methods.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.MethodDisplayOptionsOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the options that determine the default display formatting options for test methods. If no options are not present,
            returns the default value (<see cref="F:Xunit.Sdk.TestMethodDisplayOptions.None"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PreEnumerateTheories(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the
            discovery system will return a test case for each row of test data; they are disabled, then the
            discovery system will return a single test case for the theory.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PreEnumerateTheoriesOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If enabled, then the
            discovery system will return a test case for each row of test data; if disabled, then the
            discovery system will return a single test case for the theory. If the flag is not present,
            returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxEnumerableLength(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum length for printing collections.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxObjectDepth(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum recursive depth for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxObjectMemberCount(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum numbers of members to show for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxStringLength(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum length for printing strings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.SynchronousMessageReporting(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.SynchronousMessageReportingOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.AssertEquivalentMaxDepth(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a max recursive object depth for comparisons done with <c>Assert.Equivalent</c>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.Culture(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the culture to use for running tests. <c>null</c> uses the default OS culture;
            <see cref="F:System.String.Empty"/> uses the invariant culture; any other value passes the
            provided value to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/> and uses the resulting object
            with <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.DiagnosticMessages(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.DiagnosticMessagesOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not
            present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.DisableParallelization(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.DisableParallelizationOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization. If the flag is not present, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.ExplicitOption(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that indicates how to handle explicit tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.ExplicitOptionOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that indicates how to handle explicit tests. If the flag is not present, returns the
            default value (<see cref="F:Xunit.Sdk.ExplicitOption.Off"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.FailSkips(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail skipped tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.FailSkipsOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail skipped tests. If the flag is not present, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.FailTestsWithWarnings(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail passing tests with warnings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.FailTestsWithWarningsOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail passing tests with warnings. If the flag is not present, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.MaxParallelThreads(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.MaxParallelThreadsOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel. If set to 0 (or not set),
            the value of <see cref="P:System.Environment.ProcessorCount"/> is used; if set to a value less
            than 0, does not limit the number of threads.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.ParallelAlgorithm(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the parallel algorithm to be used.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.ParallelAlgorithmOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the parallel algorithm to be used. If the flag is not present, return the default
            value (<see cref="F:Xunit.Sdk.ParallelAlgorithm.Conservative"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxEnumerableLength(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum length for printing collections.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxObjectDepth(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum recursive depth for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxObjectMemberCount(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum numbers of members to show for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.PrintMaxStringLength(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum length for printing strings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.Seed(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the value that should be used to seed randomness.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.ShowLiveOutput(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag which indicates if the developer wishes to see output from <see cref="T:Xunit.ITestOutputHelper"/>
            live while it's being reported (in addition to seeing it collected together when the test is finished).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.ShowLiveOutputOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag which indicates if the developer wishes to see output from <see cref="T:Xunit.ITestOutputHelper"/>
            live while it's being reported (in addition to seeing it collected together when the test is finished).
            If the flag is not present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.StopOnTestFail(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to stop testing on test failure.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.StopOnTestFailOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to stop testing on test failure. If the flag is not present, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.SynchronousMessageReporting(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadExtensions.SynchronousMessageReportingOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="T:Xunit.Internal.ArchitectureExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.ArchitectureExtensions.ToDisplayName(System.Runtime.InteropServices.Architecture)">
            <summary>
            Attempts to convert <see cref="T:System.Runtime.InteropServices.Architecture"/> into a display-friendly name.
            </summary>
            <remarks>
            The supported values are the ones known as of .NET 9. An unknown architecture will\
            return "Unknown".
            </remarks>
        </member>
        <member name="T:Xunit.Internal.ConsoleCaptureTestOutputWriter">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.ConsoleCaptureTestOutputWriter.#ctor(Xunit.ITestContextAccessor,System.Boolean,System.Boolean)">
            <summary/>
        </member>
        <member name="P:Xunit.Internal.ConsoleCaptureTestOutputWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Internal.ConsoleCaptureTestOutputWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Internal.ConsoleCaptureTestOutputWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Internal.ConsoleCaptureTestOutputWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Internal.ConsoleCaptureTestOutputWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Internal.FixtureMappingManagerExtensions">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FixtureMappingManagerExtensions.GetFixtureCache(Xunit.v3.FixtureMappingManager)">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="T:Xunit.Internal.MessageBus">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.MessageBus.#ctor(Xunit.Sdk.IMessageSink,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.MessageBus.Dispose">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.MessageBus.QueueMessage(Xunit.Sdk.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.PreserveWorkingFolder">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.PreserveWorkingFolder.#ctor(Xunit.Sdk.ITestAssembly)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.PreserveWorkingFolder.Dispose">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.SynchronousMessageBus">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
            <summary/>
        </member>
        <member name="M:Xunit.Internal.SynchronousMessageBus.#ctor(Xunit.Sdk.IMessageSink,System.Boolean)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
            <summary/>
        </member>
        <member name="M:Xunit.Internal.SynchronousMessageBus.Dispose">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.SynchronousMessageBus.QueueMessage(Xunit.Sdk.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.TestContextInternal">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.TestContextInternal.Current">
            <summary>
            INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.TestContextInternal.DiagnosticMessageSink">
            <summary>
            INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.TestContextInternal.InternalDiagnosticMessageSink">
            <summary>
            INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.TestContextInternal.TestClassInstance">
            <summary>
            INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.TestContextInternal.TestState">
            <summary>
            INTERNAL PROPERTY. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TestContextInternal.Dispose">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TestContextInternal.SendInternalDiagnosticMessage(System.String)">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TestContextInternal.SendInternalDiagnosticMessage(System.String,System.Object)">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TestContextInternal.SendInternalDiagnosticMessage(System.String,System.Object,System.Object)">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TestContextInternal.SendInternalDiagnosticMessage(System.String,System.Object,System.Object,System.Object)">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TestContextInternal.SendInternalDiagnosticMessage(System.String,System.Object[])">
            <summary>
            INTERNAL METHOD. DO NOT USE.
            </summary>
        </member>
        <member name="T:Xunit.Internal.TraceAssertOverrideListener">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TraceAssertOverrideListener.#ctor">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.TraceAssertOverrideListener.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Internal.TraceAssertOverrideListener.Fail(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.TraceAssertOverrideListener.Fail(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.TraceAssertOverrideListener.Write(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.TraceAssertOverrideListener.WriteLine(System.String)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.TraceCaptureTestOutputWriter">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.TraceCaptureTestOutputWriter.#ctor(Xunit.ITestContextAccessor)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.TraceCaptureTestOutputWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Internal.TraceCaptureTestOutputWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Internal.TraceCaptureTestOutputWriter.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestContextExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.ITestContext"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestContextExtensions.GetFixture``1(Xunit.ITestContext)">
            <summary>
            Gets a fixture that was attached to the test class. Will return <c>null</c> if there is
            no exact match for the requested fixture type, or if there is no test class (that is,
            if <see cref="P:Xunit.ITestContext.TestClass"/> returns <c>null</c>).
            </summary>
            <remarks>
            This may be a fixture attached via <see cref="T:Xunit.IClassFixture`1"/>, <see cref="T:Xunit.ICollectionFixture`1"/>,
            or <see cref="T:Xunit.AssemblyFixtureAttribute"/>.
            </remarks>
            <typeparam name="TFixture">The exact type of the fixture</typeparam>
            <returns>The fixture, if available; <c>null</c>, otherwise</returns>
        </member>
        <member name="T:Xunit.TheoryDataRowBaseExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.TheoryDataRowBase"/>.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRowBaseExtensions.WithExplicit``1(``0,System.Nullable{System.Boolean})">
            <summary>
            Sets the explicit flag on a theory data row.
            </summary>
            <param name="theoryDataRow">The theory data row</param>
            <param name="explicit">The value to use for whether this row is explicit</param>
        </member>
        <member name="M:Xunit.TheoryDataRowBaseExtensions.WithSkip``1(``0,System.String)">
            <summary>
            Sets the skip reason on a theory data row.
            </summary>
            <param name="theoryDataRow">The theory data row</param>
            <param name="skip">The value to use for the skip reason; pass <c>null</c> to not skip</param>
        </member>
        <member name="M:Xunit.TheoryDataRowBaseExtensions.WithTestDisplayName``1(``0,System.String)">
            <summary>
            Sets the test display name on a theory data row.
            </summary>
            <param name="theoryDataRow">The theory data row</param>
            <param name="testDisplayName">The value to use for the test display name; pass <c>null</c>
            to use the default display name</param>
        </member>
        <member name="M:Xunit.TheoryDataRowBaseExtensions.WithTimeout``1(``0,System.Nullable{System.Int32})">
            <summary>
            Sets the timeout on a theory data row.
            </summary>
            <param name="theoryDataRow">The theory data row</param>
            <param name="timeout">The value to use for timeout, in seconds; pass <c>null</c> to not
            have a timeout</param>
        </member>
        <member name="M:Xunit.TheoryDataRowBaseExtensions.WithTrait``1(``0,System.String,System.String)">
            <summary>
            Adds a single trait name/value pair to the theory data row.
            </summary>
            <param name="theoryDataRow">The theory data row</param>
            <param name="name">The name of the trait</param>
            <param name="value">The value of the trait</param>
        </member>
        <member name="T:Xunit.FactAttribute">
            <summary>
            Attribute that is applied to a method to indicate that it is a fact that should be run
            by the default test runner.
            </summary>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
        </member>
        <member name="M:Xunit.FactAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Attribute that is applied to a method to indicate that it is a fact that should be run
            by the default test runner.
            </summary>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
        </member>
        <member name="P:Xunit.FactAttribute.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.Skip">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.SkipExceptions">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.SkipType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.SkipUnless">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.SkipWhen">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.SourceFilePath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.SourceLineNumber">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.FactAttribute.Timeout">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CulturedFactAttributeDiscoverer">
            <summary>
            Discoverer class for <see cref="T:Xunit.CulturedFactAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.CulturedFactAttributeDiscoverer.Discover(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.IFactAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CulturedTheoryAttributeDiscoverer">
            <summary>
            Discoverer class for <see cref="T:Xunit.CulturedTheoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.CulturedTheoryAttributeDiscoverer.CreateTestCasesForDataRow(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.ITheoryAttribute,Xunit.ITheoryDataRow,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.CulturedTheoryAttributeDiscoverer.CreateTestCasesForTheory(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.v3.IXunitTestMethod,Xunit.v3.ITheoryAttribute)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.IAsyncLifetime">
            <summary>
            Used to provide asynchronous lifetime functionality. Currently supported:<br />
            - Test classes<br />
            - Classes used in <see cref="T:Xunit.IClassFixture`1"/><br />
            - Classes used in <see cref="T:Xunit.ICollectionFixture`1"/>.<br />
            - Classes used in <c>[assembly: <see cref="T:Xunit.AssemblyFixtureAttribute"/>()]</c>.
            </summary>
        </member>
        <member name="M:Xunit.IAsyncLifetime.InitializeAsync">
            <summary>
            Called immediately after the class has been created, before it is used.
            </summary>
        </member>
        <member name="T:Xunit.IClassFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-class fixture data. An instance of the fixture data is initialized just before
            the first test in the class is run (including <see cref="M:Xunit.IAsyncLifetime.InitializeAsync"/>
            if it's implemented). After all the tests in the test class have been run, it is cleaned up
            by calling <see cref="M:System.IAsyncDisposable.DisposeAsync"/> if it's implemented, or it falls back
            to <see cref="M:System.IDisposable.Dispose"/> if that's implemented. Class fixtures may have
            a public constructor which is either empty, or accepts one or more assembly and/or collection
            fixture objects as constructor arguments. To gain access to the fixture data from inside the
            test, a constructor argument should be added to the test class which/ exactly matches the
            <typeparamref name="TFixture"/>.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
        </member>
        <member name="T:Xunit.ICollectionFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-collection fixture data. An instance of the fixture data is initialized just before
            the first test in the collection is run (including <see cref="M:Xunit.IAsyncLifetime.InitializeAsync"/>
            if it's implemented). After all the tests in the collection have been run, it is cleaned up
            by calling <see cref="M:System.IAsyncDisposable.DisposeAsync"/> if it's implemented, or it falls back
            to <see cref="M:System.IDisposable.Dispose"/> if that's implemented. Collection fixtures may have
            a public constructor which is either empty, or accepts one or more assembly fixture objects
            as constructor arguments. To gain access to the fixture data from inside the test, a constructor
            argument should be added to the test class which exactly matches the <typeparamref name="TFixture"/>.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
        </member>
        <member name="T:Xunit.InlineDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from inline values.
            </summary>
            <param name="data">The data values to pass to the theory.</param>
        </member>
        <member name="M:Xunit.InlineDataAttribute.#ctor(System.Object[])">
            <summary>
            Provides a data source for a data theory, with the data coming from inline values.
            </summary>
            <param name="data">The data values to pass to the theory.</param>
        </member>
        <member name="P:Xunit.InlineDataAttribute.Data">
            <summary>
            Gets the data to be passed to the test.
            </summary>
        </member>
        <member name="M:Xunit.InlineDataAttribute.GetData(System.Reflection.MethodInfo,Xunit.Sdk.DisposalTracker)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.InlineDataAttribute.SupportsDiscoveryEnumeration">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.ITestContext">
            <summary>
            Represents the current state of the test pipeline.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.Attachments">
            <summary>
            Gets the attachments for the current test, if the engine is currently in the process of running a test;
            will return <c>null</c> outside of the context of a test.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.CancellationToken">
            <summary>
            Gets the cancellation token that is used to indicate that the test run should be
            aborted. Async tests should pass this along to any async functions that support
            cancellation tokens, to help speed up the cancellation process.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.KeyValueStorage">
            <summary>
            Stores key/value pairs that are available across all stages of the pipeline. Can be used
            to communicate between extensions at different execution stages, in both directions, as
            a single storage container is used for the entire pipeline.
            </summary>
            <remarks>
            This storage system is purely for communication between extension points. The values in here
            are thrown away after the pipeline execution is complete. It is strongly recommend that
            extensions either prefix their key names or use guaranteed unique IDs like GUIDs, to prevent
            collisions with other extension authors.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.PipelineStage">
            <summary>
            Gets the current test pipeline stage.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.Test">
            <summary>
            Gets the current test, if the engine is currently in the process of running a test;
            will return <c>null</c> outside of the context of a test.
            </summary>
            <remarks>
            When running with the default test framework implementation, the value here is likely
            to implement <see cref="T:Xunit.v3.IXunitTest"/>.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.TestAssembly">
            <summary>
            Gets the current test assembly, if the engine is currently in the process of running or
            discovering tests in assembly; will return <c>null</c> out of this context (this typically
            means the test framework itself is being created and initialized).
            </summary>
            <remarks>
            When running with the default test framework implementation, the value here is likely
            to implement <see cref="T:Xunit.v3.IXunitTestAssembly"/>.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.TestAssemblyStatus">
            <summary>
            Gets the current test engine status for the test assembly.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.TestCase">
            <summary>
            Gets the current test case, if the engine is currently in the process of running a
            test case; will return <c>null</c> outside of the context of a test case.
            </summary>
            <remarks>
            When running with the default test framework implementation, the value here is likely
            to implement <see cref="T:Xunit.v3.IXunitTestCase"/>.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.TestCaseStatus">
            <summary>
            Gets the current test engine status for the test case. Will only be available when <see cref="P:Xunit.ITestContext.TestCase"/>
            is not <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.TestClass">
            <summary>
            Gets the current test method, if the engine is currently in the process of running
            a test class; will return <c>null</c> outside of the context of a test class. Note that
            not all test framework implementations require that tests be based on classes, so this
            value may be <c>null</c> even if <see cref="P:Xunit.ITestContext.TestCase"/> is not <c>null</c>.
            </summary>
            <remarks>
            When running with the default test framework implementation, the value here is likely
            to implement <see cref="T:Xunit.v3.IXunitTestClass"/>.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.TestClassInstance">
            <summary>
            Gets the instance of the test class; will return <c>null</c> outside of the context of
            a test. Static test methods do not create test class instances, so this will always be <c>null</c>
            for static test methods.
            </summary>
            <remarks>
            This value will only be available when <see cref="P:Xunit.ITestContext.PipelineStage"/> is <see cref="F:Xunit.TestPipelineStage.TestExecution"/>
            and <see cref="P:Xunit.ITestContext.TestStatus"/> is <see cref="F:Xunit.TestEngineStatus.Running"/>, and only after the test class has been
            created. It will become <c>null</c> again immediately after the test class has been disposed.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.TestClassStatus">
            <summary>
            Gets the current test engine status for the test class. Will only be available when <see cref="P:Xunit.ITestContext.TestClass"/>
            is not <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.TestCollection">
            <summary>
            Gets the current test collection, if the engine is currently in the process of running
            a test collection; will return <c>null</c> outside of the context of a test collection.
            </summary>
            <remarks>
            When running with the default test framework implementation, the value here is likely
            to implement <see cref="T:Xunit.v3.IXunitTestCollection"/>.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.TestCollectionStatus">
            <summary>
            Gets the current test engine status for the test collection. Will only be available when
            <see cref="P:Xunit.ITestContext.TestCollection"/> is not <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.TestMethod">
            <summary>
            Gets the current test method, if the engine is currently in the process of running
            a test method; will return <c>null</c> outside of the context of a test method. Note that
            not all test framework implementations require that tests be based on methods, so this
            value may be <c>null</c> even if <see cref="P:Xunit.ITestContext.TestCase"/> is not <c>null</c>.
            </summary>
            <remarks>
            When running with the default test framework implementation, the value here is likely
            to implement <see cref="T:Xunit.v3.IXunitTestMethod"/>.
            </remarks>
        </member>
        <member name="P:Xunit.ITestContext.TestMethodStatus">
            <summary>
            Gets the current test engine status for the test method. Will only be available when <see cref="P:Xunit.ITestContext.TestMethod"/>
            is not <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.TestOutputHelper">
            <summary>
            Gets the output helper, which can be used to add output to the test. Will only be
            available when <see cref="P:Xunit.ITestContext.Test"/> is not <c>null</c>. Note that the value may still
            be <c>null</c> when <see cref="P:Xunit.ITestContext.Test"/> is not <c>null</c>, if the test framework
            implementation does not provide output helper support.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.TestState">
            <summary>
            Gets the current state of the test. Will only be available after the test has finished running.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.TestStatus">
            <summary>
            Gets the current test engine status for the test. Will only be available when <see cref="P:Xunit.ITestContext.Test"/>
            is not <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.ITestContext.Warnings">
            <summary>
            Gets the set of warnings associated with the current test. Will only be available when <see cref="P:Xunit.ITestContext.Test"/>
            is not <c>null</c>; will also return <c>null</c> if there have been no warnings issued.
            </summary>
        </member>
        <member name="M:Xunit.ITestContext.AddAttachment(System.String,System.String)">
            <summary>
            Adds an attachment that is a string value.
            </summary>
            <param name="name">The name of the attachment</param>
            <param name="value">The value of the attachment</param>
        </member>
        <member name="M:Xunit.ITestContext.AddAttachment(System.String,System.String,System.Boolean)">
            <summary>
            Adds an attachment that is a string value.
            </summary>
            <param name="name">The name of the attachment</param>
            <param name="value">The value of the attachment</param>
            <param name="replaceExistingValue">Set to <c>true</c> to allow an existing value to be replaced;
            set to <c>false</c> to throw an exception if an existing value already exists.</param>
        </member>
        <member name="M:Xunit.ITestContext.AddAttachment(System.String,System.Byte[],System.String)">
            <summary>
            Adds an attachment that is a binary value (represented by a byte array and media type).
            </summary>
            <param name="name">The name of the attachment</param>
            <param name="value">The value of the attachment</param>
            <param name="mediaType">The media type of the attachment; defaults to "application/octet-stream"</param>
            <remarks>
            The <paramref name="mediaType"/> value must be in the MIME "type/subtype" form, and does not support
            parameter values. The subtype is allowed to have a single "+" to denote specialization of the
            subtype (i.e., "application/xhtml+xml"). For more information on media types, see
            <see href="https://datatracker.ietf.org/doc/html/rfc2045#section-5.1"/>.
            </remarks>
        </member>
        <member name="M:Xunit.ITestContext.AddAttachment(System.String,System.Byte[],System.Boolean,System.String)">
            <summary>
            Adds an attachment that is a binary value (represented by a byte array and media type).
            </summary>
            <param name="name">The name of the attachment</param>
            <param name="value">The value of the attachment</param>
            <param name="replaceExistingValue">Set to <c>true</c> to allow an existing value to be replaced;
            set to <c>false</c> to throw an exception if an existing value already exists.</param>
            <param name="mediaType">The media type of the attachment; defaults to "application/octet-stream"</param>
            <remarks>
            The <paramref name="mediaType"/> value must be in the MIME "type/subtype" form, and does not support
            parameter values. The subtype is allowed to have a single "+" to denote specialization of the
            subtype (i.e., "application/xhtml+xml"). For more information on media types, see
            <see href="https://datatracker.ietf.org/doc/html/rfc2045#section-5.1"/>.
            </remarks>
        </member>
        <member name="M:Xunit.ITestContext.AddWarning(System.String)">
            <summary>
            Adds a warning to the test result.
            </summary>
            <param name="message">The warning message to be reported</param>
        </member>
        <member name="M:Xunit.ITestContext.CancelCurrentTest">
            <summary>
            Attempt to cancel the currently executing test, if one is executing. This will
            signal the <see cref="P:Xunit.ITestContext.CancellationToken"/> for cancellation.
            </summary>
        </member>
        <member name="M:Xunit.ITestContext.GetFixture(System.Type)">
            <summary>
            Gets a fixture that was attached to the test class. Will return <c>null</c> if there is
            no exact match for the requested fixture type, or if there is no test class (that is,
            if <see cref="P:Xunit.ITestContext.TestClass"/> returns <c>null</c>).
            </summary>
            <remarks>
            This may be a fixture attached via <see cref="T:Xunit.IClassFixture`1"/>, <see cref="T:Xunit.ICollectionFixture`1"/>,
            or <see cref="T:Xunit.AssemblyFixtureAttribute"/>.
            </remarks>
            <param name="fixtureType">The exact type of the fixture</param>
            <returns>The fixture, if available; <c>null</c>, otherwise</returns>
        </member>
        <member name="M:Xunit.ITestContext.SendDiagnosticMessage(System.String)">
            <summary>
            Sends a diagnostic message. Will only be visible if the end user has enabled diagnostic messages.
            See https://xunit.net/docs/configuration-files for configuration information.
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Xunit.ITestContext.SendDiagnosticMessage(System.String,System.Object)">
            <summary>
            Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages.
            See https://xunit.net/docs/configuration-files for configuration information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
        </member>
        <member name="M:Xunit.ITestContext.SendDiagnosticMessage(System.String,System.Object,System.Object)">
            <summary>
            Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages.
            See https://xunit.net/docs/configuration-files for configuration information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
        </member>
        <member name="M:Xunit.ITestContext.SendDiagnosticMessage(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages.
            See https://xunit.net/docs/configuration-files for configuration information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
            <param name="arg2">The value to replace {2} in the format string.</param>
        </member>
        <member name="M:Xunit.ITestContext.SendDiagnosticMessage(System.String,System.Object[])">
            <summary>
            Sends a formatted diagnostic message. Will only be visible if the end user has enabled diagnostic messages.
            See https://xunit.net/docs/configuration-files for configuration information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Xunit.ITestContextAccessor">
            <summary>
            Gives access to the current test context, which is considered to be an immutable snapshot of
            the current test state at the time it's retrieved.
            </summary>
        </member>
        <member name="P:Xunit.ITestContextAccessor.Current">
            <summary>
            Gets the current test context. If called outside of the text discovery or execution path,
            will return a test context that is in the <see cref="F:Xunit.TestPipelineStage.Unknown"/> stage.
            The current test context is a "snapshot in time" for when this/ property is called, so do
            not cache the instance across a single method boundary (or else/ you run the risk of having
            an out-of-date context).
            </summary>
        </member>
        <member name="T:Xunit.ITestOutputHelper">
            <summary>
            Represents a class which can be used to provide test output.
            </summary>
        </member>
        <member name="P:Xunit.ITestOutputHelper.Output">
            <summary>
            Gets the output provided by the test.
            </summary>
            <remarks>
            Note: This also ensures that any partial output that hasn't been reported yet gets reported.
            Calling in the middle of test execution is therefore not recommend.
            </remarks>
        </member>
        <member name="M:Xunit.ITestOutputHelper.Write(System.String)">
            <summary>
            Adds text to the output.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Xunit.ITestOutputHelper.Write(System.String,System.Object[])">
            <summary>
            Adds formatted text to the output.
            </summary>
            <param name="format">The message format</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.ITestOutputHelper.WriteLine(System.String)">
            <summary>
            Adds text to the output, followed by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Xunit.ITestOutputHelper.WriteLine(System.String,System.Object[])">
            <summary>
            Adds formatted text to the output, followed by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="format">The message format</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="T:Xunit.ITheoryDataRow">
            <summary>
            Represents a single row of theory data, along with optional metadata attached to the row.
            </summary>
        </member>
        <member name="P:Xunit.ITheoryDataRow.Explicit">
            <summary>
            Gets a flag that indicates that the data row should only be run explicitly. If the value is <c>null</c>,
            then it inherits its explicitness from the value of <see cref="P:Xunit.v3.IFactAttribute.Explicit"/>.
            </summary>
        </member>
        <member name="P:Xunit.ITheoryDataRow.Label">
            <summary>
            Gets the label to use for the data row. This value is used to help format the display name
            of the test.
            </summary>
            <remarks>
            * If the value is <c>null</c> (or not set), use the default behavior: <c>MethodName(...argument list...)</c><br/>
            * If the value is an empty string, use just the method name: <c>MethodName</c><br/>
            * For any other values, appends the label: <c>MethodName [label]</c>
            </remarks>
        </member>
        <member name="P:Xunit.ITheoryDataRow.Skip">
            <summary>
            Gets the skip reason for the test. When <c>null</c> is returned, the test is
            not skipped.
            </summary>
            <remarks>
            Skipping is conditional based on whether <see cref="P:Xunit.ITheoryDataRow.SkipWhen"/> or <see cref="P:Xunit.ITheoryDataRow.SkipUnless"/>
            is set.
            </remarks>
        </member>
        <member name="P:Xunit.ITheoryDataRow.SkipType">
            <summary>
            Gets the type to retrieve <see cref="P:Xunit.ITheoryDataRow.SkipUnless"/> or <see cref="P:Xunit.ITheoryDataRow.SkipWhen"/> from. If not set,
            then the property will be retrieved from the unit test class.
            </summary>
        </member>
        <member name="P:Xunit.ITheoryDataRow.SkipUnless">
            <summary>
            Gets the name of a public static property on the test class which returns <c>bool</c>
            to indicate whether the test should be skipped (<c>false</c>) or not (<c>true</c>).
            </summary>
            <remarks>
            This property cannot be set if <see cref="P:Xunit.ITheoryDataRow.SkipWhen"/> is set. Setting both will
            result in a failed test.<br />
            <br />
            To ensure compile-time safety and easier refactoring, use the <c>nameof</c> operator,
            e.g., <c>SkipUnless = nameof(IsConditionMet)</c>.
            </remarks>
        </member>
        <member name="P:Xunit.ITheoryDataRow.SkipWhen">
            <summary>
            Gets the name of a public static property on the test class which returns <c>bool</c>
            to indicate whether the test should be skipped (<c>true</c>) or not (<c>false</c>).
            </summary>
            <remarks>
            This property cannot be set if <see cref="P:Xunit.ITheoryDataRow.SkipUnless"/> is set. Setting both will
            result in a failed test.<br />
            <br />
            To ensure compile-time safety and easier refactoring, use the <c>nameof</c> operator,
            e.g., <c>SkipWhen = nameof(IsConditionMet)</c>.
            </remarks>
        </member>
        <member name="P:Xunit.ITheoryDataRow.TestDisplayName">
            <summary>
            Gets the display name for the test (replacing the default behavior, which would be to
            use <see cref="P:Xunit.v3.IDataAttribute.TestDisplayName"/> or <see cref="P:Xunit.v3.IFactAttribute.DisplayName"/>,
            or falling back to the default test display name based on <see cref="T:Xunit.Sdk.TestMethodDisplay"/>
            and <see cref="T:Xunit.Sdk.TestMethodDisplayOptions"/> in the configuration file).
            </summary>
        </member>
        <member name="P:Xunit.ITheoryDataRow.Timeout">
            <summary>
            A value greater than zero marks the test as having a timeout, and gets or sets the
            timeout (in milliseconds). A non-<c>null</c> value here overrides any inherited value
            from the <see cref="T:Xunit.v3.IDataAttribute"/> or the <see cref="T:Xunit.v3.ITheoryAttribute"/>.
            </summary>
            <remarks>
            WARNING: Using this with parallelization turned on will result in undefined behavior.
            Timeout is only supported when parallelization is disabled, either globally or with
            a parallelization-disabled test collection.
            </remarks>
        </member>
        <member name="P:Xunit.ITheoryDataRow.Traits">
            <summary>
            Gets the trait values associated with this theory data row. If there are none, you may either
            return a <c>null</c> or empty dictionary.
            </summary>
        </member>
        <member name="M:Xunit.ITheoryDataRow.GetData">
            <summary>
            Gets the theory data.
            </summary>
        </member>
        <member name="T:Xunit.MatrixTheoryData`2">
            <summary>
            Represents theory data which is created from the merging of two data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`2"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`3">
            <summary>
            Represents theory data which is created from the merging of three data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`3.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`3"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`4">
            <summary>
            Represents theory data which is created from the merging of four data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`4.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`4"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`5">
            <summary>
            Represents theory data which is created from the merging of five data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`5.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`5"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`6">
            <summary>
            Represents theory data which is created from the merging of six data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`6.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`6"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`7">
            <summary>
            Represents theory data which is created from the merging of seven data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`7.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`7"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`8">
            <summary>
            Represents theory data which is created from the merging of eight data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`8.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`8"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`9">
            <summary>
            Represents theory data which is created from the merging of nine data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
            <typeparam name="T9">Type of the ninth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`9.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.Collections.Generic.IEnumerable{`8})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`9"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
            <param name="dimension9">Data for the ninth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`10">
            <summary>
            Represents theory data which is created from the merging of ten data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
            <typeparam name="T9">Type of the ninth data dimension</typeparam>
            <typeparam name="T10">Type of the tenth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`10.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.Collections.Generic.IEnumerable{`8},System.Collections.Generic.IEnumerable{`9})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`10"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
            <param name="dimension9">Data for the ninth dimension</param>
            <param name="dimension10">Data for the tenth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`11">
            <summary>
            Represents theory data which is created from the merging of eleven data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
            <typeparam name="T9">Type of the ninth data dimension</typeparam>
            <typeparam name="T10">Type of the tenth data dimension</typeparam>
            <typeparam name="T11">Type of the eleventh data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`11.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.Collections.Generic.IEnumerable{`8},System.Collections.Generic.IEnumerable{`9},System.Collections.Generic.IEnumerable{`10})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`11"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
            <param name="dimension9">Data for the ninth dimension</param>
            <param name="dimension10">Data for the tenth dimension</param>
            <param name="dimension11">Data for the eleventh dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`12">
            <summary>
            Represents theory data which is created from the merging of twelve data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
            <typeparam name="T9">Type of the ninth data dimension</typeparam>
            <typeparam name="T10">Type of the tenth data dimension</typeparam>
            <typeparam name="T11">Type of the eleventh data dimension</typeparam>
            <typeparam name="T12">Type of the twelfth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`12.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.Collections.Generic.IEnumerable{`8},System.Collections.Generic.IEnumerable{`9},System.Collections.Generic.IEnumerable{`10},System.Collections.Generic.IEnumerable{`11})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`12"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
            <param name="dimension9">Data for the ninth dimension</param>
            <param name="dimension10">Data for the tenth dimension</param>
            <param name="dimension11">Data for the eleventh dimension</param>
            <param name="dimension12">Data for the twelfth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`13">
            <summary>
            Represents theory data which is created from the merging of thirteen data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
            <typeparam name="T9">Type of the ninth data dimension</typeparam>
            <typeparam name="T10">Type of the tenth data dimension</typeparam>
            <typeparam name="T11">Type of the eleventh data dimension</typeparam>
            <typeparam name="T12">Type of the twelfth data dimension</typeparam>
            <typeparam name="T13">Type of the thirteenth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`13.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.Collections.Generic.IEnumerable{`8},System.Collections.Generic.IEnumerable{`9},System.Collections.Generic.IEnumerable{`10},System.Collections.Generic.IEnumerable{`11},System.Collections.Generic.IEnumerable{`12})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`13"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
            <param name="dimension9">Data for the ninth dimension</param>
            <param name="dimension10">Data for the tenth dimension</param>
            <param name="dimension11">Data for the eleventh dimension</param>
            <param name="dimension12">Data for the twelfth dimension</param>
            <param name="dimension13">Data for the thirteenth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`14">
            <summary>
            Represents theory data which is created from the merging of fourteen data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
            <typeparam name="T9">Type of the ninth data dimension</typeparam>
            <typeparam name="T10">Type of the tenth data dimension</typeparam>
            <typeparam name="T11">Type of the eleventh data dimension</typeparam>
            <typeparam name="T12">Type of the twelfth data dimension</typeparam>
            <typeparam name="T13">Type of the thirteenth data dimension</typeparam>
            <typeparam name="T14">Type of the fourteenth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`14.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.Collections.Generic.IEnumerable{`8},System.Collections.Generic.IEnumerable{`9},System.Collections.Generic.IEnumerable{`10},System.Collections.Generic.IEnumerable{`11},System.Collections.Generic.IEnumerable{`12},System.Collections.Generic.IEnumerable{`13})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`14"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
            <param name="dimension9">Data for the ninth dimension</param>
            <param name="dimension10">Data for the tenth dimension</param>
            <param name="dimension11">Data for the eleventh dimension</param>
            <param name="dimension12">Data for the twelfth dimension</param>
            <param name="dimension13">Data for the thirteenth dimension</param>
            <param name="dimension14">Data for the fourteenth dimension</param>
        </member>
        <member name="T:Xunit.MatrixTheoryData`15">
            <summary>
            Represents theory data which is created from the merging of fifteen data streams by
            creating a matrix of the data.
            </summary>
            <typeparam name="T1">Type of the first data dimension</typeparam>
            <typeparam name="T2">Type of the second data dimension</typeparam>
            <typeparam name="T3">Type of the third data dimension</typeparam>
            <typeparam name="T4">Type of the fourth data dimension</typeparam>
            <typeparam name="T5">Type of the fifth data dimension</typeparam>
            <typeparam name="T6">Type of the sixth data dimension</typeparam>
            <typeparam name="T7">Type of the seventh data dimension</typeparam>
            <typeparam name="T8">Type of the eighth data dimension</typeparam>
            <typeparam name="T9">Type of the ninth data dimension</typeparam>
            <typeparam name="T10">Type of the tenth data dimension</typeparam>
            <typeparam name="T11">Type of the eleventh data dimension</typeparam>
            <typeparam name="T12">Type of the twelfth data dimension</typeparam>
            <typeparam name="T13">Type of the thirteenth data dimension</typeparam>
            <typeparam name="T14">Type of the fourteenth data dimension</typeparam>
            <typeparam name="T15">Type of the fifteenth data dimension</typeparam>
        </member>
        <member name="M:Xunit.MatrixTheoryData`15.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},System.Collections.Generic.IEnumerable{`3},System.Collections.Generic.IEnumerable{`4},System.Collections.Generic.IEnumerable{`5},System.Collections.Generic.IEnumerable{`6},System.Collections.Generic.IEnumerable{`7},System.Collections.Generic.IEnumerable{`8},System.Collections.Generic.IEnumerable{`9},System.Collections.Generic.IEnumerable{`10},System.Collections.Generic.IEnumerable{`11},System.Collections.Generic.IEnumerable{`12},System.Collections.Generic.IEnumerable{`13},System.Collections.Generic.IEnumerable{`14})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.MatrixTheoryData`15"/> class.
            </summary>
            <param name="dimension1">Data for the first dimension</param>
            <param name="dimension2">Data for the second dimension</param>
            <param name="dimension3">Data for the third dimension</param>
            <param name="dimension4">Data for the fourth dimension</param>
            <param name="dimension5">Data for the fifth dimension</param>
            <param name="dimension6">Data for the sixth dimension</param>
            <param name="dimension7">Data for the seventh dimension</param>
            <param name="dimension8">Data for the eighth dimension</param>
            <param name="dimension9">Data for the ninth dimension</param>
            <param name="dimension10">Data for the tenth dimension</param>
            <param name="dimension11">Data for the eleventh dimension</param>
            <param name="dimension12">Data for the twelfth dimension</param>
            <param name="dimension13">Data for the thirteenth dimension</param>
            <param name="dimension14">Data for the fourteenth dimension</param>
            <param name="dimension15">Data for the fifteenth dimension</param>
        </member>
        <member name="T:Xunit.MemberDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from one of the following sources:
            1. A public static property
            2. A public static field
            3. A public static method (with parameters)
            </summary>
            <remarks>
            The member must return data in a form that is compatible, which means collections of <c>object?[]</c>,
            <c>ITheoryDataRow</c>, or tuple values. Those collections may come via <see cref="T:System.Collections.Generic.IEnumerable`1"/> or
            <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>, and those collections may optionally be wrapped in either
            <see cref="T:System.Threading.Tasks.Task`1"/> or <see cref="T:System.Threading.Tasks.ValueTask`1"/>.
            </remarks>
            <param name="memberName">
            The name of the public static member on the test class that will provide the test data
            It is recommended to use the <c>nameof</c> operator to ensure compile-time safety, e.g., <c>nameof(SomeMemberName)</c>.
            </param>
            <param name="arguments">The arguments to be passed to the member (only supported for methods; ignored for everything else)</param>
        </member>
        <member name="M:Xunit.MemberDataAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Provides a data source for a data theory, with the data coming from one of the following sources:
            1. A public static property
            2. A public static field
            3. A public static method (with parameters)
            </summary>
            <remarks>
            The member must return data in a form that is compatible, which means collections of <c>object?[]</c>,
            <c>ITheoryDataRow</c>, or tuple values. Those collections may come via <see cref="T:System.Collections.Generic.IEnumerable`1"/> or
            <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>, and those collections may optionally be wrapped in either
            <see cref="T:System.Threading.Tasks.Task`1"/> or <see cref="T:System.Threading.Tasks.ValueTask`1"/>.
            </remarks>
            <param name="memberName">
            The name of the public static member on the test class that will provide the test data
            It is recommended to use the <c>nameof</c> operator to ensure compile-time safety, e.g., <c>nameof(SomeMemberName)</c>.
            </param>
            <param name="arguments">The arguments to be passed to the member (only supported for methods; ignored for everything else)</param>
        </member>
        <member name="T:Xunit.Record">
            <summary>
            Allows the user to record actions for a test.
            </summary>
        </member>
        <member name="M:Xunit.Record.Exception(System.Action)">
            <summary>
            Records any exception which is thrown by the given code.
            </summary>
            <param name="testCode">The code which may throw an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Record.Exception(System.Func{System.Object})">
            <summary>
            Records any exception which is thrown by the given code that has
            a return value. Generally used for testing property accessors.
            </summary>
            <param name="testCode">The code which may throw an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="M:Xunit.Record.Exception(System.Func{System.Threading.Tasks.Task})">
            <summary/>
        </member>
        <member name="M:Xunit.Record.ExceptionAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Records any exception which is thrown by the given task.
            </summary>
            <param name="testCode">The task which may throw an exception.</param>
            <returns>Returns the exception that was thrown by the code; null, otherwise.</returns>
        </member>
        <member name="T:Xunit.TestCaseOrdererAttribute">
            <summary>
            Used to decorate an assembly, test collection, or test class to allow
            the use of a custom test case orderer.
            </summary>
            <param name="ordererType">The orderer type; must implement <see cref="T:Xunit.v3.ITestCaseOrderer"/></param>
        </member>
        <member name="M:Xunit.TestCaseOrdererAttribute.#ctor(System.Type)">
            <summary>
            Used to decorate an assembly, test collection, or test class to allow
            the use of a custom test case orderer.
            </summary>
            <param name="ordererType">The orderer type; must implement <see cref="T:Xunit.v3.ITestCaseOrderer"/></param>
        </member>
        <member name="P:Xunit.TestCaseOrdererAttribute.OrdererType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCollectionOrdererAttribute">
            <summary>
            Used to decorate an assembly to allow the use of a custom test collection orderer.
            </summary>
            <param name="ordererType">The orderer type; must implement <see cref="T:Xunit.v3.ITestCollectionOrderer"/></param>
        </member>
        <member name="M:Xunit.TestCollectionOrdererAttribute.#ctor(System.Type)">
            <summary>
            Used to decorate an assembly to allow the use of a custom test collection orderer.
            </summary>
            <param name="ordererType">The orderer type; must implement <see cref="T:Xunit.v3.ITestCollectionOrderer"/></param>
        </member>
        <member name="P:Xunit.TestCollectionOrdererAttribute.OrdererType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestContext">
            <summary>
            Represents information about the current state of the test engine. It may be available at
            various points during the execution pipeline, so consumers must always take care to ensure
            that they check for <c>null</c> values from the various properties.
            </summary>
        </member>
        <member name="P:Xunit.TestContext.Attachments">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.CancellationToken">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.Current">
            <summary>
            Gets the current test context. If called outside of the test discovery or execution path,
            will return a test context that is in the <see cref="F:Xunit.TestPipelineStage.Unknown"/> stage.
            The current test context is a "snapshot in time" for when this property is called, so do
            not cache the instance across a single method boundary (or else you run the risk of having
            an out-of-date context).
            </summary>
        </member>
        <member name="P:Xunit.TestContext.KeyValueStorage">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.PipelineStage">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.Test">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestAssembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestAssemblyStatus">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestCase">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestCaseStatus">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestClass">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestClassInstance">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestClassStatus">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestCollectionStatus">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestMethod">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestMethodStatus">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestOutputHelper">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestState">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.TestStatus">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TestContext.Warnings">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.AddAttachment(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.AddAttachment(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.AddAttachment(System.String,System.Byte[],System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.AddAttachment(System.String,System.Byte[],System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.AddWarning(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.CancelCurrentTest">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.GetFixture(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.SendDiagnosticMessage(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.SendDiagnosticMessage(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.SendDiagnosticMessage(System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.SendDiagnosticMessage(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.SendDiagnosticMessage(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TestContext.SetForInitialization(Xunit.Sdk.IMessageSink,System.Boolean,System.Boolean)">
            <summary>
            Sets the test context for test framework initialization. This is the moment before any specific assembly is
            being discovered or run. This is typically used by custom runners just before they create the test framework
            via a call to <see cref="M:Xunit.v3.ExtensibilityPointFactory.GetTestFramework(System.Reflection.Assembly)"/>.
            </summary>
            <param name="diagnosticMessageSink">The optional message sink used to receive <see cref="T:Xunit.Sdk.IDiagnosticMessage"/>
            and <see cref="T:Xunit.Sdk.IInternalDiagnosticMessage"/> instances.</param>
            <param name="diagnosticMessages">A flag to indicate whether the user wants to receive diagnostic messages</param>
            <param name="internalDiagnosticMessages">A flag to indicate whether the user wants to receive internal diagnostic messages</param>
        </member>
        <member name="M:Xunit.TestContext.SetForTest(Xunit.Sdk.ITest,Xunit.TestEngineStatus,System.Threading.CancellationToken,Xunit.TestResultState,Xunit.ITestOutputHelper,System.Object)">
            <summary>
            Sets the test context for execution of a test. This assumes an existing test context already exists from which
            it can pull the diagnostic and internal diagnostic message sinks.
            </summary>
            <param name="test">The test that is being executed</param>
            <param name="testStatus">The test status (valid values: <see cref="F:Xunit.TestEngineStatus.Initializing"/>,
            <see cref="F:Xunit.TestEngineStatus.Running"/>, and <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>)</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
            <param name="testState">The state of the test (only required when <paramref name="testStatus"/>
            is <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>).</param>
            <param name="testOutputHelper">The test output helper that the test can use to write output. Must be passed
            when <paramref name="testStatus"/> is <see cref="F:Xunit.TestEngineStatus.Initializing"/>; can be <c>null</c> for
            other statuses (as it will be pulled from the existing test context).</param>
            <param name="testClassInstance">The instance of the test class (may be <c>null</c> for static class and
            before the test class has been created)</param>
        </member>
        <member name="M:Xunit.TestContext.SetForTestAssembly(Xunit.Sdk.ITestAssembly,Xunit.TestEngineStatus,System.Threading.CancellationToken)">
            <summary>
            Sets the test context for discovery or execution of a test assembly. This assumes an existing test context already exists
            from which it can pull the diagnostic and internal diagnostic message sinks.
            </summary>
            <param name="testAssembly">The test assembly that is being executed</param>
            <param name="testAssemblyStatus">The test assembly status</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="M:Xunit.TestContext.SetForTestCase(Xunit.Sdk.ITestCase,Xunit.TestEngineStatus,System.Threading.CancellationToken)">
            <summary>
            Sets the test context for execution of a test case. This assumes an existing test context already exists from which
            it can pull the diagnostic and internal diagnostic message sinks.
            </summary>
            <param name="testCase">The test case that is being executed</param>
            <param name="testCaseStatus">The test case status (valid values: <see cref="F:Xunit.TestEngineStatus.Initializing"/>,
            <see cref="F:Xunit.TestEngineStatus.Running"/>, and <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>)</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="M:Xunit.TestContext.SetForTestClass(Xunit.Sdk.ITestClass,Xunit.TestEngineStatus,System.Threading.CancellationToken,Xunit.v3.FixtureMappingManager)">
            <summary>
            Sets the test context for execution of a test class. This assumes an existing test context already exists from which
            it can pull the diagnostic and internal diagnostic message sinks.
            </summary>
            <param name="testClass">The test class that is being executed</param>
            <param name="testClassStatus">The test class status (valid values: <see cref="F:Xunit.TestEngineStatus.Initializing"/>,
            <see cref="F:Xunit.TestEngineStatus.Running"/>, and <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>)</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
            <param name="fixtures">The fixtures that are available to the test class</param>
        </member>
        <member name="M:Xunit.TestContext.SetForTestCollection(Xunit.Sdk.ITestCollection,Xunit.TestEngineStatus,System.Threading.CancellationToken)">
            <summary>
            Sets the test context for execution of a test collection. This assumes an existing test context already exists from which
            it can pull the diagnostic and internal diagnostic message sinks.
            </summary>
            <param name="testCollection">The test collection that is being executed</param>
            <param name="testCollectionStatus">The test collection status (valid values: <see cref="F:Xunit.TestEngineStatus.Initializing"/>,
            <see cref="F:Xunit.TestEngineStatus.Running"/>, and <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>)</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="M:Xunit.TestContext.SetForTestMethod(Xunit.Sdk.ITestMethod,Xunit.TestEngineStatus,System.Threading.CancellationToken)">
            <summary>
            Sets the test context for execution of a test method. This assumes an existing test context already exists from which
            it can pull the diagnostic and internal diagnostic message sinks.
            </summary>
            <param name="testMethod">The test method that is being executed</param>
            <param name="testMethodStatus">The test method status (valid values: <see cref="F:Xunit.TestEngineStatus.Initializing"/>,
            <see cref="F:Xunit.TestEngineStatus.Running"/>, and <see cref="F:Xunit.TestEngineStatus.CleaningUp"/>)</param>
            <param name="cancellationToken">The cancellation token used to cancel execution</param>
        </member>
        <member name="T:Xunit.TestEngineStatus">
            <summary>
            Represents the current status of the execution of the test engine, with respect to
            a phase in the execution pipeline (for example, engine status for a test collection vs.
            test case vs. test).
            </summary>
        </member>
        <member name="F:Xunit.TestEngineStatus.Initializing">
            <summary>
            The test engine is in the initialization phase of the given stage in the pipeline.
            </summary>
        </member>
        <member name="F:Xunit.TestEngineStatus.Running">
            <summary>
            The test engine is running the given state of the pipeline.
            </summary>
        </member>
        <member name="F:Xunit.TestEngineStatus.CleaningUp">
            <summary>
            The test engine has run the given stage of the pipeline, and is currently doing clean up (f.e., Dispose).
            </summary>
        </member>
        <member name="F:Xunit.TestEngineStatus.Discovering">
            <summary>
            The test engine is in the process of discovering tests.
            </summary>
        </member>
        <member name="T:Xunit.TestFrameworkAttribute">
            <summary>
            Used to decorate an assembly to allow the use of a custom test framework.
            </summary>
            <param name="frameworkType">The framework type; must implement <see cref="T:Xunit.v3.ITestFramework"/></param>
        </member>
        <member name="M:Xunit.TestFrameworkAttribute.#ctor(System.Type)">
            <summary>
            Used to decorate an assembly to allow the use of a custom test framework.
            </summary>
            <param name="frameworkType">The framework type; must implement <see cref="T:Xunit.v3.ITestFramework"/></param>
        </member>
        <member name="P:Xunit.TestFrameworkAttribute.FrameworkType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestPipelineStage">
            <summary>
            A flag to indicate which part of the test pipeline you're in. Retrieved from an
            instance of <see cref="T:Xunit.TestContext"/>.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.Unknown">
            <summary>
            Indicates an unknown state of the test pipeline, or being outside of the test pipeline.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.Initialization">
            <summary>
            Indicates that the test pipeline is still in the initialization phase and hasn't begun work.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.Discovery">
            <summary>
            Indicates that tests are currently being discovered.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.TestAssemblyExecution">
            <summary>
            Inidicates that the test pipeline is executing a test assembly.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.TestCollectionExecution">
            <summary>
            Inidicates that the test pipeline is executing a test collection.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.TestClassExecution">
            <summary>
            Inidicates that the test pipeline is executing a test class.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.TestMethodExecution">
            <summary>
            Inidicates that the test pipeline is executing a test method.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.TestCaseExecution">
            <summary>
            Inidicates that the test pipeline is executing a test case.
            </summary>
        </member>
        <member name="F:Xunit.TestPipelineStage.TestExecution">
            <summary>
            Inidicates that the test pipeline is executing a test.
            </summary>
        </member>
        <member name="T:Xunit.TestResult">
            <summary>
            Indicates the result of running the test.
            </summary>
        </member>
        <member name="F:Xunit.TestResult.Passed">
            <summary>
            The test passed.
            </summary>
        </member>
        <member name="F:Xunit.TestResult.Failed">
            <summary>
            The test failed.
            </summary>
        </member>
        <member name="F:Xunit.TestResult.Skipped">
            <summary>
            The test was skipped.
            </summary>
        </member>
        <member name="F:Xunit.TestResult.NotRun">
            <summary>
            The test was not run because it was excluded (either because it was marked as explicit
            and explicit tests weren't run, or because it was marked as not explicit as only explicit
            tests were run).
            </summary>
        </member>
        <member name="T:Xunit.TestResultState">
            <summary>
            Represents information about the current state of a test after it has run.
            </summary>
        </member>
        <member name="P:Xunit.TestResultState.ExceptionMessages">
            <summary>
            Gets the message(s) of the exception(s). This value is only available
            when <see cref="P:Xunit.TestResultState.Result"/> is <see cref="F:Xunit.TestResult.Failed"/>.
            </summary>
        </member>
        <member name="P:Xunit.TestResultState.ExceptionParentIndices">
            <summary>
            Gets the parent exception index(es) for the exception(s); a -1 indicates
            that the exception in question has no parent. This value is only available
            when <see cref="P:Xunit.TestResultState.Result"/> is <see cref="F:Xunit.TestResult.Failed"/>.
            </summary>
        </member>
        <member name="P:Xunit.TestResultState.ExceptionStackTraces">
            <summary>
            Gets the stack trace(s) of the exception(s). This value is only available
            when <see cref="P:Xunit.TestResultState.Result"/> is <see cref="F:Xunit.TestResult.Failed"/>.
            </summary>
        </member>
        <member name="P:Xunit.TestResultState.ExceptionTypes">
            <summary>
            Gets the fully-qualified type name(s) of the exception(s). This value is
            only available when <see cref="P:Xunit.TestResultState.Result"/> is <see cref="F:Xunit.TestResult.Failed"/>.
            </summary>
        </member>
        <member name="P:Xunit.TestResultState.ExecutionTime">
            <summary>
            Gets the amount of time the test ran, in seconds. The value may be <c>0</c> if no
            test code was run (for example, a statically skipped test). Note that the value may
            be a partial value because of further timing being done while cleaning up.
            </summary>
        </member>
        <member name="P:Xunit.TestResultState.FailureCause">
            <summary>
            Gets a value which indicates what the cause of the test failure was. This value is only
            available when <see cref="P:Xunit.TestResultState.Result"/> is <see cref="F:Xunit.TestResult.Failed"/>.
            </summary>
        </member>
        <member name="P:Xunit.TestResultState.Result">
            <summary>
            Returns the result from the test run.
            </summary>
        </member>
        <member name="M:Xunit.TestResultState.ForNotRun(System.Nullable{System.Decimal})">
            <summary>
            Create a not run test result.
            </summary>
            <param name="executionTime">The optional execution time</param>
        </member>
        <member name="M:Xunit.TestResultState.ForPassed(System.Nullable{System.Decimal})">
            <summary>
            Create a passing test result.
            </summary>
            <param name="executionTime">The optional execution time</param>
        </member>
        <member name="M:Xunit.TestResultState.ForSkipped(System.Nullable{System.Decimal})">
            <summary>
            Create a skipped test result.
            </summary>
            <param name="executionTime">The optional execution time</param>
        </member>
        <member name="M:Xunit.TestResultState.FromException(System.Decimal,System.Exception)">
            <summary>
            Creates an instance based on the presence or absence of an exception. If the exception
            is <c>null</c>, then it will be for <see cref="F:Xunit.TestResult.Passed"/>; otherwise, it will
            be for <see cref="F:Xunit.TestResult.Failed"/>;
            </summary>
            <param name="executionTime">The time spent executing the test</param>
            <param name="exception">The exception, if the test failed</param>
        </member>
        <member name="M:Xunit.TestResultState.FromTestResult(Xunit.Sdk.ITestResultMessage)">
            <summary>
            Creates an instance based on inspecting the type identity of the
            <paramref name="testResult"/> instance.
            </summary>
            <param name="testResult">The test result</param>
        </member>
        <member name="T:Xunit.TheoryAttribute">
            <summary>
            Attribute that is applied to a method to indicate that it is a data theory that should be run
            by the default test runner.
            </summary>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <remarks>
            Data theories are tests which are fed data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed multiple times (once with each
            data row). Data is provided by attributes which implement <see cref="T:Xunit.v3.IDataAttribute"/> (most commonly,
            <see cref="T:Xunit.InlineDataAttribute"/> and <see cref="T:Xunit.MemberDataAttribute"/>).
            </remarks>
        </member>
        <member name="M:Xunit.TheoryAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Attribute that is applied to a method to indicate that it is a data theory that should be run
            by the default test runner.
            </summary>
            <param name="sourceFilePath">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <param name="sourceLineNumber">This parameter is provided automatically by the compiler. Do not pass a value for it.</param>
            <remarks>
            Data theories are tests which are fed data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed multiple times (once with each
            data row). Data is provided by attributes which implement <see cref="T:Xunit.v3.IDataAttribute"/> (most commonly,
            <see cref="T:Xunit.InlineDataAttribute"/> and <see cref="T:Xunit.MemberDataAttribute"/>).
            </remarks>
        </member>
        <member name="P:Xunit.TheoryAttribute.DisableDiscoveryEnumeration">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryAttribute.SkipTestWithoutData">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryDataBase`2">
            <summary>
            Provides a base type for theories based on collection initialization syntax.
            </summary>
            <typeparam name="TTheoryDataRow">The type of the theory data row (must implement <see cref="T:Xunit.ITheoryDataRow"/>).</typeparam>
            <typeparam name="TRawDataRow">The raw data row that requires conversion to <typeparamref name="TTheoryDataRow"/>.</typeparam>
        </member>
        <member name="P:Xunit.TheoryDataBase`2.Count">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.Add(`1)">
            <summary>
            Adds a row to the theory.
            </summary>
            <param name="row">The row of data to be added.</param>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.Add(`0)">
            <summary>
            Adds a row to the theory.
            </summary>
            <param name="row">The row of data to be added.</param>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds multiple rows to the theory.
            </summary>
            <param name="rows">The rows of data to be added.</param>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.AddRange(`1[])">
            <summary>
            Adds multiple rows to the theory.
            </summary>
            <param name="rows">The rows of data to be added.</param>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple rows to the theory.
            </summary>
            <param name="rows">The rows of data to be added.</param>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.AddRange(`0[])">
            <summary>
            Adds multiple rows to the theory.
            </summary>
            <param name="rows">The rows of data to be added.</param>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.Convert(`1)">
            <summary>
            Convert untyped values into the appropriate theory data row.
            </summary>
            <param name="row">The raw data row</param>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataBase`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData">
            <summary>
            Represents an untyped set of data for a theory with an unknown number
            of parameters.
            </summary>
            <remarks>
            It is strongly recommended that you use <see cref="T:Xunit.TheoryDataBase`2"/>
            as the base type for any strongly typed collections, because it will provide both
            strong compiler support and wider collection initialization syntax support.
            </remarks>
        </member>
        <member name="M:Xunit.TheoryData.Convert(System.Object[])">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`1">
            <summary>
            Represents a set of data for a theory with one parameter. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`1"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`1"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`1"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`1.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`1"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`1.#ctor(Xunit.TheoryDataRow{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`1"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`1.Add(Xunit.TheoryDataRow{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryData`1.Convert(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`2">
            <summary>
            Represents a set of data for a theory with two parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`2"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`2"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`2.#ctor(System.ValueTuple{`0,`1}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`2"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`2.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`2"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`2.#ctor(Xunit.TheoryDataRow{`0,`1}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`2"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`2.Add(`0,`1)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`2.Convert(System.ValueTuple{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`3">
            <summary>
            Represents a set of data for a theory with three parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`3"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`3.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`3"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`3.#ctor(System.ValueTuple{`0,`1,`2}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`3"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`3.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`3"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`3.#ctor(Xunit.TheoryDataRow{`0,`1,`2}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`3"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`3.Add(`0,`1,`2)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`3.Convert(System.ValueTuple{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`4">
            <summary>
            Represents a set of data for a theory with four parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`4"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`4.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`4"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`4.#ctor(System.ValueTuple{`0,`1,`2,`3}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`4"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`4.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`4"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`4.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`4"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`4.Add(`0,`1,`2,`3)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`4.Convert(System.ValueTuple{`0,`1,`2,`3})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`5">
            <summary>
            Represents a set of data for a theory with five parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`5.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`5"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`5.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`5"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`5.#ctor(System.ValueTuple{`0,`1,`2,`3,`4}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`5"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`5.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`5"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`5.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`5"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`5.Add(`0,`1,`2,`3,`4)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`5.Convert(System.ValueTuple{`0,`1,`2,`3,`4})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`6">
            <summary>
            Represents a set of data for a theory with six parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`6"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`6.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`6"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`6.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`6"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`6.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`6"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`6.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`6"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`6.Add(`0,`1,`2,`3,`4,`5)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`6.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`7">
            <summary>
            Represents a set of data for a theory with seven parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`7.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`7"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`7.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`7"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`7.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`7"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`7.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`7"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`7.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`7"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`7.Add(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`7.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`8">
            <summary>
            Represents a set of data for a theory with eight parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`8.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`8"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`8.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`8"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`8.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`8"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`8.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`8"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`8.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`8"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`8.Add(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`8.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`9">
            <summary>
            Represents a set of data for a theory with nine parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`9.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`9"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`9.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`9"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`9.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`9"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`9.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`9"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`9.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`9"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`9.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`9.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`10">
            <summary>
            Represents a set of data for a theory with ten parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`10.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`10"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`10.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`10"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`10.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`10"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`10.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`10"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`10.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`10"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`10.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`10.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`11">
            <summary>
            Represents a set of data for a theory with eleven parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`11.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`11"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`11.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`11"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`11.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`11"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`11.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`11"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`11.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`11"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`11.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`11.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`12">
            <summary>
            Represents a set of data for a theory with twelve parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`12.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`12"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`12.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`12"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`12.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`12"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`12.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`12"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`12.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`12"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`12.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`12.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`13">
            <summary>
            Represents a set of data for a theory with thirteen parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`13.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`13"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`13.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`13"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`13.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`13"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`13.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`13"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`13.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`13"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`13.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`13.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`14">
            <summary>
            Represents a set of data for a theory with fourteen parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <typeparam name="T14">The fourteenth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`14.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`14"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`14.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`14"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`14.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`14"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`14.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`14"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`14.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`14"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`14.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
            <param name="p14">The fourteenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`14.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryData`15">
            <summary>
            Represents a set of data for a theory with fifteen parameters. Data can
            be added to the data set using the collection initializer syntax.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <typeparam name="T14">The fourteenth parameter type.</typeparam>
            <typeparam name="T15">The fifteenth parameter type.</typeparam>
        </member>
        <member name="M:Xunit.TheoryData`15.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`15"/> class.
            </summary>
        </member>
        <member name="M:Xunit.TheoryData`15.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`15"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`15.#ctor(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`15"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`15.#ctor(System.Collections.Generic.IEnumerable{Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`15"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`15.#ctor(Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TheoryData`15"/> class.
            </summary>
            <param name="values">The initial set of values</param>
        </member>
        <member name="M:Xunit.TheoryData`15.Add(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Adds data to the theory data set.
            </summary>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
            <param name="p14">The fourteenth data value.</param>
            <param name="p15">The fifteenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryData`15.Convert(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryDataRowBase">
            <summary>
            Provide a base implemention of <see cref="T:Xunit.ITheoryDataRow"/> with settable properties and
            deferred data storage.
            </summary>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.Explicit">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.Label">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.Skip">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.SkipType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.SkipUnless">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.SkipWhen">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.TestDisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.Timeout">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.TheoryDataRowBase.Traits">
            <summary>
            Gets or sets the traits for the theory data row.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRowBase.GetData">
            <summary>
            Override to implement <see cref="M:Xunit.ITheoryDataRow.GetData"/>.
            </summary>
        </member>
        <member name="T:Xunit.TheoryDataRow">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts untyped pre-enumerated data.
            </summary>
            <remarks>
            It is strongly recommended that you use one of the generic typed variations when possible,
            as this provides type-safety from the compiler and allows the analyzers to flag instances
            where data types from theory data don't match the data types in theory parameters.
            </remarks>
            <param name="data">The data for the theory row</param>
        </member>
        <member name="M:Xunit.TheoryDataRow.#ctor(System.Object[])">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts untyped pre-enumerated data.
            </summary>
            <remarks>
            It is strongly recommended that you use one of the generic typed variations when possible,
            as this provides type-safety from the compiler and allows the analyzers to flag instances
            where data types from theory data don't match the data types in theory parameters.
            </remarks>
            <param name="data">The data for the theory row</param>
        </member>
        <member name="P:Xunit.TheoryDataRow.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow.GetData">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TheoryDataRow`1">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts one typed value.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`1"/> class,
            encapsulating the one item of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`1.#ctor(`0)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts one typed value.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`1"/> class,
            encapsulating the one item of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`1.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`1.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`1.op_Implicit(`0)~Xunit.TheoryDataRow{`0}">
            <summary/>
        </member>
        <member name="M:Xunit.TheoryDataRow`1.op_Implicit(Xunit.TheoryDataRow{`0})~`0">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`2">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts two typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`2"/> class,
            encapsulating the two items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`2.#ctor(`0,`1)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts two typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`2"/> class,
            encapsulating the two items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`2.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`2.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`2.op_Implicit(System.ValueTuple{`0,`1})~Xunit.TheoryDataRow{`0,`1}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`3">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts three typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`3"/> class,
            encapsulating the three items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`3.#ctor(`0,`1,`2)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts three typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`3"/> class,
            encapsulating the three items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`3.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`3.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`3.op_Implicit(System.ValueTuple{`0,`1,`2})~Xunit.TheoryDataRow{`0,`1,`2}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`4">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts four typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`4"/> class,
            encapsulating the four items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts four typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`4"/> class,
            encapsulating the four items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`4.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`4.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`4.op_Implicit(System.ValueTuple{`0,`1,`2,`3})~Xunit.TheoryDataRow{`0,`1,`2,`3}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`5">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts five typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`5"/> class,
            encapsulating the five items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts five typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`5"/> class,
            encapsulating the five items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`5.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`5.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`5.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`6">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts six typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`6"/> class,
            encapsulating the six items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts six typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`6"/> class,
            encapsulating the six items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`6.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`6.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`6.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`7">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts seven typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`7"/> class,
            encapsulating the seven items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts seven typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`7"/> class,
            encapsulating the seven items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`7.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`7.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`7.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`8">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts eight typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`8"/> class,
            encapsulating the eight items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts eight typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`8"/> class,
            encapsulating the eight items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`8.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`8.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`8.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`9">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts nine typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`9"/> class,
            encapsulating the nine items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`9.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts nine typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`9"/> class,
            encapsulating the nine items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`9.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`9.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`9.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`10">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts ten typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`10"/> class,
            encapsulating the ten items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`10.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts ten typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`10"/> class,
            encapsulating the ten items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`10.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`10.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`10.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`11">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts eleven typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`11"/> class,
            encapsulating the eleven items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`11.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts eleven typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`11"/> class,
            encapsulating the eleven items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`11.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`11.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`11.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`12">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts twelve typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`12"/> class,
            encapsulating the twelve items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`12.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts twelve typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`12"/> class,
            encapsulating the twelve items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`12.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`12.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`12.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`13">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts thirteen typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`13"/> class,
            encapsulating the thirteen items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`13.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts thirteen typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`13"/> class,
            encapsulating the thirteen items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`13.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`13.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`13.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`14">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts fourteen typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <typeparam name="T14">The fourteenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`14"/> class,
            encapsulating the fourteen items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
            <param name="p14">The fourteenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`14.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts fourteen typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <typeparam name="T14">The fourteenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`14"/> class,
            encapsulating the fourteen items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
            <param name="p14">The fourteenth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`14.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`14.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`14.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}">
            <summary/>
        </member>
        <member name="T:Xunit.TheoryDataRow`15">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts fifteen typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <typeparam name="T14">The fourteenth parameter type.</typeparam>
            <typeparam name="T15">The fifteenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`15"/> class,
            encapsulating the fifteen items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
            <param name="p14">The fourteenth data value.</param>
            <param name="p15">The fifteenth data value.</param>
        </member>
        <member name="M:Xunit.TheoryDataRow`15.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14)">
            <summary>
            Implementation of <see cref="T:Xunit.ITheoryDataRow"/> which accepts fifteen typed values.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T5">The fifth parameter type.</typeparam>
            <typeparam name="T6">The sixth parameter type.</typeparam>
            <typeparam name="T7">The seventh parameter type.</typeparam>
            <typeparam name="T8">The eighth parameter type.</typeparam>
            <typeparam name="T9">The ninth parameter type.</typeparam>
            <typeparam name="T10">The tenth parameter type.</typeparam>
            <typeparam name="T11">The eleventh parameter type.</typeparam>
            <typeparam name="T12">The twelfth parameter type.</typeparam>
            <typeparam name="T13">The thirteenth parameter type.</typeparam>
            <typeparam name="T14">The fourteenth parameter type.</typeparam>
            <typeparam name="T15">The fifteenth parameter type.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.TheoryDataRow`15"/> class,
            encapsulating the fifteen items of typed data.
            </remarks>
            <param name="p1">The first data value.</param>
            <param name="p2">The second data value.</param>
            <param name="p3">The third data value.</param>
            <param name="p4">The fourth data value.</param>
            <param name="p5">The fifth data value.</param>
            <param name="p6">The sixth data value.</param>
            <param name="p7">The seventh data value.</param>
            <param name="p8">The eighth data value.</param>
            <param name="p9">The ninth data value.</param>
            <param name="p10">The tenth data value.</param>
            <param name="p11">The eleventh data value.</param>
            <param name="p12">The twelfth data value.</param>
            <param name="p13">The thirteenth data value.</param>
            <param name="p14">The fourteenth data value.</param>
            <param name="p15">The fifteenth data value.</param>
        </member>
        <member name="P:Xunit.TheoryDataRow`15.Data">
            <summary>
            Gets the row of data.
            </summary>
        </member>
        <member name="M:Xunit.TheoryDataRow`15.GetData">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.TheoryDataRow`15.op_Implicit(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,System.ValueTuple{`7,`8,`9,`10,`11,`12,`13,System.ValueTuple{`14}}})~Xunit.TheoryDataRow{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}">
            <summary/>
        </member>
        <member name="T:Xunit.TraitAttribute">
            <summary>
            Attribute used to decorate a test method, test class, or assembly with an arbitrary name/value pair ("trait").
            </summary>
            <param name="name">The trait name</param>
            <param name="value">The trait value</param>
        </member>
        <member name="M:Xunit.TraitAttribute.#ctor(System.String,System.String)">
            <summary>
            Attribute used to decorate a test method, test class, or assembly with an arbitrary name/value pair ("trait").
            </summary>
            <param name="name">The trait name</param>
            <param name="value">The trait value</param>
        </member>
        <member name="P:Xunit.TraitAttribute.Name">
            <summary>
            Get the trait name.
            </summary>
        </member>
        <member name="P:Xunit.TraitAttribute.Value">
            <summary>
            Gets the trait value.
            </summary>
        </member>
        <member name="M:Xunit.TraitAttribute.GetTraits">
            <inheritdoc/>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary/>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary/>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary/>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary/>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>
            Gets the identifier of the syntax used.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>
            Optional arguments associated with the specific syntax employed.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>
            The syntax identifier for strings containing composite formats for string formatting.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>
            The syntax identifier for strings containing date format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>
            The syntax identifier for strings containing date and time format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>
            The syntax identifier for strings containing JavaScript Object Notation (JSON).
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>
            The syntax identifier for strings containing numeric format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>
            The syntax identifier for strings containing regular expressions.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>
            The syntax identifier for strings containing time format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>
            The syntax identifier for strings containing URIs.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>
            The syntax identifier for strings containing XML.
            </summary>
        </member>
    </members>
</doc>
