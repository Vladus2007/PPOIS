<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit.v3.runner.common</name>
    </assembly>
    <members>
        <member name="T:Xunit.Runner.Common.IRegisterRunnerReporterAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate the availability of a custom
            runner reporter.
            </summary>
            <remarks>
            Runner reporter registration attributes are only valid at the assembly level.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.IRegisterRunnerReporterAttribute.RunnerReporterType">
            <summary>
            Gets the type of the runner reporter to be registered.
            </summary>
            <remarks>
            The runner reporter type must implement <see cref="T:Xunit.Runner.Common.IRunnerReporter"/>.
            </remarks>
        </member>
        <member name="T:Xunit.Runner.Common.IRunnerLogger">
            <summary>
            Interface implemented by runners, passed to <see cref="T:Xunit.Runner.Common.IRunnerReporter"/>, so that the
            report can log lines of text to the output device.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.IRunnerLogger.LockObject">
            <summary>
            Gets a lock object that can be used to ensure that multiple calls to
            log messages will always be grouped together.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLogger.LogMessage(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <summary>
            Logs a normal-priority message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLogger.LogImportantMessage(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <summary>
            Logs a high-priority message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLogger.LogWarning(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <summary>
            Logs a warning message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLogger.LogError(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <summary>
            Logs an error message with stack frame.
            </summary>
            <param name="stackFrame">The stack frame information</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLogger.LogRaw(System.String)">
            <summary>
            Logs a messages with as little processing as possible. For example, the console runner will
            not attempt to set the color of the text that's being logged. This is most useful when attempting
            to render text lines that will be processed, like for TeamCity.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLogger.WaitForAcknowledgment">
            <summary>
            Waits for an acknowledgement of a message.
            </summary>
            <remarks>
            This is primarily for use by <see cref="T:Xunit.Runner.Common.JsonReporterMessageHandler"/> so that it can wait for acknowledgment
            of messages when running in synchronous mode by the in-process runner. Other runner loggers running outside
            this context (and/or when not in synchronous automated mode) should NOOP for this.
            </remarks>
        </member>
        <member name="T:Xunit.Runner.Common.IRunnerReporter">
            <summary>
            This interface represents a reporter which is invoked by a test runner
            during test execution. The report can be explicitly invoked by a command
            line switch or implicitly invoked by being environmentally enabled (for
            example, a reporter that emits messages for TeamCity).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.IRunnerReporter.CanBeEnvironmentallyEnabled">
            <summary>
            Gets a value which indicates if it's possible for this reporter to be environmentally
            enabled.
            </summary>
            <remarks>
            Note that this differs from <see cref="P:Xunit.Runner.Common.IRunnerReporter.IsEnvironmentallyEnabled"/> which checks to see whether
            the conditions currently exist to environmentally enable the reporter. This value is used when
            constructing the console runner help output that lists which runners might be environmentally
            enabled.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.IRunnerReporter.Description">
            <summary>
            Gets the description of the reporter. This is typically used when showing
            the user the invocation option for the reporter.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.IRunnerReporter.ForceNoLogo">
            <summary>
            Gets a value which indicates whether this runner wishes to force no logo.
            Useful for runners which are designed for purely parseable output
            (for example, <see cref="T:Xunit.Runner.Common.JsonReporter"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.IRunnerReporter.IsEnvironmentallyEnabled">
            <summary>
            Gets a value which indicates whether the reporter should be
            environmentally enabled.
            </summary>
            <remarks>
            When a runner reporter is environmentally enabled in Microsoft Testing Platform
            CLI mode (or <c>dotnet test</c>), by default all realtime output is filtered except
            calls to <see cref="M:Xunit.Runner.Common.IRunnerLogger.LogRaw(System.String)"/> (unless the user has specified the
            <c>--xunit-info</c> switch). Environmentally enabled reporters that require
            realtime console output (for example, to send formatted messages to a CI system
            which parses the console output) must use <see cref="M:Xunit.Runner.Common.IRunnerLogger.LogRaw(System.String)"/> to
            ensure those messages will always be visible. All other messages will always be
            output to the Microsoft Testing Platform diagnostic logs, which are enabled via
            the <c>--diagnostic</c> switch.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.IRunnerReporter.RunnerSwitch">
            <summary>
            Gets a value which indicates a runner switch which can be used
            to explicitly enable the runner. If the return value is <c>null</c>,
            then the reported can only be environmentally enabled (implicitly).
            This value is used either as a command line switch (with the console or
            .NET CLI runner) or as a runner configuration value (with the MSBuild runner).
            </summary>
            <remarks>
            Runner switches are only used in xUnit.net native CLI mode. When Microsoft
            Testing Platform CLI mode is enabled, reporters are only supported via environmental
            enablement, since MTP generally controls all the normal output.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <summary>
            Creates a message handler that will report messages for the given
            test assembly.
            </summary>
            <param name="logger">The logger used to send result messages to</param>
            <param name="diagnosticMessageSink">An optional message sink that diagnostic messages can be sent to.</param>
            <returns>The message handler that handles the messages</returns>
        </member>
        <member name="T:Xunit.Runner.Common.IRunnerReporterMessageHandler">
            <summary>
            Indicates a message sink that's designed for use with runner reporters. In particular, this allows
            runner reporters to implement <see cref="T:System.IAsyncDisposable"/> and forces runners to dispose of the message
            handler that's returned to them.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.ConfigReader_Json">
            <summary>
            This class is used to read JSON-based configuration information for a test assembly.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConfigReader_Json.Load(Xunit.Runner.Common.TestAssemblyConfiguration,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Loads the test assembly configuration for the given test assembly.
            </summary>
            <param name="configuration">The configuration object to write the values to.</param>
            <param name="assemblyFileName">The test assembly.</param>
            <param name="configFileName">The test assembly configuration file.</param>
            <param name="warnings">A container to receive loading warnings, if desired.</param>
            <returns>A flag which indicates whether configuration values were read.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.ConfigReader_Json.LoadFromJson(Xunit.Runner.Common.TestAssemblyConfiguration,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Loads the test assembly configuration for the given test assembly.
            </summary>
            <param name="configuration">The configuration object to write the values to.</param>
            <param name="jsonText">The configuration JSON, as a string</param>
            <param name="warnings">A container to receive loading warnings, if desired.</param>
            <returns>A flag which indicates whether configuration values were read.</returns>
            <returns>A flag which indicates whether configuration values were read.</returns>
        </member>
        <member name="T:Xunit.Runner.Common.ConfigUtility">
            <summary>
            Utilities for reading configuration values.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ConfigUtility.MultiplierStyleMaxParallelThreadsRegex">
            <summary>
            Gets the regular expression that matches the multiplier-style value for maximum
            parallel threads (that is, '0.5x', '2x', etc.).
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.IRunnerLoggerExtensions">
            <summary>
            Extensions methods for <see cref="T:Xunit.Runner.Common.IRunnerLogger"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogMessage(Xunit.Runner.Common.IRunnerLogger,System.String)">
            <summary>
            Logs a normal-priority message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogMessage(Xunit.Runner.Common.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a normal-priority formatted message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogMessage(Xunit.Runner.Common.IRunnerLogger,Xunit.Runner.Common.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a normal-priority formatted message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogImportantMessage(Xunit.Runner.Common.IRunnerLogger,System.String)">
            <summary>
            Logs a high-priority message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogImportantMessage(Xunit.Runner.Common.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a high-priority formatted message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogImportantMessage(Xunit.Runner.Common.IRunnerLogger,Xunit.Runner.Common.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a high-priority formatted message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogWarning(Xunit.Runner.Common.IRunnerLogger,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogWarning(Xunit.Runner.Common.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a formatted warning message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogWarning(Xunit.Runner.Common.IRunnerLogger,Xunit.Runner.Common.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a formatted warning message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogError(Xunit.Runner.Common.IRunnerLogger,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message to be logged</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogError(Xunit.Runner.Common.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a formatted error message.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogError(Xunit.Runner.Common.IRunnerLogger,Xunit.Runner.Common.StackFrameInfo,System.String,System.Object[])">
            <summary>
            Logs a formatted error message with stack frame.
            </summary>
            <param name="logger">The logger</param>
            <param name="stackFrame">The stack frame information</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="M:Xunit.Runner.Common.IRunnerLoggerExtensions.LogRaw(Xunit.Runner.Common.IRunnerLogger,System.String,System.Object[])">
            <summary>
            Logs a messages with as little processing as possible. For example, the console runner will
            not attempt to set the color of the text that's being logged. This is most useful when attempting
            to render text lines that will be processed, like for TeamCity.
            </summary>
            <param name="logger">The logger</param>
            <param name="messageFormat">The format of the message to be logged</param>
            <param name="args">The format arguments</param>
        </member>
        <member name="T:Xunit.Runner.Common.ITestCaseFilter">
            <summary>
            Represents a filter run against a test case (and the associated assembly it resides in).
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ITestCaseFilter.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary>
            Determines whether the given <paramref name="testCase"/> passes the filter.
            </summary>
            <param name="assemblyName">The simple assembly name without file extension</param>
            <param name="testCase">The test case to be checked against the filter</param>
        </member>
        <member name="T:Xunit.Runner.Common.QueryFilterParser">
            <summary>
            This class is used to parse a graphy query.
            </summary>
            <remarks>
            See <see href="https://xunit.net/docs/query-filter-language"/> for the query filter language description.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.QueryFilterParser.Parse(System.String)">
            <summary>
            Parse and return a filter that represents the query.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.XunitFilters">
            <summary>
            Represents the ability to track query filters or simple filters. Any attempt
            to add a mix of the two will result in an exception.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitFilters.Empty">
            <summary>
            Gets a flag indicating whether there are any active filters.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddExcludedClassFilter(System.String)">
            <summary>
            Adds a simple filter which excludes a fully qualified class name.
            </summary>
            <param name="query">The filter query</param>
            <remarks>
            The query may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddExcludedMethodFilter(System.String)">
            <summary>
            Adds a simple filter which excludes a fully qualified method name. A fully qualified
            method name is in the form of <c>"FullyQualifiedTypeName.MethodName"</c>.
            </summary>
            <param name="query">The filter query</param>
            <remarks>
            The query may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddExcludedNamespaceFilter(System.String)">
            <summary>
            Adds a simple filter which excludes a namespace.
            </summary>
            <param name="query">The filter query</param>
            <remarks>
            The query may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddExcludedTraitFilter(System.String,System.String)">
            <summary>
            Adds a simple filter which excludes tests with the given name/value pair.
            </summary>
            <param name="name">The name of the trait</param>
            <param name="value">The value of the trait</param>
            <remarks>
            The name and/or value may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddIncludedClassFilter(System.String)">
            <summary>
            Adds a simple filter matching a fully qualified class name.
            </summary>
            <remarks>
            The query may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddIncludedMethodFilter(System.String)">
            <summary>
            Adds a simple filter which matches a fully qualified method name. A fully qualified
            method name is in the form of <c>"FullyQualifiedTypeName.MethodName"</c>.
            </summary>
            <param name="query">The filter query</param>
            <remarks>
            The query may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddIncludedNamespaceFilter(System.String)">
            <summary>
            Adds a simple filter which matches a namespace.
            </summary>
            <param name="query">The filter query</param>
            <remarks>
            The query may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddIncludedTraitFilter(System.String,System.String)">
            <summary>
            Adds a simple filter which matches tests with the given name/value pair.
            </summary>
            <param name="name">The name of the trait</param>
            <param name="value">The value of the trait</param>
            <remarks>
            The name and/or value may begin and/or end with <c>*</c> to add as a wildcard. No other wildcards
            are permitted in any other locations.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.AddQueryFilter(System.String)">
            <summary>
            Adds a query filter.
            </summary>
            <remarks>
            For more information on the query syntax, see <see href="https://xunit.net/docs/query-filter-language"/>
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.XunitFilters.ToXunit3Arguments">
            <summary>
            Gets the command-line arguments to pass to an xUnit.net v3 test assembly to perform
            the filtering contained within this filter.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.AppDomainOption">
            <summary>
            Indicates the current level of app domain support that's in effect,
            for use by runner reporters.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.AppDomainOption.NotAvailable">
            <summary>
            App domains are not supported by the current platform
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.AppDomainOption.Disabled">
            <summary>
            App domains are supported, but currently disabled
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.AppDomainOption.Enabled">
            <summary>
            App domains are supported and currently enabled
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.AppDomainSupport">
            <summary>
            Indicates the level of app domain support that the runner is requesting. Note that these values
            are only valid for v1 and v2 tests; v3 tests always run in a separate process rather than
            in the runner process.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.AppDomainSupport.IfAvailable">
            <summary>
            Requests that app domains be used for v1 and v2 tests, if available; if app domains cannot
            be used, then the tests will be discovered and run in the runner's app domain.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.AppDomainSupport.Required">
            <summary>
            Requires that v1 and v2 tests run in a separate app domain. Can only be requested by runners
            written in .NET Framework.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.AppDomainSupport.Denied">
            <summary>
            Requires that v1 and v2 tests be run in the runner's app domain.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.AppDomainSupportExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Runner.Common.AppDomainSupport"/>
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.AppDomainSupportExtensions.IsValid(Xunit.Runner.Common.AppDomainSupport)">
            <summary>
            Determines if the value is a valid enum value.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.ExecutionSummary">
            <summary>
            Collects execution totals for a group of test cases.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSummary.Total">
            <summary>
            Gets or set the total number of tests run.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSummary.Failed">
            <summary>
            Gets or sets the number of failed tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSummary.Skipped">
            <summary>
            Gets or sets the number of skipped tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSummary.NotRun">
            <summary>
            Gets or sets the number of tests not run.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSummary.Time">
            <summary>
            Gets or sets the total execution time for the tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSummary.Errors">
            <summary>
            Gets or sets the total errors (i.e., cleanup failures) for the tests.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.ISourceInformationProvider">
            <summary>
            Represents a provider which gives source line information for a test case after discovery has
            completed. This is typically provided by a third party runner (for example, the VSTest plugin provides
            this via DiaSession from Visual Studio). It's used to supplement test case metadata when the discovery
            process itself cannot provide source file and line information.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ISourceInformationProvider.GetSourceInformation(System.String,System.String)">
            <summary>
            Returns the source information for a test case.
            </summary>
            <param name="testClassName">The test class name, if known</param>
            <param name="testMethodName">The test method name, if known</param>
            <returns>The source information, with null string and int values when the information is not available.
            Note: return value should never be <c>null</c>, only the interior data values inside.</returns>
        </member>
        <member name="T:Xunit.Runner.Common.ListFormat">
            <summary>
            Designates the format that the test list should take.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListFormat.Json">
            <summary>
            Lists the information in JSON (machine readable) format
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListFormat.Text">
            <summary>
            Lists the information in plain text (human readable) format
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.ListOption">
            <summary>
            Indicates the kind of list a runner should generate, rather than running tests.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListOption.Classes">
            <summary>
            Lists all the classes in the assembly which contain tests.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListOption.Discovery">
            <summary>
            Lists the test cases as discovery objects (only valid for the in-process runner).
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListOption.Full">
            <summary>
            Lists full metadata about the test discovery.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListOption.Methods">
            <summary>
            Lists all the methods in the assembly which contain a test.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListOption.Tests">
            <summary>
            Lists all the tests (as display name) in the assembly.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ListOption.Traits">
            <summary>
            Lists all the traits that are generated from the assembly.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.LongRunningTestsSummary">
            <summary>
            Represents information about long running tests from <see cref="T:Xunit.Runner.Common.ExecutionSink"/>.
            </summary>
            <param name="configuredLongRunningTime">Configured notification time</param>
            <param name="testCases">Tests</param>
        </member>
        <member name="M:Xunit.Runner.Common.LongRunningTestsSummary.#ctor(System.TimeSpan,System.Collections.Generic.IDictionary{Xunit.Sdk.ITestCaseMetadata,System.TimeSpan})">
            <summary>
            Represents information about long running tests from <see cref="T:Xunit.Runner.Common.ExecutionSink"/>.
            </summary>
            <param name="configuredLongRunningTime">Configured notification time</param>
            <param name="testCases">Tests</param>
        </member>
        <member name="P:Xunit.Runner.Common.LongRunningTestsSummary.ConfiguredLongRunningTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.LongRunningTestsSummary.TestCases">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.NullSourceInformationProvider">
            <summary>
            A null implementation of <see cref="T:Xunit.Runner.Common.ISourceInformationProvider"/> which always returns empty
            source information. Get the singleton via <see cref="P:Xunit.Runner.Common.NullSourceInformationProvider.Instance"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.NullSourceInformationProvider.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Xunit.Runner.Common.NullSourceInformationProvider"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.NullSourceInformationProvider.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.NullSourceInformationProvider.GetSourceInformation(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.ParallelismOption">
            <summary>
            Represents available parallelism options
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ParallelismOption.none">
            <summary>
            Do not parallelize any tests.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ParallelismOption.assemblies">
            <summary>
            Run tests in different assemblies in parallel
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ParallelismOption.collections">
            <summary>
            Run tests in different test collections in parallel
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.ParallelismOption.all">
            <summary>
            Enable maximum parallelization
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.SourceInformation">
            <summary>
            Source information returned by <see cref="T:Xunit.Runner.Common.ISourceInformationProvider"/>.
            </summary>
            <param name="sourceFile">The source file, if known</param>
            <param name="sourceLine">The line number, if known</param>
        </member>
        <member name="M:Xunit.Runner.Common.SourceInformation.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Source information returned by <see cref="T:Xunit.Runner.Common.ISourceInformationProvider"/>.
            </summary>
            <param name="sourceFile">The source file, if known</param>
            <param name="sourceLine">The line number, if known</param>
        </member>
        <member name="P:Xunit.Runner.Common.SourceInformation.Null">
            <summary>
            Gets a singleton instance of <see cref="T:Xunit.Runner.Common.SourceInformation"/> that represents no source information.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.SourceInformation.SourceFile">
            <summary>
            Gets the source file, if known; <c>null</c>, otherwise
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.SourceInformation.SourceLine">
            <summary>
            Gets the source line number, if known; <c>null</c>, otherwise
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.StackFrameInfo">
            <summary>
            Represents the top of a stack frame, typically taken from an exception or failure information.
            </summary>
            <param name="fileName">The file name from the stack frame</param>
            <param name="lineNumber">The line number from the stack frame</param>
        </member>
        <member name="M:Xunit.Runner.Common.StackFrameInfo.#ctor(System.String,System.Int32)">
            <summary>
            Represents the top of a stack frame, typically taken from an exception or failure information.
            </summary>
            <param name="fileName">The file name from the stack frame</param>
            <param name="lineNumber">The line number from the stack frame</param>
        </member>
        <member name="P:Xunit.Runner.Common.StackFrameInfo.FileName">
            <summary>
            Gets the filename of the stack frame. May be <c>null</c> if the stack frame is not known.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.StackFrameInfo.IsEmpty">
            <summary>
            Returns <c>true</c> if this is an empty stack frame (e.g., <see cref="F:Xunit.Runner.Common.StackFrameInfo.None"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.StackFrameInfo.LineNumber">
            <summary>
            Gets the line number of the stack frame. May be 0 if the stack frame is not known.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.StackFrameInfo.None">
            <summary>
            Get a default (unknown) stack frame info.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.StackFrameInfo.FromErrorMetadata(Xunit.Sdk.IErrorMetadata)">
            <summary>
            Creates a stack frame info from error metadata.
            </summary>
            <param name="errorMetadata">The error to inspect</param>
            <returns>The stack frame info</returns>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyConfiguration">
            <summary>
            Represents the configuration items set in the configuration file of a test assembly.
            Should be read with the <see cref="T:Xunit.Runner.Common.ConfigReader"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyConfiguration.#ctor">
            <summary>
            Initalizes a new instance of the <see cref="T:Xunit.Runner.Common.TestAssemblyConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.AppDomain">
            <summary>
            Gets or sets a flag indicating whether an app domain should be used to discover and run tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.AppDomainOrDefault">
            <summary>
            Gets or sets a flag indicating whether an app domain should be used to discover and run tests.
            If the flag is not set, returns the default value (<see cref="F:Xunit.Runner.Common.AppDomainSupport.IfAvailable"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.AssertEquivalentMaxDepth">
            <summary>
            Gets a value which indicates the maximum object depth to compare when using <c>Assert.Equivalent</c>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.Culture">
            <summary>
            Gets or sets the desired culture to run the tests under. Use <c>null</c> (default) to
            indicate that we should use the default OS culture; use an empty string to indicate that
            we should use the invariant culture; or use any culture value that is valid for
            calling <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.DiagnosticMessages">
            <summary>
            Gets or sets a flag indicating that the end user wants diagnostic messages
            from the test framework.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.DiagnosticMessagesOrDefault">
            <summary>
            Gets a flag indicating that the end user wants diagnostic messages
            from the test framework. If the flag is not set, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ExplicitOption">
            <summary>
            Gets or sets a flag indicating how explicit tests should be handled.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ExplicitOptionOrDefault">
            <summary>
            Gets a flag indicating how explicit tests should be handled. If the flag
            isn't set, returns the default value (<see cref="F:Xunit.Sdk.ExplicitOption.Off"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.FailSkips">
            <summary>
            Gets or sets a flag indicating that skipped tests should be converted into
            failed tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.FailSkipsOrDefault">
            <summary>
            Gets a flag indicating that skipped tests should be converted into failed
            tests. If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.FailTestsWithWarnings">
            <summary>
            Gets or sets a flag indicating that passing tests with warnings should be
            converted into failed tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.FailTestsWithWarningsOrDefault">
            <summary>
            Gets or sets a flag indicating that passing tests with warnings should be
            converted into failed tests. If the flag is not set, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.Filters">
            <summary>
            Gets the list of filters used during test discovery.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.IncludeSourceInformation">
            <summary>
            Gets or sets a flag indicating that discovery should include source information
            for the test cases.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.IncludeSourceInformationOrDefault">
            <summary>
            Gets a flag indicating that discovery should include source information for the
            test cases. If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.InternalDiagnosticMessages">
            <summary>
            Gets or sets a flag indicating that the end user wants internal diagnostic messages
            from the test framework.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.InternalDiagnosticMessagesOrDefault">
            <summary>
            Gets a flag indicating that the end user wants internal diagnostic messages
            from the test framework. If the flag is not set, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.LongRunningTestSeconds">
            <summary>
            Gets the number of seconds that a test can run before being considered "long running". Set to a positive
            value to enable the feature.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.LongRunningTestSecondsOrDefault">
            <summary>
            Gets the number of seconds that a test can run before being considered "long running". If the value is not
            set, returns the default value (-1).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.MaxParallelThreads">
            <summary>
            Gets or sets the maximum number of thread to use when parallelizing this assembly. A value of <c>null</c>
            or 0 indicates that the default should be used (<see cref="P:System.Environment.ProcessorCount"/>); a value of
            -1 indicates that tests should run with an unlimited-sized thread pool.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.MaxParallelThreadsOrDefault">
            <summary>
            Gets the maximum number of thread to use when parallelizing this assembly.
            If the value is not set, returns the default value (<see cref="P:System.Environment.ProcessorCount"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.MethodDisplay">
            <summary>
            Gets or sets the default display name for test methods.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.MethodDisplayOrDefault">
            <summary>
            Gets the default display name for test methods. If the value is not set, returns
            the default value (<see cref="F:Xunit.Sdk.TestMethodDisplay.ClassAndMethod"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.MethodDisplayOptions">
            <summary>
            Gets or sets the default display options for test methods.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.MethodDisplayOptionsOrDefault">
            <summary>
            Gets the default display options for test methods. If the value is not set, returns
            the default value (<see cref="F:Xunit.Sdk.TestMethodDisplayOptions.None"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ParallelAlgorithm">
            <summary>
            Gets or sets the algorithm to be used for parallelization.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ParallelAlgorithmOrDefault">
            <summary>
            Gets or sets the algorithm to be used for parallelization.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ParallelizeAssembly">
            <summary>
            Gets or sets a flag indicating that this assembly is safe to parallelize against
            other assemblies.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ParallelizeAssemblyOrDefault">
            <summary>
            Gets a flag indicating that this assembly is safe to parallelize against
            other assemblies. If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ParallelizeTestCollections">
            <summary>
            Gets or sets a flag indicating that this test assembly wants to run test collections
            in parallel against one another.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ParallelizeTestCollectionsOrDefault">
            <summary>
            Gets a flag indicating that this test assembly wants to run test collections
            in parallel against one another. If the flag is not set, returns the default
            value (<c>true</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.PreEnumerateTheories">
            <summary>
            Gets or sets a flag indicating whether theory data should be pre-enumerated during
            test discovery.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.PrintMaxEnumerableLength">
            <summary>
            Gets a value indicating the maximum length for printing collections.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.PrintMaxObjectDepth">
            <summary>
            Gets a value indicating the maximum recursive depth when printing objects.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.PrintMaxObjectMemberCount">
            <summary>
            Gets a value indicating the maximum members to show when printing objects.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.PrintMaxStringLength">
            <summary>
            Gets a value indicating the maximum length for printing string values.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.Seed">
            <summary>
            Gets or sets the seed value used for randomization. Only supported for v3 or later test assemblies.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ShadowCopy">
            <summary>
            Gets or sets a flag indicating whether shadow copies should be used.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ShadowCopyOrDefault">
            <summary>
            Gets a flag indicating whether shadow copies should be used. If the flag is not set,
            returns the default value (<c>true</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ShadowCopyFolder">
            <summary>
            Gets or sets the folder to be used for shadow copy files. If the value is not set,
            the system defaults for shadow copying are used.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ShowLiveOutput">
            <summary>
            Gets or sets a flag indicating whether output from <see cref="T:Xunit.ITestOutputHelper"/> should be
            shown live as they're logged (in addition to being collected together after the test finishes).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.ShowLiveOutputOrDefault">
            <summary>
            Gets a flag indicating whether output from <see cref="T:Xunit.ITestOutputHelper"/> should be
            shown live as they're logged (in addition to being collected together after the test finishes).
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.StopOnFail">
            <summary>
            Gets or sets a flag indicating whether testing should stop on a failure.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.StopOnFailOrDefault">
            <summary>
            Gets a flag indicating whether testing should stop on a test failure. If the flag is not set,
            returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.SynchronousMessageReporting">
            <summary>
            Gets or sets a flag indicating that synchronous message reporting is desired.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyConfiguration.SynchronousMessageReportingOrDefault">
            <summary>
            Gets a flag indicating that synchronous message reporting is desired. If the flag is not set,
            returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestFrameworkOptions">
            <summary>
            Represents options passed to a test framework for discovery or execution.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.Empty">
            <summary>
            INTERNAL METHOD, FOR TESTING PURPOSES ONLY. DO NOT CALL.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.ForDiscovery(Xunit.Runner.Common.TestAssemblyConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Xunit.Runner.Common.TestFrameworkOptions"/> for discovery purposes.
            </summary>
            <param name="configuration">The configuration to copy values from.</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.ForDiscoveryFromSerialization(System.String)">
            <summary>
            Creates an instance of <see cref="T:Xunit.Runner.Common.TestFrameworkOptions"/> for discovery purposes.
            </summary>
            <param name="optionsJson">The serialized discovery options.</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.ForExecution(Xunit.Runner.Common.TestAssemblyConfiguration)">
            <summary>
            Creates an instance of <see cref="T:Xunit.Runner.Common.TestFrameworkOptions"/> for execution purposes.
            </summary>
            <param name="configuration">The configuration to copy values from.</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.ForExecutionFromSerialization(System.String)">
            <summary>
            Creates an instance of <see cref="T:Xunit.Runner.Common.TestFrameworkOptions"/> for execution purposes.
            </summary>
            <param name="optionsJson">The serialized execution options.</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.GetValue``1(System.String)">
            <summary>
            Gets a value from the options collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.SetValue``1(System.String,``0)">
            <summary>
            Sets a value into the options collection.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of the value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestFrameworkOptions.ToJson">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestProjectConfiguration">
            <summary>
            Represents the configuration settings for a test runner which are independent of the test
            assembly. Are usually passed via command line or some other equivalent mechanism. Accessed
            via <see cref="T:Xunit.Runner.Common.XunitProject"/>.<see cref="P:Xunit.Runner.Common.XunitProject.Configuration"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestProjectConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.TestProjectConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.AssemblyInfo">
            <summary>
            Gets or sets a flag which indicates whether the runner should return assembly
            information rather than listing or executing tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.AssemblyInfoOrDefault">
            <summary>
            Gets a flag which indicates whether the runner should return assembly information
            rather than listing or executing tests. If the flag is not specified, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.TestProjectConfiguration.EnvNameNoColor">
            <summary>
            Gets the environment variable name used to test for the user requesting no color output.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.CrashDetectionSinkTimeout">
            <summary>
            Gets the time (in milliseconds) that the crash detection sink will wait after process termination
            for timely message dispatch, to determine if the process exited cleanly or crashed.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.CrashDetectionSinkTimeoutOrDefault">
            <summary>
            Gets the time (in milliseconds) that the crash detection sink will wait after process termination
            for timely message dispatch, to determine if the process exited cleanly or crashed. If the value
            isn't set, returns the default value (60 seconds).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.Debug">
            <summary>
            Gets or sets a flag which indicates whether the runner should attempt to attach the debugger
            before running any tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.DebugOrDefault">
            <summary>
            Gets a flag which indicates whether the runner should attempt to attach the debugger
            before running any tests. If the flag is not specified, returns the default value
            (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.IgnoreFailures">
            <summary>
            Gets or sets a flag which indicates whether the runner should ignore test failures.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.IgnoreFailuresOrDefault">
            <summary>
            Gets a flag which indicates whether the runner should ignore test failures. If the
            flag is not specified, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.List">
            <summary>
            Gets or sets a flag to indicate that we should list things instead of run them
            (and what we're listing, and in what format).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.Output">
            <summary>
            The output files that should be generated from the test run. The key is
            the output type, and the value is the output filename. The output type matches
            the <see cref="P:Xunit.Runner.Common.Transform.ID"/> property on the transforms available in
            <see cref="T:Xunit.Runner.Common.TransformFactory"/>.<see cref="P:Xunit.Runner.Common.TransformFactory.AvailableTransforms"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.NoAutoReporters">
            <summary>
            Gets or sets a flag indicating that the test runner should not attempt to use any
            automatically (aka environmentally) enabled reporters.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.NoAutoReportersOrDefault">
            <summary>
            Gets a flag indicating that the test runner should not attempt to use any automatically
            (aka environmentally) enabled reporters. If the flag is not set, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.NoColor">
            <summary>
            Gets or sets a flag indicating that the test runner should not output any color codes
            when writing text to the console.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.NoColorOrDefault">
            <summary>
            Gets a flag indicating that the test runner should not output any color codes when writing
            text to the console. If the flag is not set, returns <c>true</c> if the user has defined
            the NO_COLOR environment variable, or <c>false</c> otherwise.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.NoLogo">
            <summary>
            Gets or sets a flag indicating that the test runner should not output the copyright
            information.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.NoLogoOrDefault">
            <summary>
            Gets a flag indicating that the test runner hsould not output the copyright information.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.Pause">
            <summary>
            Gets or sets a flag indicating that the test runner should pause before running any
            tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.PauseOrDefault">
            <summary>
            Gets a flag indicating that the test runner should pause before running any tests.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.UseAnsiColor">
            <summary>
            Gets or sets a flag indicating that ANSI color usage should be forced on Windows.
            ANSI color is always used for non-Windows.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.UseAnsiColorOrDefault">
            <summary>
            Gets a flag indicating that ANSI color usage should be forced on Windows. ANSI color is
            always used for non-Windows. If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.Wait">
            <summary>
            Gets or sets a flag indicating that the test runner should pause after all tests
            have run.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.WaitOrDefault">
            <summary>
            Gets a flag indicating that the test runner should pause after all tests have run.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.WaitForDebugger">
            <summary>
            Gets or sets a flag indicating that the test runner should wait for a debugger to be
            attached before performing any actions.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestProjectConfiguration.WaitForDebuggerOrDefault">
            <summary>
            Gets a flag indicating that the test runner should wait for a debugger to be attached
            before performing any actions. If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.XunitProject">
            <summary>
            Represents a project which contains zero or more test assemblies, as well as global
            (cross-assembly) configuration settings.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.XunitProject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.XunitProject"/> class.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProject.Assemblies">
            <summary>
            Gets the assemblies that are in the project.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProject.Configuration">
            <summary>
            Gets the configuration values for the test project.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProject.HasRunnerReporter">
            <summary>
            Gets a flag indicating whether <see cref="P:Xunit.Runner.Common.XunitProject.RunnerReporter"/> has been set yet or not.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProject.RunnerReporter">
            <summary>
            Gets or sets the runner reporter.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.XunitProject.Add(Xunit.Runner.Common.XunitProjectAssembly)">
            <summary>
            Adds an assembly to the project.
            </summary>
            <param name="assembly">The assembly to add to the project.</param>
        </member>
        <member name="M:Xunit.Runner.Common.XunitProject.WithLaunchOptions(Xunit.Runner.Common.XunitProject,Xunit.FrontControllerLaunchOptions)">
            <summary>
            Create an instance of <see cref="T:Xunit.Runner.Common.XunitProject"/> populated by launch options.
            </summary>
            <param name="other">The project that is our template to copy from</param>
            <param name="launchOptions">The launch options</param>
        </member>
        <member name="T:Xunit.Runner.Common.XunitProjectAssembly">
            <summary>
            Represents an assembly in an <see cref="T:Xunit.Runner.Common.XunitProject"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.XunitProjectAssembly.#ctor(Xunit.Runner.Common.XunitProject,System.String,Xunit.Runner.Common.AssemblyMetadata)">
            <summary>Initializes a new instance of the <see cref="T:Xunit.Runner.Common.XunitProjectAssembly"/> class</summary>
            <param name="project">The project this assembly belongs to.</param>
            <param name="assemblyFileName">The assembly filename</param>
            <param name="assemblyMetadata">The assembly metadata</param>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.Assembly">
            <summary>
            Gets or sets the assembly under test. May be <c>null</c> when the test assembly is not
            loaded into the current <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.AssemblyDisplayName">
            <summary>
            Gets the assembly display name.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.AssemblyFileName">
            <summary>
            Gets or sets the assembly file name.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.AssemblyMetadata">
            <summary>
            Gets or sets the metadata about the assembly.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.ConfigFileName">
            <summary>
            Gets or sets the config file name.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.Configuration">
            <summary>
            Gets the configuration values for the test assembly.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.Identifier">
            <summary>
            Gets an identifier for the current assembly. This is guaranteed to be unique, but not necessarily repeatable
            across runs (because it relies on <see cref="M:System.Reflection.Assembly.GetHashCode"/>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.Project">
            <summary>
            Gets the project that this project assembly belongs to.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.XunitProjectAssembly.TestCasesToRun">
            <summary>
            Gets a list of serialized test cases to be run. If the list is empty, then all test cases
            (that match the filters) will be run.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.XunitProjectAssembly.WithSettings(Xunit.FrontControllerFindSettings)">
            <summary>
            Create an instance of <see cref="T:Xunit.Runner.Common.XunitProjectAssembly"/> populated by front controller settings.
            </summary>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Xunit.Runner.Common.XunitProjectAssembly.WithSettings(Xunit.FrontControllerFindAndRunSettings)">
            <summary>
            Create an instance of <see cref="T:Xunit.Runner.Common.XunitProjectAssembly"/> populated by front controller settings.
            </summary>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Xunit.Runner.Common.XunitProjectAssembly.WithSettings(Xunit.FrontControllerRunSettings)">
            <summary>
            Create an instance of <see cref="T:Xunit.Runner.Common.XunitProjectAssembly"/> populated by front controller settings.
            </summary>
            <param name="settings">The settings</param>
        </member>
        <member name="T:Xunit.Runner.Common.ConsoleRunnerLogger">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerLogger"/> which logs messages to
            a <see cref="T:System.IO.TextWriter"/> (typically the one from <see cref="P:System.Console.Out"/>).
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.#ctor(System.Boolean,System.Boolean,Xunit.Runner.Common.ConsoleHelper,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.ConsoleRunnerLogger"/> class.
            </summary>
            <param name="useColors">A flag to indicate whether colors should be used when
            logging messages.</param>
            <param name="useAnsiColor">A flag to indicate whether ANSI colors should be
            forced on Windows.</param>
            <param name="consoleHelper">The helper for writing console output.</param>
            <param name="waitForAcknowledgment">A flag to indicate whether the logger should wait
            for acknowledgments or not</param>
        </member>
        <member name="P:Xunit.Runner.Common.ConsoleRunnerLogger.LockObject">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.LogError(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.LogImportantMessage(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.LogMessage(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.LogRaw(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.LogWarning(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.WaitForAcknowledgment">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleRunnerLogger.WriteLine(System.String)">
            <summary>
            Writes a (non-colored) message. If <see cref="F:Xunit.Runner.Common.ConsoleRunnerLogger.useColors"/> is <c>false</c>, all ANSI-SGR sequences will be
            removed prior to writing.
            </summary>
            <param name="message">Message to write</param>
            <remarks>See <see href="https://en.wikipedia.org/wiki/ANSI_escape_code#SGR" /> for details about ANSI-SGR.</remarks>
        </member>
        <member name="T:Xunit.Runner.Common.DecodingRunnerLogger">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerLogger"/> which is given to <c>ProjectAssemblyRunner.Run</c>,
            which only uses <see cref="M:Xunit.Runner.Common.DecodingRunnerLogger.LogMessage(Xunit.Runner.Common.StackFrameInfo,System.String)"/> to send occasional JSON-encoded messages. This will decode
            them and send them along to the correct message sink.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DecodingRunnerLogger.#ctor(Xunit.Sdk.IMessageSink,Xunit.Sdk.IMessageSink)">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerLogger"/> which is given to <c>ProjectAssemblyRunner.Run</c>,
            which only uses <see cref="M:Xunit.Runner.Common.DecodingRunnerLogger.LogMessage(Xunit.Runner.Common.StackFrameInfo,System.String)"/> to send occasional JSON-encoded messages. This will decode
            them and send them along to the correct message sink.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.DecodingRunnerLogger.LockObject">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DecodingRunnerLogger.LogError(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DecodingRunnerLogger.LogImportantMessage(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DecodingRunnerLogger.LogMessage(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DecodingRunnerLogger.LogRaw(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DecodingRunnerLogger.LogWarning(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DecodingRunnerLogger.WaitForAcknowledgment">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.AfterTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IAfterTestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.AfterTestFinished.AttributeName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.AfterTestFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AfterTestFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AfterTestFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.AfterTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IAfterTestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.AfterTestStarting.AttributeName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.AfterTestStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AfterTestStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AfterTestStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.MessageSinkMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>, with serialization and deserialization support.
            </summary>
            <remarks>
            Because of deserialization, all concrete message sink message types must have a parameterless public
            constructor that will be used to create the message for deserialization purposes, and must be decorated
            with <see cref="T:Xunit.Sdk.JsonTypeIDAttribute"/> to set a unique type ID for deserialization purposes.
            </remarks>
        </member>
        <member name="F:Xunit.Runner.Common.MessageSinkMessage.EmptyTraits">
            <summary>
            Empty traits, to be used to initialize traits values in messages.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue">
            <summary>
            Gets the string value that message properties will return, when a value was not provided
            during deserialization.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Override to deserialize the values in the dictionary into the message.
            </summary>
            <param name="root">The root of the JSON object</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessage.FromJson(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessage.#ctor">
            <summary>
            Initializes a new instance of the see <see cref="T:Xunit.Runner.Common.MessageSinkMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <summary>
            Override to serialize the values in the message into JSON.
            </summary>
            <param name="serializer">The serializer to write values to.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessage.ToDisplayString(System.String[])">
            <summary>
            Converts a string array into a display value, for use in an <see cref="M:System.Object.ToString"/> overload.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessage.ToDisplayString``1(``0[])">
            <summary>
            Converts am array into a display value, for use in an <see cref="M:System.Object.ToString"/> overload.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessage.ToJson">
            <summary>
            Creates a JSON serialized version of this message.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the message class does not have a <see cref="T:Xunit.Sdk.JsonTypeIDAttribute"/>.</exception>
            <exception cref="T:Xunit.Sdk.UnsetPropertiesException">Thrown when one or more properties are missing values.</exception>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyMessage.AssemblyUniqueID">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCaseMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseMessage.TestCaseUniqueID">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassMessage.TestClassUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCollectionMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionMessage.TestCollectionUniqueID">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMessage.TestUniqueID">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestMethodMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodMessage.TestMethodUniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestResultMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestResultMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestResultMessage.ExecutionTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestResultMessage.FinishTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:System.DateTimeOffset.MinValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestResultMessage.Output">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestResultMessage.Warnings">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestResultMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestResultMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestResultMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.BeforeTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IBeforeTestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.BeforeTestFinished.AttributeName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.BeforeTestFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.BeforeTestFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.BeforeTestFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.BeforeTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IBeforeTestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.BeforeTestStarting.AttributeName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.BeforeTestStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.BeforeTestStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.BeforeTestStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.DiagnosticMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDiagnosticMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.DiagnosticMessage.Message">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.DiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.DiagnosticMessage"/> class with
            the provided message.
            </summary>
            <param name="message">The diagnostic message</param>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.DiagnosticMessage"/> class with
            the provided message format and single argument.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.DiagnosticMessage"/> class with
            the provided message format and two arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.DiagnosticMessage"/> class with
            the provided message format and three arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
            <param name="arg2">The value to replace {2} in the format string.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.DiagnosticMessage"/> class with
            the provided message format and multiple arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.DiscoveryComplete">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDiscoveryComplete"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.DiscoveryComplete.TestCasesToRun">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.DiscoveryComplete.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DiscoveryComplete.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DiscoveryComplete.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.DiscoveryStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDiscoveryStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.DiscoveryStarting.AssemblyName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.DiscoveryStarting.AssemblyPath">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.DiscoveryStarting.ConfigFilePath">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.DiscoveryStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DiscoveryStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DiscoveryStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.ErrorMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IErrorMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ErrorMessage.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.ErrorMessage.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.ErrorMessage.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.ErrorMessage.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.ErrorMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ErrorMessage.FromException(System.Exception)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.IErrorMessage"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
        </member>
        <member name="M:Xunit.Runner.Common.ErrorMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ErrorMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.InternalDiagnosticMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IInternalDiagnosticMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.InternalDiagnosticMessage.Message">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.InternalDiagnosticMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.InternalDiagnosticMessage"/> class with
            the provided message.
            </summary>
            <param name="message">The diagnostic message</param>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.InternalDiagnosticMessage"/> class with
            the provided message format and single argument.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.InternalDiagnosticMessage"/> class with
            the provided message format and two arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.#ctor(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.InternalDiagnosticMessage"/> class with
            the provided message format and three arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string.</param>
            <param name="arg1">The value to replace {1} in the format string.</param>
            <param name="arg2">The value to replace {2} in the format string.</param>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.#ctor(System.String,System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.Runner.Common.InternalDiagnosticMessage"/> class with
            the provided message format and multiple arguments.
            </summary>
            <param name="messageFormat">The message format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.InternalDiagnosticMessage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyDiscoveryFinished">
            <summary>
            Reports that runner has just finished discovery for a test assembly. This message will
            arrive after the test framework's <see cref="T:Xunit.Sdk.IDiscoveryComplete"/> message, and contains
            the project metadata associated with the discovery.
            </summary>
            <remarks>
            This message does not support serialization or deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryFinished.Assembly">
            <summary>
            Gets information about the assembly being discovered.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryFinished.DiscoveryOptions">
            <summary>
            Gets the options that were used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryFinished.TestCasesToRun">
            <summary>
            Gets the count of the number of test cases that will be run (post-filtering).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryFinished.UniqueID">
            <summary>
            Gets the test assembly's unique ID.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyDiscoveryFinished.ToJson">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyDiscoveryStarting">
            <summary>
            Reports that runner is about to start discovery for a test assembly. This message will
            arrive before the test framework's <see cref="T:Xunit.DiscoveryStarting"/> message, and
            contains the project metadata associated with the discovery.
            </summary>
            <remarks>
            This message does not support serialization or deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryStarting.AppDomain">
            <summary>
            Gets a flag which indicates whether the tests will be discovered and run in a
            separate app domain.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryStarting.Assembly">
            <summary>
            Gets information about the assembly being discovered.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryStarting.DiscoveryOptions">
            <summary>
            Gets the options that will be used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryStarting.ShadowCopy">
            <summary>
            Gets a flag which indicates whether shadow copies are being used. If app domains are
            not enabled, then this value is ignored.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyDiscoveryStarting.UniqueID">
            <summary>
            Gets the test assembly's unique ID.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyDiscoveryStarting.ToJson">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyExecutionFinished">
            <summary>
            Reports that runner is about to start execution for a test assembly. This message will
            arrive after the test framework's <see cref="T:Xunit.Sdk.ITestAssemblyFinished"/> message, and
            contains the project metadata associated with the execution.
            </summary>
            <remarks>
            This message does not support serialization or deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionFinished.Assembly">
            <summary>
            Gets information about the assembly being executed.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionFinished.ExecutionOptions">
            <summary>
            Gets the options that was used during execution.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionFinished.ExecutionSummary">
            <summary>
            Gets the summary of the execution results for the test assembly.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionFinished.UniqueID">
            <summary>
            Gets the test assembly's unique ID.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyExecutionFinished.ToJson">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyExecutionStarting">
            <summary>
            Reports that runner is about to start execution for a test assembly. This message will
            arrive before the test framework's <see cref="T:Xunit.Sdk.ITestAssemblyStarting"/> message, and
            contains the project metadata associated with the discovery.
            </summary>
            <remarks>
            This message does not support serialization or deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionStarting.Assembly">
            <summary>
            Gets information about the assembly being executed.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionStarting.ExecutionOptions">
            <summary>
            Gets the options that will be used during execution.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionStarting.Seed">
            <summary>
            Gets the seed value used for randomization. If <c>null</c>, then the test framework does not
            support setting a randomization seed. (For stock versions of xUnit.net, support for settable
            randomization seeds started with v3.)
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyExecutionStarting.UniqueID">
            <summary>
            Gets the test assembly's unique ID.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyExecutionStarting.ToJson">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestExecutionSummaries">
            <summary>
            Reports multi-assembly test execution summary information.
            </summary>
            <remarks>
            This message does not support serialization or deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestExecutionSummaries.ElapsedClockTime">
            <summary>
            Gets the clock time elapsed when running the tests. This may different significantly
            from the sum of the times reported in the summaries, if the runner chose to run
            the test assemblies in parallel.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestExecutionSummaries.SummariesByAssemblyUniqueID">
            <summary>
            Gets the summaries of all the tests run. The key is the unique ID of the test
            assembly; the value is the summary of test execution for that assembly.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestExecutionSummaries.Add(System.String,Xunit.Runner.Common.ExecutionSummary)">
            <summary>
            Add assembly summary information.
            </summary>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="summary">The execution summary</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestExecutionSummaries.ToJson">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyCleanupFailure.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyCleanupFailure.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyCleanupFailure.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyCleanupFailure.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyCleanupFailure.FromException(System.Exception,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestAssemblyCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyFinished.ExecutionTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyFinished.FinishTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:System.DateTimeOffset.MinValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyFinished.TestsFailed">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyFinished.TestsNotRun">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyFinished.TestsSkipped">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyFinished.TestsTotal">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestAssemblyStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.AssemblyName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.AssemblyPath">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.ConfigFilePath">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.Seed">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.StartTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:System.DateTimeOffset.MinValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.TargetFramework">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.TestEnvironment">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.TestFrameworkDisplayName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyStarting.Traits">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCaseCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseCleanupFailure.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseCleanupFailure.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseCleanupFailure.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseCleanupFailure.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseCleanupFailure.FromException(System.Exception,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCaseCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
            <param name="testCaseUniqueID">The unique ID of the test case</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCaseDiscovered">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseDiscovered"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.Explicit">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>false</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.Serialization">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.SkipReason">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.SourceFilePath">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.SourceLineNumber">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestCaseDisplayName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestClassMetadataToken">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestClassName">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestClassNamespace">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestClassSimpleName">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestMethodArity">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestMethodMetadataToken">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestMethodName">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestMethodParameterTypesVSTest">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.TestMethodReturnTypeVSTest">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseDiscovered.Traits">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseDiscovered.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseDiscovered.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseDiscovered.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCaseFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseFinished.ExecutionTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseFinished.TestsFailed">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseFinished.TestsNotRun">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseFinished.TestsSkipped">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseFinished.TestsTotal">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCaseStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.Explicit">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>false</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.SkipReason">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.SourceFilePath">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.SourceLineNumber">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestCaseDisplayName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestClassMetadataToken">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestClassName">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestClassNamespace">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestClassSimpleName">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestMethodArity">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestMethodMetadataToken">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestMethodName">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestMethodParameterTypesVSTest">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.TestMethodReturnTypeVSTest">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCaseStarting.Traits">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCaseStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassCleanupFailure.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassCleanupFailure.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassCleanupFailure.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassCleanupFailure.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassCleanupFailure.FromException(System.Exception,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestClassCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassConstructionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassConstructionFinished"/>.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassConstructionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassConstructionStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassDisposeFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassDisposeFinished"/>.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassDisposeStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassDisposeStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassFinished"/>
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassFinished.ExecutionTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassFinished.TestsFailed">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassFinished.TestsNotRun">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassFinished.TestsSkipped">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassFinished.TestsTotal">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestClassStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestClassStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassStarting.TestClassName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassStarting.TestClassNamespace">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassStarting.TestClassSimpleName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestClassStarting.Traits">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestClassStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCleanupFailure.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCleanupFailure.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCleanupFailure.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCleanupFailure.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCleanupFailure.FromException(System.Exception,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
            <param name="testCaseUniqueID">The unique ID of the test case</param>
            <param name="testUniqueID">The unique ID of the test</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCollectionCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionCleanupFailure.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionCleanupFailure.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionCleanupFailure.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionCleanupFailure.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionCleanupFailure.FromException(System.Exception,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCollectionCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCollectionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionFinished.ExecutionTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionFinished.TestsFailed">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionFinished.TestsNotRun">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionFinished.TestsSkipped">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionFinished.TestsTotal">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestCollectionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCollectionStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionStarting.TestCollectionClassName">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionStarting.TestCollectionDisplayName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestCollectionStarting.Traits">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestCollectionStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestFailed">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestFailed"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestFailed.Cause">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Sdk.FailureCause.Unknown"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestFailed.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestFailed.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestFailed.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestFailed.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestFailed.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestFailed.FromException(System.Exception,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.String[],System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestFailed"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
            <param name="testCaseUniqueID">The unique ID of the test case</param>
            <param name="testUniqueID">The unique ID of the test</param>
            <param name="executionTime">The execution time of the test (may be <c>null</c> if the test wasn't executed)</param>
            <param name="output">The (optional) output from the test</param>
            <param name="warnings">The (optional) warnings that were recorded during test execution</param>
            <param name="finishTime">The time when the test finished executing; defaults to <see cref="P:System.DateTimeOffset.UtcNow"/></param>
        </member>
        <member name="M:Xunit.Runner.Common.TestFailed.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestFailed.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestFinished.Attachments">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="F:Xunit.Runner.Common.TestFinished.EmptyAttachments">
            <summary>
            An empty set of attachments that can be used when none are provided.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestMethodCleanupFailure">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodCleanupFailure"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodCleanupFailure.ExceptionParentIndices">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodCleanupFailure.ExceptionTypes">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodCleanupFailure.Messages">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodCleanupFailure.StackTraces">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty array if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodCleanupFailure.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodCleanupFailure.FromException(System.Exception,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestMethodCleanupFailure"/> constructed from an <see cref="T:System.Exception"/> object.
            </summary>
            <param name="ex">The exception to use</param>
            <param name="assemblyUniqueID">The unique ID of the assembly</param>
            <param name="testCollectionUniqueID">The unique ID of the test collectioon</param>
            <param name="testClassUniqueID">The (optional) unique ID of the test class</param>
            <param name="testMethodUniqueID">The (optional) unique ID of the test method</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodCleanupFailure.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodCleanupFailure.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestMethodFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodFinished.ExecutionTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodFinished.TestsFailed">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodFinished.TestsNotRun">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodFinished.TestsSkipped">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodFinished.TestsTotal">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodFinished.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodFinished.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodFinished.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestMethodStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestMethodStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodStarting.MethodArity">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>null</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodStarting.MethodName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestMethodStarting.Traits">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestMethodStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestNotRun">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestNotRun"/>.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestOutput">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestOutput"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestOutput.Output">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestOutput.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestOutput.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestOutput.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestPassed">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestPassed"/>.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestSkipped">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestSkipped"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestSkipped.Reason">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestSkipped.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestSkipped.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestSkipped.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestStarting.Explicit">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>false</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestStarting.StartTime">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:System.DateTimeOffset.MinValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestStarting.TestDisplayName">
            <inheritdoc/>
            <remarks>
            Note: Will be <see cref="F:Xunit.Runner.Common.MessageSinkMessage.UnsetStringPropertyValue"/> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestStarting.Timeout">
            <inheritdoc/>
            <remarks>
            Note: Will be <c>0</c> if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestStarting.Traits">
            <inheritdoc/>
            <remarks>
            Note: Will be an empty dictionary if there was no value provided during deserialization.
            </remarks>
        </member>
        <member name="M:Xunit.Runner.Common.TestStarting.Deserialize(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestStarting.Serialize(Xunit.Sdk.JsonObjectSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestStarting.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.AppVeyorReporter">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter" /> that reports results to AppVeyor. This
            is auto-enabled by the presence of the "APPVEYOR_API_URL" environment variable, which points
            to the AppVeyor API endpoint that is used to report tests. It has no switch for manual
            enablement, since the API endpoint is required.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.AppVeyorReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.AppVeyorReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.AppVeyorReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.AppVeyorReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.AppVeyorReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.AppVeyorReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.AppVeyorReporter" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.#ctor(Xunit.Runner.Common.IRunnerLogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.AppVeyorReporterMessageHandler" /> class.
            </summary>
            <param name="logger">The logger used to report messages</param>
            <param name="baseUri">The base AppVeyor API URI</param>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.HandleTestAssemblyFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyFinished})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.HandleTestAssemblyStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyStarting})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.HandleTestStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestStarting})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.HandleTestPassed(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestPassed})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.HandleTestSkipped(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestSkipped})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AppVeyorReporterMessageHandler.HandleTestFailed(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestFailed})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.DefaultRunnerReporter">
            <summary>
            The default implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter"/>, used by runners when there is no other
            overridden reporter. It returns an instance of <see cref="T:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.DefaultRunnerReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.DefaultRunnerReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.DefaultRunnerReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.DefaultRunnerReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.DefaultRunnerReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.DefaultRunnerReporter" />.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.EnvVar_HidePassingOutput">
            <summary>
            Gets the environment variable that's used to hide passing tests with output
            when diagnostics messages are enabled.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.#ctor(Xunit.Runner.Common.IRunnerLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler"/> class.
            </summary>
            <param name="logger">The logger used to report messages</param>
        </member>
        <member name="P:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.Logger">
            <summary>
            Get the logger used to report messages.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.MetadataCache">
            <summary>
            Gets the metadata cache.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.Escape(System.String)">
            <summary>
            Escapes text for display purposes.
            </summary>
            <param name="text">The text to be escaped</param>
            <returns>The escaped text</returns>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.EscapeMultiLineIndent(System.String,System.String)">
            <summary>
            Escapes multi-line text for display purposes, indenting on newlines.
            </summary>
            <param name="text">The text to be escaped</param>
            <param name="indent">The indent to use for multiple line text</param>
            <returns>The escaped text</returns>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.GetAssemblyDisplayName(Xunit.Runner.Common.XunitProjectAssembly)">
            <summary>
            Gets the display name of a test assembly from a test assembly message.
            </summary>
            <param name="assembly">The test assembly</param>
            <returns>The assembly display name</returns>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.GetExecutionOptions(System.String)">
            <summary>
            Get the test framework options for the given assembly. If it cannot find them, then it
            returns a default set of options.
            </summary>
            <param name="assemblyFileName">The test assembly filename</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.LogError(Xunit.Sdk.IErrorMetadata,System.String)">
            <summary>
            Logs an error message to the logger.
            </summary>
            <param name="errorMetadata">The failure information</param>
            <param name="failureType">The type of the failure</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.LogError(Xunit.Sdk.IErrorMetadata,System.String,System.Object[])">
            <summary>
            Logs an error message to the logger.
            </summary>
            <param name="errorMetadata">The failure information</param>
            <param name="failureTypeFormat">The type of the failure, in message format</param>
            <param name="args">The arguments to format <paramref name="failureTypeFormat"/> with</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.LogStackTrace(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <summary>
            Logs a stack trace to the logger.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.LogOutput(Xunit.Runner.Common.StackFrameInfo,System.String)">
            <summary>
            Logs test output to the logger.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.LogWarnings(Xunit.Runner.Common.StackFrameInfo,System.String[])">
            <summary>
            Logs warnings to the logger.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleErrorMessage(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.IErrorMessage})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.IErrorMessage"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Runner.Common.TestAssemblyDiscoveryFinished})">
            <summary>
            Called when <see cref="T:Xunit.Runner.Common.TestAssemblyDiscoveryFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestAssemblyDiscoveryStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Runner.Common.TestAssemblyDiscoveryStarting})">
            <summary>
            Called when <see cref="T:Xunit.Runner.Common.TestAssemblyDiscoveryStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Runner.Common.TestAssemblyExecutionFinished})">
            <summary>
            Called when <see cref="T:Xunit.Runner.Common.TestAssemblyExecutionFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestAssemblyExecutionStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Runner.Common.TestAssemblyExecutionStarting})">
            <summary>
            Called when <see cref="T:Xunit.Runner.Common.TestAssemblyExecutionStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestAssemblyCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestAssemblyCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestAssemblyFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyFinished})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestAssemblyFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestAssemblyStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyStarting})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestAssemblyStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestCaseCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCaseCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestCaseCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestCaseFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCaseFinished})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestCaseFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestCaseStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCaseStarting})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestCaseStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestClassCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestClassCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestClassCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestClassFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestClassFinished})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestClassFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestClassStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestClassStarting})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestClassStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestCollectionCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCollectionCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestCollectionCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestCollectionFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCollectionFinished})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestCollectionFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestCollectionStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCollectionStarting})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestCollectionStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestExecutionSummaries(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Runner.Common.TestExecutionSummaries})">
            <summary>
            Called when <see cref="T:Xunit.Runner.Common.TestExecutionSummaries"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestFailed(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestFailed})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestFailed"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestFinished})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestMethodCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestMethodCleanupFailure})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestMethodCleanupFailure"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestMethodFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestMethodFinished})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestMethodFinished"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestMethodStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestMethodStarting})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestMethodStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestOutput(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestOutput})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestPassed(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestPassed})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestPassed"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestSkipped(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestSkipped})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestSkipped"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.HandleTestStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestStarting})">
            <summary>
            Called when <see cref="T:Xunit.Sdk.ITestStarting"/> is raised.
            </summary>
            <param name="args">An object that contains the event data.</param>
        </member>
        <member name="M:Xunit.Runner.Common.DefaultRunnerReporterMessageHandler.WriteDefaultSummary(Xunit.Runner.Common.IRunnerLogger,Xunit.Runner.Common.TestExecutionSummaries)">
            <summary>
            Writes the default summary to the given logger. Can be used by other reporters who also wish to write the
            standard summary information.
            </summary>
            <param name="logger">The logger used to send result messages to.</param>
            <param name="summaries">The execution summary to display.</param>
        </member>
        <member name="T:Xunit.Runner.Common.JsonReporter">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter" /> that reports results as individual JSON
            objects on the console.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.JsonReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.JsonReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.JsonReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.JsonReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.JsonReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.JsonReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.JsonReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.JsonReporter" />.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.JsonReporterMessageHandler" /> class.
            </remarks>
            <param name="logger">The logger used to report messages</param>
        </member>
        <member name="M:Xunit.Runner.Common.JsonReporterMessageHandler.#ctor(Xunit.Runner.Common.IRunnerLogger)">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.JsonReporter" />.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.JsonReporterMessageHandler" /> class.
            </remarks>
            <param name="logger">The logger used to report messages</param>
        </member>
        <member name="M:Xunit.Runner.Common.JsonReporterMessageHandler.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.JsonReporterMessageHandler.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.QuietReporter">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter" /> that emits only error or warning messages.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.QuietReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.QuietReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.QuietReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.QuietReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.QuietReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.QuietReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.QuietReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.QuietReporter" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.QuietReporterMessageHandler.#ctor(Xunit.Runner.Common.IRunnerLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.QuietReporterMessageHandler" /> class.
            </summary>
            <param name="logger">The logger used to report messages</param>
        </member>
        <member name="T:Xunit.Runner.Common.SilentReporter">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter"/> that does not report any
            messages. Typically only used in context with the VSTest adapter, to prevent
            double reporting of messages
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.SilentReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.SilentReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.SilentReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.SilentReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.SilentReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.SilentReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.SilentReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler"/> that
            supports <see cref="T:Xunit.Runner.Common.SilentReporter"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.SilentReporterMessageHandler.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.SilentReporterMessageHandler.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TeamCityReporter">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter" /> that reports results to TeamCity. This
            is auto-enabled by the presence of the "TEAMCITY_PROJECT_NAME" environment variable.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TeamCityReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.TeamCityReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.TeamCityReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.TeamCityReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.TeamCityReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TeamCityReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.TeamCityReporter" />.
            </summary>
            <param name="logger">The logger used to report messages</param>
            <param name="rootFlowId">The root flow ID for reporting to TeamCity</param>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.#ctor(Xunit.Runner.Common.IRunnerLogger,System.String)">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.TeamCityReporter" />.
            </summary>
            <param name="logger">The logger used to report messages</param>
            <param name="rootFlowId">The root flow ID for reporting to TeamCity</param>
        </member>
        <member name="P:Xunit.Runner.Common.TeamCityReporterMessageHandler.UtcNow">
            <summary>
            Gets the current date &amp; time in UTC.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleErrorMessage(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.IErrorMessage})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.IErrorMessage" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestAssemblyCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyCleanupFailure})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestAssemblyCleanupFailure" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestAssemblyFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyFinished})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestAssemblyFinished" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestAssemblyStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyStarting})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestAssemblyStarting" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestCaseCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCaseCleanupFailure})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestCaseCleanupFailure" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestCaseFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCaseFinished})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestCaseFinished" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestCaseStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCaseStarting})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestCaseStarting" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestClassCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestClassCleanupFailure})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestClassCleanupFailure" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestClassFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestClassFinished})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestClassFinished" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestClassStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestClassStarting})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestClassStarting" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestCollectionCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCollectionCleanupFailure})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestCollectionCleanupFailure" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestCollectionFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCollectionFinished})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestCollectionFinished" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestCollectionStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCollectionStarting})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestCollectionStarting" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestCleanupFailure})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestCleanupFailure" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestFailed(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestFailed})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestFailed" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestFinished})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestFinished" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestMethodCleanupFailure(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestMethodCleanupFailure})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestMethodCleanupFailure" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestMethodFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestMethodFinished})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestMethodFinished" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestMethodStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestMethodStarting})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestMethodStarting" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestSkipped(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestSkipped})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestSkipped" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.HandleTestStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestStarting})">
            <summary>
            Handles instances of <see cref="T:Xunit.Sdk.ITestStarting" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TeamCityReporterMessageHandler.TeamCityEscape(System.String)">
            <summary>
            Escapes a string to be sent in a TeamCity message.
            </summary>
            <param name="value">The value to be escaped</param>
            <returns>The escaped value</returns>
        </member>
        <member name="T:Xunit.Runner.Common.VerboseReporter">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter" /> that supplements the default reporter
            behavior by printing out the start and finish of each executing test.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.VerboseReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VerboseReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VerboseReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VerboseReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VerboseReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VerboseReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.VerboseReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.VerboseReporter" />.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.VerboseReporterMessageHandler.#ctor(Xunit.Runner.Common.IRunnerLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.VerboseReporterMessageHandler" /> class.
            </summary>
            <param name="logger">The logger used to report messages</param>
        </member>
        <member name="T:Xunit.Runner.Common.VstsReporter">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporter" /> that reports results to Azure DevOps/VSTS.
            This is auto-enabled by the presence of four required environment variables: "VSTS_ACCESS_TOKEN",
            "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI", "SYSTEM_TEAMPROJECT", and "BUILD_BUILDID".
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.VstsReporter.CanBeEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VstsReporter.Description">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VstsReporter.ForceNoLogo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VstsReporter.IsEnvironmentallyEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.VstsReporter.RunnerSwitch">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.VstsReporterMessageHandler">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.VstsReporter" />.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.VstsReporterMessageHandler" /> class.
            </remarks>
            <param name="logger">The logger used to report messages</param>
            <param name="baseUri">The base URI for talking to Azure DevOps/VSTS</param>
            <param name="accessToken">The access token required to talk to Azure DevOps/VSTS</param>
            <param name="buildId">The ID of build that's currently being run</param>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.#ctor(Xunit.Runner.Common.IRunnerLogger,System.String,System.String,System.Int32)">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.IRunnerReporterMessageHandler" /> that supports <see cref="T:Xunit.Runner.Common.VstsReporter" />.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.VstsReporterMessageHandler" /> class.
            </remarks>
            <param name="logger">The logger used to report messages</param>
            <param name="baseUri">The base URI for talking to Azure DevOps/VSTS</param>
            <param name="accessToken">The access token required to talk to Azure DevOps/VSTS</param>
            <param name="buildId">The ID of build that's currently being run</param>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.HandleTestAssemblyFinished(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyFinished})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.HandleTestAssemblyStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestAssemblyStarting})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.HandleTestStarting(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestStarting})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.HandleTestPassed(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestPassed})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.HandleTestSkipped(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestSkipped})">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.VstsReporterMessageHandler.HandleTestFailed(Xunit.Runner.Common.MessageHandlerArgs{Xunit.Sdk.ITestFailed})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.RegisteredRunnerReporters">
            <summary>
            Utility class for enumerating the runner reporters registered for the given assembly.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.RegisteredRunnerReporters.Get(System.Reflection.Assembly,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets the list of rrunner reporters registered for the given assembly.
            </summary>
            <param name="assembly">The assembly</param>
            <param name="messages">Messages that were generated during discovery</param>
            <returns>List of available reporters</returns>
        </member>
        <member name="T:Xunit.Runner.Common.RegisterRunnerReporterAttribute">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate the availability of a custom
            runner reporter.
            </summary>
            <param name="runnerReporterType">The type of the runner reporter to register. The type
            must implement <see cref="T:Xunit.Runner.Common.IRunnerReporter"/>.</param>
        </member>
        <member name="M:Xunit.Runner.Common.RegisterRunnerReporterAttribute.#ctor(System.Type)">
            <summary>
            Used to decorate xUnit.net test assemblies to indicate the availability of a custom
            runner reporter.
            </summary>
            <param name="runnerReporterType">The type of the runner reporter to register. The type
            must implement <see cref="T:Xunit.Runner.Common.IRunnerReporter"/>.</param>
        </member>
        <member name="P:Xunit.Runner.Common.RegisterRunnerReporterAttribute.RunnerReporterType">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.AggregateMessageSink">
            <summary>
            An implementation of <see cref="T:Xunit.Sdk.IMessageSink"/> which dispatches messages
            to one or more individual message sinks.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.AggregateMessageSink.AggregatedSinks">
            <summary>
            The list of event dispatchers that are registered with the system.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.AggregateMessageSink.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.AggregateMessageSink.GetOrCreateAggregatedSink``1(``0@)">
            <summary>
            Gets a dispatcher, optionally creating and registering it if it doesn't exist.
            </summary>
            <typeparam name="TDispatcher">The type of the dispatcher</typeparam>
            <param name="value">The dispatcher</param>
            <returns>The dispatcher</returns>
        </member>
        <member name="M:Xunit.Runner.Common.AggregateMessageSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.ConsoleDiagnosticMessageSink">
            <summary>
            Logs diagnostic messages to the system console.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleDiagnosticMessageSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleDiagnosticMessageSink.TryCreate(Xunit.Runner.Common.ConsoleHelper,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Tries to create a new instance of the <see cref="T:Xunit.Runner.Common.ConsoleDiagnosticMessageSink"/> which will display instances
            of <see cref="T:Xunit.Sdk.IDiagnosticMessage"/> and <see cref="T:Xunit.Sdk.IInternalDiagnosticMessage"/> to the <see cref="T:System.Console"/>.
            May return <c>null</c> if both <paramref name="showDiagnosticMessages"/> and <paramref name="showInternalDiagnosticMessages"/>
            are <c>false</c>.
            </summary>
            <param name="consoleHelper">The helper used to write console messages</param>
            <param name="noColor">A flag to indicate that the user has asked for no color</param>
            <param name="showDiagnosticMessages">A flag to indicate whether diagnostic messages should be shown</param>
            <param name="showInternalDiagnosticMessages">A flag to indicate whether internal diagnostic messages should be shown</param>
            <param name="assemblyDisplayName">The optional assembly display name to delineate the messages</param>
            <param name="indent">Whether to indent the message</param>
        </member>
        <member name="T:Xunit.Runner.Common.DiagnosticEventSink">
            <summary>
            Class that maps diagnostic messages to events.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.DiagnosticEventSink.DiagnosticMessageEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IDiagnosticMessage"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.DiagnosticEventSink.ErrorMessageEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IErrorMessage"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.DiagnosticEventSink.InternalDiagnosticMessageEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IInternalDiagnosticMessage"/> message is received.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DiagnosticEventSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.DiscoveryEventSink">
            <summary>
            Class that maps test framework discovery messages to events.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.DiscoveryEventSink.DiscoveryCompleteEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IDiscoveryComplete"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.DiscoveryEventSink.DiscoveryStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IDiscoveryStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.DiscoveryEventSink.TestCaseDiscoveredEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCaseDiscovered"/> message is received.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.DiscoveryEventSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.ExecutionEventSink">
            <summary>
            Class that maps test framework execution messages to events.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.AfterTestFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IAfterTestFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.AfterTestStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IAfterTestStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.BeforeTestFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IBeforeTestFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.BeforeTestStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.IBeforeTestStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestAssemblyCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestAssemblyCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestAssemblyFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestAssemblyFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestAssemblyStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestAssemblyStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestCaseCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCaseCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestCaseFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCaseFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestCaseStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCaseStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestClassCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestClassCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestClassConstructionFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestClassConstructionFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestClassConstructionStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestClassConstructionStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestClassDisposeFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestClassDisposeFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestClassDisposeStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestClassDisposeStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestClassFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestClassFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestClassStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestClassStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestCollectionCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCollectionCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestCollectionFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCollectionFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestCollectionStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestCollectionStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestFailedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestFailed"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestMethodCleanupFailureEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestMethodCleanupFailure"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestMethodFinishedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestMethodFinished"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestMethodStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestMethodStarting"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestNotRunEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestNotRun"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestOutputEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestOutput"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestPassedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestPassed"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestSkippedEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestSkipped"/> message is received.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.ExecutionEventSink.TestStartingEvent">
            <summary>
            Occurs when a <see cref="T:Xunit.Sdk.ITestStarting"/> message is received.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ExecutionEventSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.MessageHandler`1">
            <summary>
            Represents a handler for a message, which includes the ability to signal that
            tests should stop running.
            </summary>
            <typeparam name="TMessage">The type of the message to be handled.</typeparam>
            <param name="args">The message.</param>
        </member>
        <member name="T:Xunit.Runner.Common.MessageHandlerArgs">
            <summary>
            Allows cancellation during message handling.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.MessageHandlerArgs.IsStopped">
            <summary>
            Gets a value to indicate whether stop has been requested.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.MessageHandlerArgs.Stop">
            <summary>
            Call to indicate that execution should stop.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.MessageHandlerArgs`1">
            <summary>
            Wraps a message with the ability to cancel execution.
            </summary>
            <typeparam name="TMessage">The type of the message to be handled.</typeparam>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageHandlerArgs`1.#ctor(`0)">
            <summary>
            Wraps a message with the ability to cancel execution.
            </summary>
            <typeparam name="TMessage">The type of the message to be handled.</typeparam>
            <param name="message">The message to be handled.</param>
        </member>
        <member name="P:Xunit.Runner.Common.MessageHandlerArgs`1.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.RunnerEventSink">
            <summary>
            Class that maps test runner messages to events.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.RunnerEventSink.TestAssemblyDiscoveryFinishedEvent">
            <summary>
            Occurs when the runner is starting discovery for a given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.RunnerEventSink.TestAssemblyDiscoveryStartingEvent">
            <summary>
            Occurs when the runner has finished discovery for a given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.RunnerEventSink.TestAssemblyExecutionFinishedEvent">
            <summary>
            Occurs when the runner has finished executing the given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.RunnerEventSink.TestAssemblyExecutionStartingEvent">
            <summary>
            Occurs when the runner is starting to execution the given test assembly.
            </summary>
        </member>
        <member name="E:Xunit.Runner.Common.RunnerEventSink.TestExecutionSummariesEvent">
            <summary>
            Occurs when the runner has finished executing all test assemblies.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.RunnerEventSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.ExecutionSink">
            <summary>
            This is the execution sink which most runners will use, which can perform several operations
            (including recording XML results, detecting long running tests, failing skipped tests,
            failing tests with warnings, and converting the top-level discovery and execution messages
            into their runner counterparts).
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ExecutionSink.#ctor(Xunit.Runner.Common.XunitProjectAssembly,Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.Sdk.ITestFrameworkExecutionOptions,Xunit.Runner.Common.AppDomainOption,System.Boolean,Xunit.Sdk.IMessageSink,Xunit.Runner.Common.ExecutionSinkOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.ExecutionSink"/> class.
            </summary>
            <param name="assembly">The assembly under test.</param>
            <param name="discoveryOptions">The options used during test discovery.</param>
            <param name="executionOptions">The options used during test execution.</param>
            <param name="appDomainOption">A flag to indicate whether app domains are in use.</param>
            <param name="shadowCopy">A flag to indicate whether shadow copying is in use.</param>
            <param name="innerSink">The inner sink to forward messages to (typically the reporter
            message handler, retrieved by calling <see cref="M:Xunit.Runner.Common.IRunnerReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)"/>
            on the runner reporter)</param>
            <param name="options">The options to use for the execution sink</param>
        </member>
        <member name="M:Xunit.Runner.Common.ExecutionSink.#ctor(Xunit.Runner.Common.XunitProjectAssembly,Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.Sdk.ITestFrameworkExecutionOptions,Xunit.Runner.Common.AppDomainOption,System.Boolean,Xunit.Sdk.IMessageSink,Xunit.Runner.Common.ExecutionSinkOptions,Xunit.Runner.Common.ISourceInformationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.ExecutionSink"/> class.
            </summary>
            <param name="assembly">The assembly under test.</param>
            <param name="discoveryOptions">The options used during test discovery.</param>
            <param name="executionOptions">The options used during test execution.</param>
            <param name="appDomainOption">A flag to indicate whether app domains are in use.</param>
            <param name="shadowCopy">A flag to indicate whether shadow copying is in use.</param>
            <param name="innerSink">The inner sink to forward messages to (typically the reporter
            message handler, retrieved by calling <see cref="M:Xunit.Runner.Common.IRunnerReporter.CreateMessageHandler(Xunit.Runner.Common.IRunnerLogger,Xunit.Sdk.IMessageSink)"/>
            on the runner reporter)</param>
            <param name="options">The options to use for the execution sink</param>
            <param name="sourceInformationProvider">The source information provider</param>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSink.ExecutionSummary">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSink.Finished">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSink.UtcNow">
            <summary>
            Returns the current time in UTC. Overrideable for testing purposes.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ExecutionSink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ExecutionSink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.ExecutionSink.WaitForStopEvent(System.Int32)">
            <summary>
            Performs a Task-safe delay. Overrideable for testing purposes.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.ExecutionSinkOptions">
            <summary>
            These are the options used when creating <see cref="T:Xunit.Runner.Common.ExecutionSink"/>. This is
            set up as an options class so that new options can be added without breaking
            binary compatibility.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.AssemblyElement">
            <summary>
            Gets or sets the assembly element used for creating XML. If this is <c>null</c>,
            then XML will not be created.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.CancelThunk">
            <summary>
            Gets or sets a thunk to be used to determine whether cancellation has been requested.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.DiagnosticMessageSink">
            <summary>
            Gets or sets the diagnostic message sink to report diagnostic messages to. In order
            for long running tests to be reported, this must not be <c>null</c>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.FinishedCallback">
            <summary>
            Gets or sets a callback to be called when execution is complete.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.FailSkips">
            <summary>
            Gets or sets a flag indicating whether skipped tests should be reported as failed
            tests. If this is not <c>true</c>, then skipped tests will be reported as skipped.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.FailWarn">
            <summary>
            Gets or sets a flag indicating whether passing tests with warnings should be
            reported as failed tests. If this is not <c>true</c>, then passing tests with
            warnings will be reported as passing tests.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.LongRunningTestCallback">
            <summary>
            Gets or sets a callback to be called when a long running test has been detected.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ExecutionSinkOptions.LongRunningTestTime">
            <summary>
            Gets or sets the time after which to report long running tests. If the time span
            specified here is not greater than <see cref="F:System.TimeSpan.Zero"/>, then long running
            tests will not be detected.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestDiscoverySink">
            <summary>
            An implementation of <see cref="T:Xunit.Sdk.IMessageSink"/> designed for test discovery for a
            single test assembly. The <see cref="P:Xunit.Runner.Common.TestDiscoverySink.Finished"/> event is triggered when discovery is complete.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestDiscoverySink.#ctor(System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.TestDiscoverySink"/> class.
            </summary>
            <param name="cancelThunk">An optional thunk which can be used to control cancellation.</param>
        </member>
        <member name="P:Xunit.Runner.Common.TestDiscoverySink.DiscoverySink">
            <summary>
            Gets the event sink used to record discovery messages.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestDiscoverySink.Finished">
            <summary>
            Gets an event which is signaled once discovery is finished.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestDiscoverySink.TestCases">
            <summary>
            The list of discovered test cases.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestDiscoverySink.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Runner.Common.TestDiscoverySink.OnMessage(Xunit.Sdk.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Runner.Common.TestMessageSink">
            <summary>
            An implementation of <see cref="T:Xunit.Sdk.IMessageSink"/> that provides access to events for all
            levels of reporting.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMessageSink.Diagnostics">
            <summary>
            Gets a list of diagnostics events that can be subscribed to.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMessageSink.Discovery">
            <summary>
            Gets a list of discovery events that can be subscribed to.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMessageSink.Execution">
            <summary>
            Gets a list of execution events that can be subscribed to.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestMessageSink.Runner">
            <summary>
            Gets a list of runner events that can be subscribed to.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.Transform">
            <summary>
            Represents a single report transformation from XML.
            </summary>
            <param name="id">The transform ID</param>
            <param name="description">The transform description</param>
            <param name="outputHandler">The handler which will write the v2 XML to the given file</param>
        </member>
        <member name="M:Xunit.Runner.Common.Transform.#ctor(System.String,System.String,System.Action{System.Xml.Linq.XElement,System.String})">
            <summary>
            Represents a single report transformation from XML.
            </summary>
            <param name="id">The transform ID</param>
            <param name="description">The transform description</param>
            <param name="outputHandler">The handler which will write the v2 XML to the given file</param>
        </member>
        <member name="P:Xunit.Runner.Common.Transform.ID">
            <summary>
            Gets the transform ID.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.Transform.Description">
            <summary>
            Gets description of the transformation. Suitable for displaying to end users.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.Transform.OutputHandler">
            <summary>
            Gets the output handler for the transformation. Converts XML to a file on the
            file system.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TransformFactory">
            <summary>
            Used to retrieve a list of available
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TransformFactory.AvailableTransforms">
            <summary>
            Gets the list of available transforms.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TransformFactory.CreateAssembliesElement">
            <summary>
            Creates the root "assemblies" XML element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xunit.Runner.Common.TransformFactory.FinishAssembliesElement(System.Xml.Linq.XElement)">
            <summary>
            Finishes the assemblies element by supplementing with summary attributes.
            </summary>
            <param name="assembliesElement"></param>
        </member>
        <member name="M:Xunit.Runner.Common.TransformFactory.GetXmlTransformers(Xunit.Runner.Common.XunitProject)">
            <summary>
            Gets the list of XML transformer functions for the given project.
            </summary>
            <param name="project">The project to get transforms for.</param>
            <returns>The list of transform functions.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.TransformFactory.Transform(System.String,System.Xml.Linq.XElement,System.String)">
            <summary>
            Runs the transformation for the given ID and XML, and writes it to the given output file.
            </summary>
            <param name="id">The transform ID</param>
            <param name="assembliesElement">The assembly XML to transform</param>
            <param name="outputFileName">The output file name</param>
        </member>
        <member name="T:Xunit.Runner.Common.AssemblyMetadata">
            <summary>
            Represents metadata about an assembly.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.AssemblyMetadata.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.AssemblyMetadata"/> class.
            </summary>
            <param name="xunitVersion">The xUnit.net version (0 = unknown, or 1/2/3)</param>
            <param name="targetFramework">The target framework</param>
        </member>
        <member name="P:Xunit.Runner.Common.AssemblyMetadata.TargetFrameworkIdentifier">
            <summary>
            Gets the target framework identifier the assembly was built against.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.AssemblyMetadata.TargetFrameworkVersion">
            <summary>
            Gets the version of the target framework identifier that the assembly was built against.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.AssemblyMetadata.XunitVersion">
            <summary>
            Gets the major version of xUnit.net this assembly targets (<c>1</c>, <c>2</c>, or <c>3</c>); may return a value
            of <c>0</c> if the version is unknown.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.ConsoleHelper">
            <summary>
            This class helps write colored text to the console. On Windows, it will use the built-in
            console functions; on Linux and macOS, it will use ANSI color codes.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.#ctor(System.IO.TextReader,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.ConsoleHelper"/> class.
            </summary>
            <param name="consoleReader">The <see cref="T:System.IO.TextReader"/> for the console (typically <see cref="P:System.Console.In"/>).</param>
            <param name="consoleWriter">The <see cref="T:System.IO.TextWriter"/> for the console (typically <see cref="P:System.Console.Out"/>).</param>
        </member>
        <member name="P:Xunit.Runner.Common.ConsoleHelper.LockObject">
            <summary>
            Gets a lock object that can be used to lock multiple calls to <see cref="T:Xunit.Runner.Common.ConsoleHelper"/>
            functions to ensure consistent output.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ConsoleHelper.ResetColor">
            <summary>
            Equivalent to <see cref="M:System.Console.ResetColor"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ConsoleHelper.SetBackgroundColor">
            <summary>
            Equivalent to <see cref="P:System.Console.BackgroundColor"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.ConsoleHelper.SetForegroundColor">
            <summary>
            Equivalent to <see cref="P:System.Console.ForegroundColor"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.ReadLine">
            <summary>
            Gets a line of input from the console.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.UseAnsiColor">
            <summary>
            Force using ANSI color instead of deciding based on OS.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.Write(System.String)">
            <summary>
            Writes the string value to the console.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.Write(System.String,System.Object)">
            <summary>
            Writes a formatted string value to the console.
            </summary>
            <param name="format">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string</param>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes a formatted string value to the console.
            </summary>
            <param name="format">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string</param>
            <param name="arg1">The value to replace {1} in the format string</param>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes a formatted string value to the console.
            </summary>
            <param name="format">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string</param>
            <param name="arg1">The value to replace {1} in the format string</param>
            <param name="arg2">The value to replace {2} in the format string</param>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.Write(System.String,System.Object[])">
            <summary>
            Writes a formatted string value to the console.
            </summary>
            <param name="format">The message format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.WriteLine">
            <summary>
            Writes <see cref="P:System.Environment.NewLine"/> to the console.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.WriteLine(System.String)">
            <summary>
            Writes the string value to the console, followed by <see cref="P:System.Environment.NewLine"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.WriteLine(System.String,System.Object)">
            <summary>
            Writes a formatted string value to the console, followed by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="format">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string</param>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes a formatted string value to the console, followed by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="format">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string</param>
            <param name="arg1">The value to replace {1} in the format string</param>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes a formatted string value to the console, followed by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="format">The message format string</param>
            <param name="arg0">The value to replace {0} in the format string</param>
            <param name="arg1">The value to replace {1} in the format string</param>
            <param name="arg2">The value to replace {2} in the format string</param>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleHelper.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a formatted string value to the console, followed by <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="format">The message format string</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Xunit.Runner.Common.ConsoleProjectLister">
            <summary>
            Helper class to list project contents out to <see cref="T:System.Console"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.ConsoleProjectLister.List``1(Xunit.Runner.Common.ConsoleHelper,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.List{``0}},Xunit.Runner.Common.ListOption,Xunit.Runner.Common.ListFormat)">
            <summary>
            List the contents of the test cases to the console, based on the provided option and format.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.MessageMetadataCache">
            <summary>
            Caches message metadata for xUnit.net v3 messages. The metadata which is cached depends on
            the message that is passed (for example, looking up with an <see cref="T:Xunit.Sdk.ITestAssemblyMessage"/>
            will return an <see cref="T:Xunit.Sdk.IAssemblyMetadata"/>). Storage methods require the "Starting" versions
            of messages (as these are the ones which contain the metadata), and removal methods require the
            "Finished" versions of messages.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.Set(Xunit.Sdk.ITestAssemblyStarting)">
            <summary>
            Sets <see cref="T:Xunit.Sdk.IAssemblyMetadata"/> into the cache.
            </summary>
            <param name="message">The message that contains the metadata.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.Set(Xunit.Sdk.ITestCaseStarting)">
            <summary>
            Sets <see cref="T:Xunit.Sdk.ITestCaseMetadata"/> into the cache.
            </summary>
            <param name="message">The message that contains the metadata.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.Set(Xunit.Sdk.ITestClassStarting)">
            <summary>
            Sets <see cref="T:Xunit.Sdk.ITestClassMetadata"/> into the cache.
            </summary>
            <param name="message">The message that contains the metadata.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.Set(Xunit.Sdk.ITestCollectionStarting)">
            <summary>
            Sets <see cref="T:Xunit.Sdk.ITestCollectionMetadata"/> into the cache.
            </summary>
            <param name="message">The message that contains the metadata.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.Set(Xunit.Sdk.ITestStarting)">
            <summary>
            Sets <see cref="T:Xunit.Sdk.ITestMetadata"/> into the cache.
            </summary>
            <param name="message">The message that contains the metadata.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.Set(Xunit.Sdk.ITestMethodStarting)">
            <summary>
            Sets <see cref="T:Xunit.Sdk.ITestMethodMetadata"/> into the cache.
            </summary>
            <param name="message">The message that contains the metadata.</param>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetAssemblyMetadata(System.String,System.Boolean)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.IAssemblyMetadata"/> from the cache (and optionally remove it).
            </summary>
            <param name="assemblyUniqueID">The unique ID of the assembly to retrieve.</param>
            <param name="remove">Set to <c>true</c> to remove the metadata after retrieval.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetAssemblyMetadata(Xunit.Sdk.ITestAssemblyMessage)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.IAssemblyMetadata"/> from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetTestCaseMetadata(System.String,System.Boolean)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestCaseMetadata"/> from the cache (and optionally remove it).
            </summary>
            <param name="testCaseUniqueID">The unique ID of the test case to retrieve.</param>
            <param name="remove">Set to <c>true</c> to remove the metadata after retrieval.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetTestCaseMetadata(Xunit.Sdk.ITestCaseMessage)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestCaseMetadata"/> from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetClassMetadata(System.String,System.Boolean)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestClassMetadata"/> from the cache (and optionally remove it).
            </summary>
            <param name="testClassUniqueID">The unique ID of the test class to retrieve.</param>
            <param name="remove">Set to <c>true</c> to remove the metadata after retrieval.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetClassMetadata(Xunit.Sdk.ITestClassMessage)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestClassMetadata"/> from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetCollectionMetadata(System.String,System.Boolean)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestCollectionMetadata"/> from the cache (and optionally remove it).
            </summary>
            <param name="testCollectionUniqueID">The unique ID of the test collection to retrieve.</param>
            <param name="remove">Set to <c>true</c> to remove the metadata after retrieval.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetCollectionMetadata(Xunit.Sdk.ITestCollectionMessage)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestCollectionMetadata"/> from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetMethodMetadata(System.String,System.Boolean)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestMethodMetadata"/> from the cache (and optionally remove it).
            </summary>
            <param name="testMethodUniqueID">The unique ID of the test method to retrieve.</param>
            <param name="remove">Set to <c>true</c> to remove the metadata after retrieval.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetMethodMetadata(Xunit.Sdk.ITestMethodMessage)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestMethodMetadata"/> from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetTestMetadata(System.String,System.Boolean)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestMetadata"/> from the cache (and optionally remove it).
            </summary>
            <param name="testUniqueID">The unique ID of the test to retrieve.</param>
            <param name="remove">Set to <c>true</c> to remove the metadata after retrieval.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryGetTestMetadata(Xunit.Sdk.ITestMessage)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestMetadata"/> from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryRemove(Xunit.Sdk.ITestAssemblyFinished)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.IAssemblyMetadata"/> from the cache, and if present,
            removes the metadata from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryRemove(Xunit.Sdk.ITestCaseFinished)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestCaseMetadata"/> from the cache, and if present,
            removes the metadata from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryRemove(Xunit.Sdk.ITestClassFinished)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestClassMetadata"/> from the cache, and if present,
            removes the metadata from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryRemove(Xunit.Sdk.ITestCollectionFinished)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestCollectionMetadata"/> from the cache, and if present,
            removes the metadata from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryRemove(Xunit.Sdk.ITestFinished)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestMetadata"/> from the cache, and if present,
            removes the metadata from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageMetadataCache.TryRemove(Xunit.Sdk.ITestMethodFinished)">
            <summary>
            Attempts to retrieve <see cref="T:Xunit.Sdk.ITestMethodMetadata"/> from the cache, and if present,
            removes the metadata from the cache.
            </summary>
            <param name="message">The message that indicates which metadata to retrieve.</param>
            <returns>The cached metadata, if present; or <c>null</c> if there isn't any.</returns>
        </member>
        <member name="T:Xunit.Runner.Common.MessageSinkMessageDeserializer">
            <summary>
            A class which understands how to deserialize <see cref="T:Xunit.Sdk.IMessageSinkMessage"/> instances that are decorated
            with <see cref="T:Xunit.Sdk.JsonTypeIDAttribute"/>. The built-in messages are registered by default, and additional messages
            can be registered via <see cref="M:Xunit.Runner.Common.MessageSinkMessageDeserializer.RegisterMessageSinkMessageType(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessageDeserializer.Deserialize(System.String,Xunit.Sdk.IMessageSink)">
            <summary>
            Parses a previously serialized <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>-derived object.
            </summary>
            <param name="serialization">The serialized value</param>
            <param name="diagnosticMessageSink">The mesage sink to report </param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Xunit.Runner.Common.MessageSinkMessageDeserializer.RegisterMessageSinkMessageType(System.Type)">
            <summary>
            Registers an implementation of <see cref="T:Xunit.Sdk.IMessageSinkMessage"/> and <see cref="T:Xunit.Sdk.IJsonDeserializable"/>, decorated
            with <see cref="T:Xunit.Sdk.JsonTypeIDAttribute"/> so that it can be deserialized by the runner pipeline.
            </summary>
            <param name="type">The message type to register</param>
        </member>
        <member name="T:Xunit.Runner.Common.StackFrameTransformer">
            <summary>
            Transforms stack frames and stack traces into compiler-like output
            so they can be double-clicked in Visual Studio.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.StackFrameTransformer.TransformFrame(System.String,System.String)">
            <summary>
            Transforms an individual stack frame.
            </summary>
            <param name="stackFrame">The stack frame to transform</param>
            <param name="defaultDirectory">The default directory used for computing relative paths</param>
            <returns>The transformed stack frame</returns>
        </member>
        <member name="M:Xunit.Runner.Common.StackFrameTransformer.TransformStack(System.String,System.String)">
            <summary>
            Transforms a stack.
            </summary>
            <param name="stack">The stack to transform</param>
            <param name="defaultDirectory">The default directory used for computing relative paths</param>
            <returns>The transformed stack</returns>
        </member>
        <member name="T:Xunit.Runner.Common.TargetFrameworkIdentifier">
            <summary>
            Represents the target framework identifier that an assembly is targeting
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.TargetFrameworkIdentifier.UnknownTargetFramework">
            <summary>
            The target framework is unknown.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.TargetFrameworkIdentifier.DotNetFramework">
            <summary>
            The target framework is .NET Framework.
            </summary>
        </member>
        <member name="F:Xunit.Runner.Common.TargetFrameworkIdentifier.DotNetCore">
            <summary>
            The target framework is .NET or .NET Core.
            </summary>
        </member>
        <member name="T:Xunit.Runner.Common.TestAssemblyInfo">
            <summary>
            This is the class that wraps the data expected to be returned when invoking a v3 test project with
            the <c>-assemblyInfo</c> switch.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyInfo.#ctor(System.Version,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Runner.Common.TestAssemblyInfo"/> class.
            </summary>
            <param name="coreFramework">The version of <c>xunit.v3.core</c></param>
            <param name="coreFrameworkInformational">The informational verison of <c>xunit.v3.core</c></param>
            <param name="targetFramework">The target framework the test assembly was built against</param>
            <param name="testFramework">The display name of the test framework</param>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.ArchOS">
            <summary>
            Gets the value returned by <see cref="P:System.Runtime.InteropServices.RuntimeInformation.OSArchitecture"/>.
            </summary>
            <remarks>
            This is returned as a string value rather than the enum value, given the variance of available values spanning
            across operating systems and frameworks.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.ArchProcess">
            <summary>
            Gets the value returned by <see cref="P:System.Runtime.InteropServices.RuntimeInformation.ProcessArchitecture"/>.
            </summary>
            <remarks>
            This is returned as a string value rather than the enum value, given the variance of available values spanning
            across operating systems and frameworks.
            </remarks>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.CoreFramework">
            <summary>
            Gets the assembly version of <c>xunit.v3.core.dll</c>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.CoreFrameworkInformational">
            <summary>
            Gets the informational assembly version of <c>xunit.v3.core.dll</c>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.PointerSize">
            <summary>
            Gets the bit-size of pointers in the test process (i.e., <c><see cref="P:System.IntPtr.Size"/> * 8</c>).
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.RuntimeFramework">
            <summary>
            Gets the value returned by <see cref="P:System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription"/>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.TargetFramework">
            <summary>
            Gets the target framework the test process was built for, as embedded into the assembly-level
            attribute <see cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName"/>. In the rare condition that
            this attribute is missing, this will return <c>UnknownTargetFramework</c>.
            </summary>
        </member>
        <member name="P:Xunit.Runner.Common.TestAssemblyInfo.TestFramework">
            <summary>
            Gets the value returned by <see cref="P:ITestFramework.TestFrameworkDisplayName"/>. The default
            test framework will return a value like <c>"xUnit.net v3 &lt;core-framework-informational&gt;"</c>.
            </summary>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyInfo.FromJson(System.String)">
            <summary>
            Rehydrates an instance of <see cref="T:Xunit.Runner.Common.TestAssemblyInfo"/> from the given JSON.
            </summary>
            <param name="serialization">The JSON serialization</param>
        </member>
        <member name="M:Xunit.Runner.Common.TestAssemblyInfo.ToJson">
            <summary>
            Gets this object in JSON format, which can be rehydrated with <see cref="M:Xunit.Runner.Common.TestAssemblyInfo.FromJson(System.String)"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.MessageSinkMessageExtensions">
            <summary>
            Extension methods for <see cref="T:Xunit.Sdk.IMessageSinkMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MessageSinkMessageExtensions.DispatchWhen``1(Xunit.Sdk.IMessageSinkMessage,Xunit.Runner.Common.MessageHandler{``0})">
            <summary>
            Handles a message of a specific type by testing it for the type, as well as verifying that there
            is a registered callback.
            </summary>
            <param name="message">The message to dispatch.</param>
            <param name="callback">The callback to dispatch the message to.</param>
            <returns>Returns <c>true</c> if processing should continue; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.MessageSinkMessageExtensions.ToTestCaseDiscovered(Xunit.Sdk.ITestCase)">
            <summary>
            Converts an instance of <see cref="T:Xunit.Sdk.ITestCase"/> into <see cref="T:Xunit.Sdk.ITestCaseDiscovered"/> for reporting
            back to a remote meta-runner.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MessageSinkMessageExtensions.WithSourceInfo(Xunit.Sdk.ITestCaseDiscovered,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCaseDiscovered"/>, replacing the source file and line number information
            with the provided values.
            </summary>
            <param name="discovered"/>
            <param name="sourceFilePath">The source file</param>
            <param name="sourceLineNumber">The line number</param>
        </member>
        <member name="M:Xunit.Sdk.MessageSinkMessageExtensions.WithSourceInfo(Xunit.Sdk.ITestCaseDiscovered,Xunit.Runner.Common.ISourceInformationProvider)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCaseDiscovered"/>, replacing the source file and line number information
            with values from the source information provider.
            </summary>
            <param name="discovered"/>
            <param name="sourceInformationProvider">The source information provider</param>
        </member>
        <member name="M:Xunit.Sdk.MessageSinkMessageExtensions.WithSourceInfo(Xunit.Sdk.ITestCaseStarting,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCaseStarting"/>, replacing the source file and line number information
            with the provided values.
            </summary>
            <param name="starting"/>
            <param name="sourceFilePath">The source file</param>
            <param name="sourceLineNumber">The line number</param>
        </member>
        <member name="M:Xunit.Sdk.MessageSinkMessageExtensions.WithSourceInfo(Xunit.Sdk.ITestCaseStarting,Xunit.Runner.Common.ISourceInformationProvider)">
            <summary>
            Creates a new <see cref="T:Xunit.Sdk.ITestCaseDiscovered"/>, replacing the source file and line number information
            with values from the source information provider.
            </summary>
            <param name="starting"/>
            <param name="sourceInformationProvider">The source information provider</param>
        </member>
        <member name="T:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions">
            <summary>
            Extension methods for reading and writing <see cref="T:Xunit.Sdk.ITestFrameworkDiscoveryOptions"/>
            and <see cref="T:Xunit.Sdk.ITestFrameworkExecutionOptions"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetCulture(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the culture to use for discovering tests. <c>null</c> uses the default OS culture;
            <see cref="F:System.String.Empty"/> uses the invariant culture; any other value passes the
            provided value to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/> and uses the resulting object
            with <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessages(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessagesOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not
            set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetIncludeSourceInformation(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether discovered test cases should include source information.
            Note that not all runners have access to source information, so this flag does not guarantee
            that source information will be provided.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetIncludeSourceInformationOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether discovered test cases should include source information.
            Note that not all runners have access to source information, so this flag does not guarantee
            that source information will be provided. If the flag is not present, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessages(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessagesOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted. If the flag is not
            set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetMethodDisplay(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format for test methods. If the flag is not present,
            returns the default value (<see cref="F:Xunit.Sdk.TestMethodDisplay.ClassAndMethod"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOptions(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format options for test methods.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetMethodDisplayOptionsOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines the default display name format options for test methods. If the flag is not present,
            returns the default value (<see cref="F:Xunit.Sdk.TestMethodDisplayOptions.None"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPreEnumerateTheories(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the
            discovery system will return a test case for each row of test data; they are disabled, then the
            discovery system will return a single test case for the theory.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPreEnumerateTheoriesOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether theories are pre-enumerated. If they enabled, then the
            discovery system will return a test case for each row of test data; they are disabled, then the
            discovery system will return a single test case for the theory. If the flag is not present,
            returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxEnumerableLength(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum length for printing collections.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectDepth(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum recursive depth for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectMemberCount(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum numbers of members to show for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxStringLength(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets the maximum length for printing strings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReporting(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReportingOrDefault(Xunit.Sdk.ITestFrameworkDiscoveryOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetCulture(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.String)">
            <summary>
            Sets the culture to use for discovering tests. <c>null</c> uses the default OS culture;
            <see cref="F:System.String.Empty"/> uses the invariant culture; any other value passes the
            provided value to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/> and uses the resulting object
            with <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetDiagnosticMessages(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetIncludeSourceInformation(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether discovered test cases should include source information.
            Note that not all runners have access to source information, so this flag does not guarantee
            that source information will be provided.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetInternalDiagnosticMessages(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetMethodDisplay(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{Xunit.Sdk.TestMethodDisplay})">
            <summary>
            Sets a flag that determines the default display name format for test methods.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetMethodDisplayOptions(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{Xunit.Sdk.TestMethodDisplayOptions})">
            <summary>
            Sets the flags that determine the default display options for test methods.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPreEnumerateTheories(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether theories are pre-enumerated. If they enabled, then the
            discovery system will return a test case for each row of test data; they are disabled, then the
            discovery system will return a single test case for the theory.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxEnumerableLength(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum length for printing collections.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectDepth(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum recursive depth for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectMemberCount(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum numbers of members to show for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxStringLength(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum length for printing strings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetSynchronousMessageReporting(Xunit.Sdk.ITestFrameworkDiscoveryOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetAssertEquivalentMaxDepth(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a max recursive object depth for comparisons done with <c>Assert.Equivalent</c>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetCulture(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the culture to use for running tests. <c>null</c> uses the default OS culture;
            <see cref="F:System.String.Empty"/> uses the invariant culture; any other value passes the
            provided value to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/> and uses the resulting object
            with <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessages(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetDiagnosticMessagesOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether diagnostic messages will be emitted. If the flag is not
            present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetDisableParallelization(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetDisableParallelizationOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to disable parallelization. If the flag is not present, returns the
            default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetExplicitOption(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that indicates how explicit tests should be handled.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetExplicitOptionOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that indicates how explicit tests should be handled. If the flag is not present,
            returns the default value (<see cref="F:Xunit.Sdk.ExplicitOption.Off"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetFailSkips(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail skipped tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetFailSkipsOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail skipped tests. If the flag is not present, returns the default
            value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetFailTestsWithWarnings(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail passing tests with warnings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetFailTestsWithWarningsOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag to fail passing tests with warning. If the flag is not present, returns
            the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessages(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetInternalDiagnosticMessagesOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether internal diagnostic messages will be emitted. If the flag is not
            present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetMaxParallelThreads(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetMaxParallelThreadsOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum number of threads to use when running tests in parallel. If set to 0 (or not set),
            the value of <see cref="P:System.Environment.ProcessorCount"/> is used; if set to a value less
            than 0, does not limit the number of threads.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetParallelAlgorithm(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the parallel algorithm to be used.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetParallelAlgorithmOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the parallel algorithm to be used. If the flag is not present, return the default
            value (<see cref="F:Xunit.Sdk.ParallelAlgorithm.Conservative"/>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxEnumerableLength(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum length for printing collections.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectDepth(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum recursive depth for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxObjectMemberCount(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum numbers of members to show for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetPrintMaxStringLength(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the maximum length for printing strings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetSeed(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets the value that should be used to seed randomness.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetShowLiveOutput(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag which indicates if the developer wishes to see output from <see cref="T:Xunit.ITestOutputHelper"/>
            live while it's being reported (in addition to seeing it collected together when the test is finished).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetShowLiveOutputOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag which indicates if the developer wishes to see output from <see cref="T:Xunit.ITestOutputHelper"/>
            live while it's being reported (in addition to seeing it collected together when the test is finished).
            If the flag is not present, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetStopOnTestFail(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net stop testing when a test fails.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetStopOnTestFailOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net stop testing when a test fails. If the flag
            is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReporting(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.GetSynchronousMessageReportingOrDefault(Xunit.Sdk.ITestFrameworkExecutionOptions)">
            <summary>
            Gets a flag that determines whether xUnit.net should report test results synchronously.
            If the flag is not set, returns the default value (<c>false</c>).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetAssertEquivalentMaxDepth(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Gets a max recursive object depth for comparisons done with <c>Assert.Equivalent</c>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetCulture(Xunit.Sdk.ITestFrameworkExecutionOptions,System.String)">
            <summary>
            Sets the culture to use for running tests. <c>null</c> uses the default OS culture;
            <see cref="F:System.String.Empty"/> uses the invariant culture; any other value passes the
            provided value to <see cref="M:System.Globalization.CultureInfo.#ctor(System.String)"/> and uses the resulting object
            with <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetDiagnosticMessages(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetDisableParallelization(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag to disable parallelization.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetExplicitOption(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{Xunit.Sdk.ExplicitOption})">
            <summary>
            Sets a flag to describe how explicit tests should be handled.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetFailSkips(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag to fail skipped tests.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetFailTestsWithWarnings(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag to fail passing tests with warnings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetInternalDiagnosticMessages(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether internal diagnostic messages will be emitted.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetMaxParallelThreads(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum number of threads to use when running tests in parallel.
            If set to 0 (the default value), does not limit the number of threads.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetParallelAlgorithm(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{Xunit.Sdk.ParallelAlgorithm})">
            <summary>
            Sets the parallel algorithm to be used.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxEnumerableLength(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum length for printing collections.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectDepth(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum recursive depth for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxObjectMemberCount(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum numbers of members to show for printing objects.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetPrintMaxStringLength(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the maximum length for printing strings.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetSeed(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Int32})">
            <summary>
            Sets the value that should be used to seed randomness.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetShowLiveOutput(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag which indicates if the developer wishes to see output from <see cref="T:Xunit.ITestOutputHelper"/>
            live while it's being reported (in addition to seeing it collected together when the test is finished).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetStopOnTestFail(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether xUnit.net stop testing when a test fails.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestFrameworkOptionsReadWriteExtensions.SetSynchronousMessageReporting(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Nullable{System.Boolean})">
            <summary>
            Sets a flag that determines whether xUnit.net should report test results synchronously.
            </summary>
        </member>
        <member name="T:Xunit.Internal.FilterAssembly">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterAssembly.#ctor(System.String)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterAssembly.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterClassFullName">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterClassFullName.#ctor(System.String)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterClassFullName.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterClassSimpleName">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterClassSimpleName.#ctor(System.String)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterClassSimpleName.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterFail">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.FilterFail.Instance">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.FilterFail.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterLogicalAnd">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterLogicalAnd.#ctor(Xunit.Runner.Common.ITestCaseFilter[])">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.FilterLogicalAnd.Filters">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.FilterLogicalAnd.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterLogicalNot">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterLogicalNot.#ctor(Xunit.Runner.Common.ITestCaseFilter)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterLogicalNot.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterLogicalOr">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterLogicalOr.#ctor(Xunit.Runner.Common.ITestCaseFilter[])">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.FilterLogicalOr.Filters">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.FilterLogicalOr.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterMethodFullName">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterMethodFullName.#ctor(System.String)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterMethodFullName.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterMethodSimpleName">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterMethodSimpleName.#ctor(System.String)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterMethodSimpleName.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterNamespace">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterNamespace.#ctor(System.String)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterNamespace.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterPass">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="P:Xunit.Internal.FilterPass.Instance">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.FilterPass.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.FilterTrait">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterTrait.#ctor(System.String,System.String)">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.FilterTrait.Filter(System.String,Xunit.Sdk.ITestCaseMetadata)">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.CommandLineGroup">
            <summary>
            INTERNAL ENUM. DO NOT USE.
            </summary>
        </member>
        <member name="F:Xunit.Internal.CommandLineGroup.Hidden">
            <summary/>
        </member>
        <member name="F:Xunit.Internal.CommandLineGroup.General">
            <summary/>
        </member>
        <member name="F:Xunit.Internal.CommandLineGroup.NetFramework">
            <summary/>
        </member>
        <member name="F:Xunit.Internal.CommandLineGroup.FilterSimple">
            <summary/>
        </member>
        <member name="F:Xunit.Internal.CommandLineGroup.FilterQuery">
            <summary/>
        </member>
        <member name="F:Xunit.Internal.CommandLineGroup.ArgumentDisplay">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.CommandLineParserBase">
            <summary>
            INTERNAL CLASS. DO NOT USE.
            </summary>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.#ctor(Xunit.Runner.Common.ConsoleHelper,System.Collections.Generic.IReadOnlyList{Xunit.Runner.Common.IRunnerReporter},System.String,System.String[])">
            <summary/>
        </member>
        <member name="P:Xunit.Internal.CommandLineParserBase.Args">
            <summary/>
        </member>
        <member name="P:Xunit.Internal.CommandLineParserBase.ConsoleHelper">
            <summary/>
        </member>
        <member name="P:Xunit.Internal.CommandLineParserBase.HelpRequested">
            <summary/>
        </member>
        <member name="P:Xunit.Internal.CommandLineParserBase.ParseWarnings">
            <summary/>
        </member>
        <member name="P:Xunit.Internal.CommandLineParserBase.Project">
            <summary/>
        </member>
        <member name="P:Xunit.Internal.CommandLineParserBase.RunnerReporters">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.AddHiddenParser(System.String,System.Action{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.AddParser(System.String,System.Action{System.Collections.Generic.KeyValuePair{System.String,System.String}},Xunit.Internal.CommandLineGroup,System.String,System.String[])">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.FileExists(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.GetAvailableRunnerReporters">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.GetFullPath(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.GuardNoOptionValue(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.IsConfigFile(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.LoadAssembly(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.OnAssertEquivalentMaxDepth(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.OnParallel(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.OnPause(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.OnWait(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.ParseInternal(System.Int32)">
            <summary/>
        </member>
        <member name="M:Xunit.Internal.CommandLineParserBase.PrintUsage">
            <summary/>
        </member>
        <member name="T:Xunit.Internal.ArgumentFormatter">
            <summary>
            Formats value for display in assertion messages and data-driven test display names.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.Ellipsis">
            <summary>
            Gets the ellipsis value (three middle dots, aka U+00B7).
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxEnumerableLength">
            <summary>
            Gets the maximum number of values printed for collections before truncation.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxObjectDepth">
            <summary>
            Gets the maximum printing depth, in terms of objects before truncation.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxObjectMemberCount">
            <summary>
            Gets the maximum number of items (properties or fields) printed in an object before truncation.
            </summary>
        </member>
        <member name="P:Xunit.Internal.ArgumentFormatter.MaxStringLength">
            <summary>
            Gets the maximum strength length before truncation.
            </summary>
        </member>
        <member name="M:Xunit.Internal.ArgumentFormatter.EscapeString(System.String)">
            <summary>
            Escapes a string for printing, attempting to most closely model the value on how you would
            enter the value in a C# string literal. That means control codes that are normally backslash
            escaped (like "\n" for newline) are represented like that; all other control codes for ASCII
            values under 32 are printed as "\xnn".
            </summary>
            <param name="s">The string value to be escaped</param>
        </member>
        <member name="M:Xunit.Internal.ArgumentFormatter.Format(System.Object,System.Int32)">
            <summary>
            Formats a value for display.
            </summary>
            <param name="value">The value to be formatted</param>
            <param name="depth">The optional printing depth (1 indicates a top-level value)</param>
        </member>
        <member name="M:Xunit.Internal.ArgumentFormatter.FormatTypeName(System.Type,System.Boolean)">
            <summary>
            Formats a type. This maps built-in C# types to their C# native name (e.g., printing "int" instead
            of "Int32" or "System.Int32").
            </summary>
            <param name="type">The type to get the formatted name of</param>
            <param name="fullTypeName">Set to <c>true</c> to include the namespace; set to <c>false</c> for just the simple type name</param>
        </member>
        <member name="T:Xunit.CecilSourceInformationProvider">
            <summary>
            An implementation of <see cref="T:Xunit.Runner.Common.ISourceInformationProvider"/> backed by <c>Mono.Cecil</c>.
            </summary>
        </member>
        <member name="M:Xunit.CecilSourceInformationProvider.Create(System.String)">
            <summary>
            Creates a source provider for the given test assembly.
            </summary>
            <param name="assemblyFileName">The test assembly filename</param>
            <remarks>
            This may return an instance of <see cref="T:Xunit.Runner.Common.NullSourceInformationProvider"/> if source information
            collection is turned off, or if the provided assembly does not exist on disk.
            </remarks>
        </member>
        <member name="M:Xunit.CecilSourceInformationProvider.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.CecilSourceInformationProvider.GetSourceInformation(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.FrontControllerFindAndRunSettings">
            <summary>
            Contains the information by <see cref="M:Xunit.IFrontController.FindAndRun(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindAndRunSettings)"/>.
            </summary>
            <param name="discoveryOptions">The options used during discovery</param>
            <param name="executionOptions">The options used during execution</param>
            <param name="filters">The optional filters (when not provided, finds all tests)</param>
        </member>
        <member name="M:Xunit.FrontControllerFindAndRunSettings.#ctor(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.Sdk.ITestFrameworkExecutionOptions,Xunit.Runner.Common.XunitFilters)">
            <summary>
            Contains the information by <see cref="M:Xunit.IFrontController.FindAndRun(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindAndRunSettings)"/>.
            </summary>
            <param name="discoveryOptions">The options used during discovery</param>
            <param name="executionOptions">The options used during execution</param>
            <param name="filters">The optional filters (when not provided, finds all tests)</param>
        </member>
        <member name="P:Xunit.FrontControllerFindAndRunSettings.DiscoveryOptions">
            <summary>
            The options used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.FrontControllerFindAndRunSettings.ExecutionOptions">
            <summary>
            The options used during execution.
            </summary>
        </member>
        <member name="P:Xunit.FrontControllerFindAndRunSettings.Filters">
            <summary>
            Get the test case filters used during discovery.
            </summary>
        </member>
        <member name="T:Xunit.FrontControllerFindSettings">
            <summary>
            Contains the information by <see cref="M:Xunit.IFrontControllerDiscoverer.Find(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindSettings)"/>.
            </summary>
            <param name="options">The discovery options</param>
            <param name="filters">The optional filters (when not provided, finds all tests)</param>
        </member>
        <member name="M:Xunit.FrontControllerFindSettings.#ctor(Xunit.Sdk.ITestFrameworkDiscoveryOptions,Xunit.Runner.Common.XunitFilters)">
            <summary>
            Contains the information by <see cref="M:Xunit.IFrontControllerDiscoverer.Find(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindSettings)"/>.
            </summary>
            <param name="options">The discovery options</param>
            <param name="filters">The optional filters (when not provided, finds all tests)</param>
        </member>
        <member name="P:Xunit.FrontControllerFindSettings.Filters">
            <summary>
            Get the test case filters used during discovery.
            </summary>
        </member>
        <member name="P:Xunit.FrontControllerFindSettings.Options">
            <summary>
            The options used during discovery.
            </summary>
        </member>
        <member name="T:Xunit.FrontControllerLaunchOptions">
            <summary>
            Launch options when using <see cref="T:Xunit.IFrontController"/> and/or <see cref="T:Xunit.IFrontControllerDiscoverer"/>.
            Current only supported by v3 test projects (all options will be ignored for v1/v2 test projects).
            </summary>
        </member>
        <member name="P:Xunit.FrontControllerLaunchOptions.WaitForDebugger">
            <summary>
            Wait for a debugger to be attached before performing any operations.
            </summary>
        </member>
        <member name="T:Xunit.FrontControllerRunSettings">
            <summary>
            Contains the information by <see cref="M:Xunit.IFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.FrontControllerRunSettings)"/>.
            </summary>
            <param name="options">The options used during execution</param>
            <param name="serializedTestCases">The test cases to be run</param>
        </member>
        <member name="M:Xunit.FrontControllerRunSettings.#ctor(Xunit.Sdk.ITestFrameworkExecutionOptions,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Contains the information by <see cref="M:Xunit.IFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.FrontControllerRunSettings)"/>.
            </summary>
            <param name="options">The options used during execution</param>
            <param name="serializedTestCases">The test cases to be run</param>
        </member>
        <member name="P:Xunit.FrontControllerRunSettings.Options">
            <summary>
            The options used during execution.
            </summary>
        </member>
        <member name="P:Xunit.FrontControllerRunSettings.SerializedTestCases">
            <summary>
            Get the list of test cases to be run.
            </summary>
        </member>
        <member name="T:Xunit.FrontControllerSettingsBase">
            <summary>
            Base class for all invocations of <see cref="T:Xunit.IFrontController"/> and <see cref="T:Xunit.IFrontControllerDiscoverer"/>.
            </summary>
        </member>
        <member name="P:Xunit.FrontControllerSettingsBase.LaunchOptions">
            <summary>
            Launch options. Currently only applicable to v3 test projects.
            </summary>
        </member>
        <member name="T:Xunit.IFrontController">
            <summary>
            Represents a class which acts as a front controller for unit testing frameworks.
            This allows runners to run tests from multiple unit testing frameworks (in particular,
            hiding the differences between xUnit.net v1, v2, and v3 tests).
            </summary>
        </member>
        <member name="M:Xunit.IFrontController.FindAndRun(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindAndRunSettings)">
            <summary>
            Starts the process of finding and running tests in an assembly. Typically only used
            by runner which do not present test discovery UIs to users that allow them to run
            selected tests (those should instead use <see cref="M:Xunit.IFrontControllerDiscoverer.Find(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindSettings)"/>
            and <see cref="M:Xunit.IFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.FrontControllerRunSettings)"/> as separate operations).
            </summary>
            <param name="messageSink">The message sink to report results back to.</param>
            <param name="settings">The settings used during discovery and execution.</param>
        </member>
        <member name="M:Xunit.IFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.FrontControllerRunSettings)">
            <summary>
            Starts the process of running selected tests in the assembly. The serialized test
            cases to run come from calling <see cref="M:Xunit.IFrontControllerDiscoverer.Find(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindSettings)"/>.
            </summary>
            <param name="messageSink">The message sink to report results back to.</param>
            <param name="settings">The settings used during execution.</param>
        </member>
        <member name="T:Xunit.IFrontControllerDiscoverer">
            <summary>
            Represents a class which acts as a front controller for unit testing frameworks for
            the purposes of discovery (which can include source-based discovery). Tests found
            with these classes can later be run by an instance of <see cref="T:Xunit.IFrontController"/>.
            This allows runners to run tests from multiple unit testing frameworks (in particular,
            hiding the differences between xUnit.net v1, v2, and v3 tests).
            </summary>
        </member>
        <member name="P:Xunit.IFrontControllerDiscoverer.CanUseAppDomains">
            <summary>
            Gets a flag indicating whether this discovery/execution can use app domains.
            </summary>
        </member>
        <member name="P:Xunit.IFrontControllerDiscoverer.TargetFramework">
            <summary>
            Gets the target framework that the test assembly is linked against.
            </summary>
        </member>
        <member name="P:Xunit.IFrontControllerDiscoverer.TestAssemblyUniqueID">
            <summary>
            Gets the unique ID for the test assembly provided to the discoverer.
            </summary>
        </member>
        <member name="P:Xunit.IFrontControllerDiscoverer.TestFrameworkDisplayName">
            <summary>
            Returns the display name of the test framework that this discoverer is running tests for.
            </summary>
        </member>
        <member name="M:Xunit.IFrontControllerDiscoverer.Find(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindSettings)">
            <summary>
            Starts the process of finding tests in an assembly. Typically only used by
            runners which discover tests and present them into a UI for the user to interactively
            choose for selective run (via <see cref="M:Xunit.IFrontController.Run(Xunit.Sdk.IMessageSink,Xunit.FrontControllerRunSettings)"/>). For runners which
            simply wish to discover and immediately run tests, they should instead
            use <see cref="M:Xunit.IFrontController.FindAndRun(Xunit.Sdk.IMessageSink,Xunit.FrontControllerFindAndRunSettings)"/>, which permits the same filtering logic
            as this method.
            </summary>
            <param name="messageSink">The message sink to report results back to.</param>
            <param name="settings">The settings used during discovery.</param>
        </member>
        <member name="T:Xunit.AssemblyUtility">
            <summary>
            Utility functions for assemblies.
            </summary>
        </member>
        <member name="M:Xunit.AssemblyUtility.GetAssemblyMetadata(System.String)">
            <summary>
            Gets metadata (including target framework and xUnit.net version) for the given assembly (on disk).
            This uses Mono Cecil to prevent officially loading the assembly into memory.
            </summary>
            <param name="assemblyFileName">The assembly filename.</param>
            <returns>The assembly metadata, if the assembly was found; <c>null</c>, otherwise.</returns>
        </member>
        <member name="T:Xunit.MediaTypeUtility">
            <summary>
            This class provides mappings from media types (stored in attachments) to the intended file system extension
            when storing the attachment on disk.
            </summary>
        </member>
        <member name="M:Xunit.MediaTypeUtility.GetFileExtension(System.String)">
            <summary>
            Gets the file extension for the given media type. If the media type is unknown, it will return <c>.bin</c>.
            </summary>
            <param name="mediaType">The media type to get the file extension from</param>
            <remarks>
            The media type list is pre-populated with media types from <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types"/>.
            On Windows, an unknown media type will attempt to find the file extension in the system registry, under
            <c>HKEY_CLASSES_ROOT\MIME\Database\Content Type</c>; on non-Windows OSes, there is no fallback.
            The pre-populated cache was last populated on 2025 February 5.
            </remarks>
        </member>
        <member name="M:Xunit.MediaTypeUtility.GetSanitizedFileNameWithExtension(System.String,System.String)">
            <summary>
            This takes a filename that may contain illegal characters (per <see cref="M:System.IO.Path.GetInvalidFileNameChars"/>),
            replaces them with underscores, and ensures that the file extension matches the provided MIME media type.
            If the media type does not have a known extension, <c>.bin</c> will be used.
            </summary>
            <param name="fileName">The filename</param>
            <param name="mediaType">The media type</param>
            <returns>The sanitized filename with the correct file extension applied</returns>
            <remarks>
            The media type list is pre-populated with media types from <see href="https://developer.mozilla.org/en-US/docs/Web/HTTP/MIME_types/Common_types"/>.
            On Windows, an unknown media type will attempt to find the file extension in the system registry, under
            <c>HKEY_CLASSES_ROOT\MIME\Database\Content Type</c>; on non-Windows OSes, there is no fallback.
            The pre-populated cache was last populated on 2025 February 5.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>
            Gets the identifier of the syntax used.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>
            Optional arguments associated with the specific syntax employed.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>
            The syntax identifier for strings containing composite formats for string formatting.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>
            The syntax identifier for strings containing date format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>
            The syntax identifier for strings containing date and time format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>
            The syntax identifier for strings containing JavaScript Object Notation (JSON).
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>
            The syntax identifier for strings containing numeric format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>
            The syntax identifier for strings containing regular expressions.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>
            The syntax identifier for strings containing time format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>
            The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>
            The syntax identifier for strings containing URIs.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>
            The syntax identifier for strings containing XML.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary/>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary/>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary/>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary/>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary/>
        </member>
    </members>
</doc>
